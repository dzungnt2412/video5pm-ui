{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/auth/views/SignIn.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/auth/views/SignIn.vue","mtime":1605110441120},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions, mapMutations, mapState } from 'vuex'\nimport VueRecaptcha from 'vue-recaptcha'\n\nimport { SHOW_NOTIFICATION_MESSAGE } from '@/packages/shared/store'\nimport Storage from '@core/helpers/storage'\nexport default {\n  components: { VueRecaptcha },\n  name: 'SignIn',\n  data() {\n    return {\n      email: '',\n      password: '',\n      isLoading: false,\n      result: { success: false, message: '' },\n      form: {\n        checkCaptcha: false,\n      },\n      count: 0,\n      status: false,\n      requiredPassword: false,\n      requiredEmail: false,\n      check: true,\n    }\n  },\n  computed: {\n    ...mapState('auth', {\n      currentUser: (state) => state.user,\n    }),\n    recapchaKey() {\n      return `${process.env.VUE_APP_RECAPCHA_KEY}`\n    },\n  },\n  methods: {\n    ...mapActions('auth', ['signIn']),\n    ...mapMutations('shared', [SHOW_NOTIFICATION_MESSAGE]),\n\n    redirect() {\n      return this.$router.push('/forgot')\n    },\n\n    checkRequired() {\n      let result = true\n      if (this.password == '') {\n        this.requiredPassword = true\n        result = false\n      } else {\n        this.requiredPassword = false\n      }\n\n      if (this.email == '') {\n        this.requiredEmail = true\n        result = false\n      } else {\n        this.requiredEmail = false\n      }\n\n      return result\n    },\n\n    pushNoti() {\n      this.showNotificationMessage('This is message')\n    },\n\n    async onSignIn() {\n      if (!this.checkRequired()) {\n        return\n      }\n\n      const data = {\n        password: this.password,\n      }\n\n      if (this.email.includes('@')) {\n        data.email = this.email.trim()\n      } else {\n        data.username = this.email.trim()\n      }\n\n      if (!data.email && !data.username) {\n        this.$toast.open({\n          type: 'error',\n          message: 'Username/Email required',\n        })\n        return\n      }\n\n      if (!data.password) {\n        this.$toast.open({\n          type: 'error',\n          message: 'Password required',\n        })\n        return\n      }\n      if (this.count >= 1 && !this.form.checkCaptcha) {\n        this.check = false\n        return\n      }\n      this.isLoading = true\n      this.result = await this.signIn(data)\n      setTimeout(() => {\n        this.isLoading = false\n      }, 2000)\n\n      if (this.result.number_incorrect >= 3) {\n        this.count += 1\n      }\n\n      if (this.result.success) {\n        setTimeout(() => {\n          this.$router.push('/')\n        }, 2000)\n      } else {\n        if (this.result.userInActive) {\n          Storage.set('userEmail', this.currentUser.email)\n          console.log(this.currentUser)\n          setTimeout(() => {\n            this.$router.push('/verify-email')\n          }, 2000)\n          this.$toast.open({\n            type: 'error',\n            message: this.result.message,\n          })\n          return\n        }\n        if (this.$refs.recapcha) {\n          this.$refs.recapcha.reset()\n          this.form.checkCaptcha = false\n        }\n\n        this.$toast.open({\n          type: 'error',\n          message: this.result.message,\n        })\n      }\n    },\n    onVerify: function(response) {\n      if (response) this.form.checkCaptcha = true\n      this.check = true\n    },\n  },\n}\n",null]}