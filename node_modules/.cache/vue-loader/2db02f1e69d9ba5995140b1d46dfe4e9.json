{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/AccordionItem.vue?vue&type=style&index=0&id=77cfd959&scoped=true&lang=css&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/AccordionItem.vue","mtime":1603898990376},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/css-loader/index.js","mtime":1601450297541},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1597736282333},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/postcss-loader/src/index.js","mtime":1597736281462},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.accordion-body {\n  height: 0px;\n  overflow: hidden;\n}\n.caret-down {\n  transform: rotate(180deg);\n}\n.header-icon {\n  width: 100%;\n}\n",{"version":3,"sources":["AccordionItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AccordionItem.vue","sourceRoot":"src/kit","sourcesContent":["<template>\n  <div :class=\"card_classes\">\n    <div class=\"card-header\" @click=\"notifyOfClick\">\n      <div class=\"card-header-title\">\n        <slot name=\"title\"></slot>\n      </div>\n\n      <p class=\"card-header-icon\">\n        <span v-if=\"!usingCustomIcon\" class=\"icon\">\n          <svg\n            v-if=\"showCaret\"\n            :class=\"dropdownIconClasses\"\n            :style=\"iconStyle\"\n            version=\"1.1\"\n            viewBox=\"0 0 129 129\"\n            enable-background=\"new 0 0 129 129\"\n          >\n            <g>\n              <path\n                d=\"m121.3,34.6c-1.6-1.6-4.2-1.6-5.8,0l-51,51.1-51.1-51.1c-1.6-1.6-4.2-1.6-5.8,0-1.6,1.6-1.6,4.2 0,5.8l53.9,53.9c0.8,0.8 1.8,1.2 2.9,1.2 1,0 2.1-0.4 2.9-1.2l53.9-53.9c1.7-1.6 1.7-4.2 0.1-5.8z\"\n              ></path>\n            </g>\n          </svg>\n          <PlusMinus v-if=\"showPlus || showMinus\" :minus=\"showMinus\" />\n        </span>\n        <span v-else class=\"icon\">\n          <slot name=\"icon\"></slot>\n          <slot v-if=\"isOpen\" name=\"icon-open\"></slot>\n          <slot v-else name=\"icon-closed\"></slot>\n        </span>\n      </p>\n    </div>\n    <div class=\"accordion-body\" ref=\"body\" :style=\"slideStyle\">\n      <div :class=\"card_content_classes\" ref=\"bodyContent\">\n        <slot name=\"content\"></slot>\n      </div>\n      <div :class=\"footerClasses\" ref=\"bodyFooter\">\n        <slot name=\"footer\"></slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport PlusMinus from './AccordionPlusMinus.vue'\nimport { transitionEndEventName } from './utils'\n\nexport default {\n  name: 'AccordionItem',\n  components: {\n    PlusMinus,\n  },\n  data() {\n    return {\n      isOpen: false,\n      autoHeightInterval: null,\n      showCardContent: false,\n      uniqueId: null,\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.$parent.$emit('child-registered', this)\n      this.$parent.$on('toggle-child', this.handleToggleRequest)\n      const accordionBody = this.$refs.body\n      const eName = transitionEndEventName(accordionBody)\n      accordionBody.addEventListener(eName, () => {\n        if (accordionBody.style.height !== '0px') {\n          this.autoHeightStart(accordionBody)\n        } else {\n          this.autoHeightStop()\n          this.showCardContent = false\n        }\n      })\n    })\n  },\n  beforeDestroy() {\n    this.$parent.$emit('child-removed', this.uniqueId)\n  },\n  watch: {\n    isOpen(newStatus) {\n      if (newStatus) {\n        this.$emit('open')\n      } else {\n        this.$emit('close')\n      }\n      this.doTheSlide()\n    },\n  },\n  computed: {\n    config() {\n      const {\n        caretAnimation: animation = {\n          duration: '450ms',\n          timerFunc: 'ease',\n        },\n        dropdown = false,\n        icon = 'caret',\n        slide = {\n          duration: '700ms',\n          timerFunc: 'ease',\n        },\n      } = this.$parent\n      return {\n        animation,\n        dropdown,\n        icon,\n        slide,\n      }\n    },\n    dropdownIconClasses() {\n      return {\n        'header-icon': true,\n        'caret-down': !this.isOpen,\n      }\n    },\n    card_classes() {\n      return {\n        card: true,\n        'card-active': this.isOpen,\n      }\n    },\n    card_content_classes() {\n      return {\n        'card-content': true,\n        'is-hidden': !this.showCardContent,\n      }\n    },\n    footerClasses() {\n      return {\n        'card-footer': true,\n        'is-hidden': !this.$slots.footer,\n      }\n    },\n    usingCustomIcon() {\n      return this.config.icon === 'custom'\n    },\n    showCaret() {\n      return this.config.icon === 'caret'\n    },\n    showPlus() {\n      return this.config.icon === 'plus-minus' && !this.isOpen\n    },\n    showMinus() {\n      return this.config.icon === 'plus-minus' && this.isOpen\n    },\n    slideStyle() {\n      const c = this.config.slide\n      return {\n        transition: `all ${c.duration} ${c.timerFunc}`,\n      }\n    },\n    iconStyle() {\n      const c = this.config.animation\n      if (c.none === true) {\n        return {}\n      }\n      return {\n        transition: `all ${c.duration} ${c.timerFunc}`,\n      }\n    },\n  },\n  methods: {\n    handleToggleRequest(toggleId) {\n      if (toggleId === this.uniqueId) {\n        this.toggleCollapsed()\n      }\n    },\n    setUniqueId(id) {\n      this.uniqueId = id\n    },\n    notifyOfClick() {\n      if (this.uniqueId) {\n        this.$parent.$emit('child-clicked', this.uniqueId)\n      }\n    },\n    collapse() {\n      this.isOpen = false\n    },\n    toggleCollapsed() {\n      this.isOpen = !this.isOpen\n    },\n    doTheSlide() {\n      const el = this.$refs.body\n      if (this.isOpen === true) {\n        this.showCardContent = true\n        this.$nextTick().then(() => {\n          this.adjustHeight(el, el.scrollHeight)\n        })\n      } else {\n        this.slideUp(el)\n      }\n    },\n    adjustHeight(el, newHeight) {\n      el.style.height = `${newHeight}px`\n    },\n    slideUp(el) {\n      if (el.style.height === 'auto') {\n        el.style.height = `${el.scrollHeight}px`\n      }\n      el.style.height = '0px'\n    },\n    autoHeightStart(el) {\n      if (this.autoHeightInterval) this.autoHeightStop()\n      this.autoHeightInterval = setInterval(() => {\n        try {\n          const actualHeight =\n            this.$refs.bodyContent.scrollHeight +\n            this.$refs.bodyFooter.scrollHeight +\n            1\n\n          if (\n            el.style.height !== '0px' &&\n            actualHeight !== el.style.height &&\n            this.isOpen\n          ) {\n            this.adjustHeight(el, actualHeight)\n          }\n        } catch (e) {\n          this.autoHeightStop()\n        }\n      }, 100)\n    },\n    autoHeightStop() {\n      clearInterval(this.autoHeightInterval)\n      this.autoHeightInterval = null\n    },\n  },\n}\n</script>\n\n<style scoped>\n.accordion-body {\n  height: 0px;\n  overflow: hidden;\n}\n.caret-down {\n  transform: rotate(180deg);\n}\n.header-icon {\n  width: 100%;\n}\n</style>\n"]}]}