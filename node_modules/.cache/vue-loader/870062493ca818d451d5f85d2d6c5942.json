{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/AccordionItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/AccordionItem.vue","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PlusMinus from './AccordionPlusMinus.vue'\nimport { transitionEndEventName } from './utils'\n\nexport default {\n  name: 'AccordionItem',\n  components: {\n    PlusMinus,\n  },\n  data() {\n    return {\n      isOpen: false,\n      autoHeightInterval: null,\n      showCardContent: false,\n      uniqueId: null,\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.$parent.$emit('child-registered', this)\n      this.$parent.$on('toggle-child', this.handleToggleRequest)\n      const accordionBody = this.$refs.body\n      const eName = transitionEndEventName(accordionBody)\n      accordionBody.addEventListener(eName, () => {\n        if (accordionBody.style.height !== '0px') {\n          this.autoHeightStart(accordionBody)\n        } else {\n          this.autoHeightStop()\n          this.showCardContent = false\n        }\n      })\n    })\n  },\n  beforeDestroy() {\n    this.$parent.$emit('child-removed', this.uniqueId)\n  },\n  watch: {\n    isOpen(newStatus) {\n      if (newStatus) {\n        this.$emit('open')\n      } else {\n        this.$emit('close')\n      }\n      this.doTheSlide()\n    },\n  },\n  computed: {\n    config() {\n      const {\n        caretAnimation: animation = {\n          duration: '450ms',\n          timerFunc: 'ease',\n        },\n        dropdown = false,\n        icon = 'caret',\n        slide = {\n          duration: '700ms',\n          timerFunc: 'ease',\n        },\n      } = this.$parent\n      return {\n        animation,\n        dropdown,\n        icon,\n        slide,\n      }\n    },\n    dropdownIconClasses() {\n      return {\n        'header-icon': true,\n        'caret-down': !this.isOpen,\n      }\n    },\n    card_classes() {\n      return {\n        card: true,\n        'card-active': this.isOpen,\n      }\n    },\n    card_content_classes() {\n      return {\n        'card-content': true,\n        'is-hidden': !this.showCardContent,\n      }\n    },\n    footerClasses() {\n      return {\n        'card-footer': true,\n        'is-hidden': !this.$slots.footer,\n      }\n    },\n    usingCustomIcon() {\n      return this.config.icon === 'custom'\n    },\n    showCaret() {\n      return this.config.icon === 'caret'\n    },\n    showPlus() {\n      return this.config.icon === 'plus-minus' && !this.isOpen\n    },\n    showMinus() {\n      return this.config.icon === 'plus-minus' && this.isOpen\n    },\n    slideStyle() {\n      const c = this.config.slide\n      return {\n        transition: `all ${c.duration} ${c.timerFunc}`,\n      }\n    },\n    iconStyle() {\n      const c = this.config.animation\n      if (c.none === true) {\n        return {}\n      }\n      return {\n        transition: `all ${c.duration} ${c.timerFunc}`,\n      }\n    },\n  },\n  methods: {\n    handleToggleRequest(toggleId) {\n      if (toggleId === this.uniqueId) {\n        this.toggleCollapsed()\n      }\n    },\n    setUniqueId(id) {\n      this.uniqueId = id\n    },\n    notifyOfClick() {\n      if (this.uniqueId) {\n        this.$parent.$emit('child-clicked', this.uniqueId)\n      }\n    },\n    collapse() {\n      this.isOpen = false\n    },\n    toggleCollapsed() {\n      this.isOpen = !this.isOpen\n    },\n    doTheSlide() {\n      const el = this.$refs.body\n      if (this.isOpen === true) {\n        this.showCardContent = true\n        this.$nextTick().then(() => {\n          this.adjustHeight(el, el.scrollHeight)\n        })\n      } else {\n        this.slideUp(el)\n      }\n    },\n    adjustHeight(el, newHeight) {\n      el.style.height = `${newHeight}px`\n    },\n    slideUp(el) {\n      if (el.style.height === 'auto') {\n        el.style.height = `${el.scrollHeight}px`\n      }\n      el.style.height = '0px'\n    },\n    autoHeightStart(el) {\n      if (this.autoHeightInterval) this.autoHeightStop()\n      this.autoHeightInterval = setInterval(() => {\n        try {\n          const actualHeight =\n            this.$refs.bodyContent.scrollHeight +\n            this.$refs.bodyFooter.scrollHeight +\n            1\n\n          if (\n            el.style.height !== '0px' &&\n            actualHeight !== el.style.height &&\n            this.isOpen\n          ) {\n            this.adjustHeight(el, actualHeight)\n          }\n        } catch (e) {\n          this.autoHeightStop()\n        }\n      }, 100)\n    },\n    autoHeightStop() {\n      clearInterval(this.autoHeightInterval)\n      this.autoHeightInterval = null\n    },\n  },\n}\n",null]}