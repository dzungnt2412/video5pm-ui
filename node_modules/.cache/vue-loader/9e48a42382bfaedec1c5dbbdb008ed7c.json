{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/components/shared/resource/ProductType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/components/shared/resource/ProductType.vue","mtime":1603898990376},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport debounce from 'lodash/debounce'\nimport isEmpty from 'lodash/isEmpty'\nexport default {\n  name: 'ProductType',\n  props: {\n    value: {\n      type: Object,\n      default: () => {},\n    },\n    products: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  computed: {\n    validProducts() {\n      return this.query\n        ? this.products.filter(\n            ({ name }) =>\n              name.toLowerCase().indexOf(this.query.toLowerCase()) !== -1\n          )\n        : this.products\n    },\n  },\n  data() {\n    return {\n      query: '',\n      selected: null,\n    }\n  },\n  mounted() {\n    if (this.value && this.value.id && this.products && this.products.length) {\n      const product = this.products.find(({ id }) => id === this.value.id)\n\n      if (product) {\n        const selected = Object.assign({}, product)\n        this.selected = isEmpty(selected) ? null : selected\n      }\n    }\n  },\n  methods: {\n    handleSearchProductTypes: debounce(async function(search = '') {\n      this.query = search\n    }, 500),\n\n    handleSelect(product) {\n      this.$emit('input', product || {})\n    },\n\n    handleRemove() {\n      this.$emit('input', {})\n    },\n\n    customLabel(product) {\n      return product ? product.name : 'Select product base'\n    },\n  },\n}\n",{"version":3,"sources":["ProductType.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ProductType.vue","sourceRoot":"src/components/shared/resource","sourcesContent":["<template>\n  <multiselect\n    class=\"multiselect-custom\"\n    v-model=\"selected\"\n    :options=\"products\"\n    placeholder=\"Search product base\"\n    :custom-label=\"customLabel\"\n    @search-change=\"handleSearchProductTypes\"\n    @select=\"handleSelect\"\n    @remove=\"handleRemove\"\n  >\n    <li slot=\"beforeList\" class=\"multiselect__element\">\n      <input type=\"text\" class=\"form-control\" :value=\"query\" />\n    </li>\n  </multiselect>\n</template>\n\n<script>\nimport debounce from 'lodash/debounce'\nimport isEmpty from 'lodash/isEmpty'\nexport default {\n  name: 'ProductType',\n  props: {\n    value: {\n      type: Object,\n      default: () => {},\n    },\n    products: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  computed: {\n    validProducts() {\n      return this.query\n        ? this.products.filter(\n            ({ name }) =>\n              name.toLowerCase().indexOf(this.query.toLowerCase()) !== -1\n          )\n        : this.products\n    },\n  },\n  data() {\n    return {\n      query: '',\n      selected: null,\n    }\n  },\n  mounted() {\n    if (this.value && this.value.id && this.products && this.products.length) {\n      const product = this.products.find(({ id }) => id === this.value.id)\n\n      if (product) {\n        const selected = Object.assign({}, product)\n        this.selected = isEmpty(selected) ? null : selected\n      }\n    }\n  },\n  methods: {\n    handleSearchProductTypes: debounce(async function(search = '') {\n      this.query = search\n    }, 500),\n\n    handleSelect(product) {\n      this.$emit('input', product || {})\n    },\n\n    handleRemove() {\n      this.$emit('input', {})\n    },\n\n    customLabel(product) {\n      return product ? product.name : 'Select product base'\n    },\n  },\n}\n</script>\n"]}]}