{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/Upload/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/Upload/Index.vue","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["\nimport Migrating from '../mixins/migrating'\nimport Upload from './Upload'\n\nfunction noop() {}\n\nexport default {\n  name: 'ElUpload',\n\n  mixins: [Migrating],\n\n  components: {\n    Upload,\n  },\n\n  provide() {\n    return {\n      uploader: this,\n    }\n  },\n\n  props: {\n    action: {\n      type: String,\n      required: true,\n    },\n    headers: {\n      type: Object,\n      default() {\n        return {}\n      },\n    },\n    data: Object,\n    multiple: Boolean,\n    name: {\n      type: String,\n      default: 'file',\n    },\n    drag: Boolean,\n    dragger: Boolean,\n    withCredentials: Boolean,\n    showFileList: {\n      type: Boolean,\n      default: true,\n    },\n    accept: String,\n    type: {\n      type: String,\n      default: 'select',\n    },\n    beforeUpload: Function,\n    beforeRemove: Function,\n    onRemove: {\n      type: Function,\n      default: noop,\n    },\n    onChange: {\n      type: Function,\n      default: noop,\n    },\n    onPreview: {\n      type: Function,\n    },\n    onSuccess: {\n      type: Function,\n      default: noop,\n    },\n    onProgress: {\n      type: Function,\n      default: noop,\n    },\n    onError: {\n      type: Function,\n      default: noop,\n    },\n    autoUpload: {\n      type: Boolean,\n      default: true,\n    },\n    listType: {\n      type: String,\n      default: 'text',\n    },\n    httpRequest: Function,\n    disabled: Boolean,\n    limit: Number,\n    onExceed: {\n      type: Function,\n      default: noop,\n    },\n    limitPreviewSize: {\n      type: Number,\n      default: 5242880,\n    },\n    maxFileSize: {\n      type: Number,\n      default: 500000,\n    },\n  },\n\n  data() {\n    return {\n      uploadFiles: [],\n      dragOver: false,\n      draging: false,\n      tempIndex: 1,\n    }\n  },\n\n  computed: {\n    uploadDisabled() {\n      return this.disabled\n    },\n  },\n\n  watch: {\n    listType(type) {\n      if (type === 'picture-card' || type === 'picture') {\n        this.uploadFiles.forEach((file) => {\n          if (!file.url && file.raw) {\n            try {\n              file.url = URL.createObjectURL(file.raw)\n            } catch (err) {\n              console.error('[Element Error][Upload]', err)\n            }\n          }\n        })\n      }\n    },\n  },\n\n  methods: {\n    handleStart(rawFile) {\n      rawFile.uid = Date.now() + this.tempIndex++\n      let file = {\n        status: 'ready',\n        name: rawFile.name,\n        size: rawFile.size,\n        percentage: 0,\n        uid: rawFile.uid,\n        raw: rawFile,\n      }\n\n      if (this.listType === 'picture-card' || this.listType === 'picture') {\n        try {\n          if (this.limitPreviewSize > rawFile.size) {\n            file.url = URL.createObjectURL(rawFile)\n          }\n        } catch (err) {\n          console.error('[Element Error][Upload]', err)\n          return\n        }\n      }\n\n      this.uploadFiles.push(file)\n      this.onChange(file, this.uploadFiles)\n    },\n    handleProgress(ev, rawFile) {\n      const file = this.getFile(rawFile)\n      this.onProgress(ev, file, this.uploadFiles)\n      file.status = 'uploading'\n      file.percentage = ev.percent || 0\n    },\n    handleSuccess(res, rawFile) {\n      const file = this.getFile(rawFile)\n\n      if (file) {\n        file.status = 'success'\n        file.response = res\n\n        this.onSuccess(res, file, this.uploadFiles)\n        this.onChange(file, this.uploadFiles)\n      }\n    },\n    handleError(err, rawFile) {\n      const file = this.getFile(rawFile)\n      const fileList = this.uploadFiles\n\n      file.status = 'fail'\n\n      fileList.splice(fileList.indexOf(file), 1)\n\n      this.onError(err, file, this.uploadFiles)\n      this.onChange(file, this.uploadFiles)\n    },\n    handleRemove(file, raw) {\n      if (raw) {\n        file = this.getFile(raw)\n      }\n      let doRemove = () => {\n        this.abort(file)\n        let fileList = this.uploadFiles\n        fileList.splice(fileList.indexOf(file), 1)\n        this.onRemove(file, fileList)\n      }\n\n      if (!this.beforeRemove) {\n        doRemove()\n      } else if (typeof this.beforeRemove === 'function') {\n        const before = this.beforeRemove(file, this.uploadFiles)\n        if (before && before.then) {\n          before.then(() => {\n            doRemove()\n          }, noop)\n        } else if (before !== false) {\n          doRemove()\n        }\n      }\n    },\n    getFile(rawFile) {\n      let fileList = this.uploadFiles\n      let target\n      fileList.every((item) => {\n        target = rawFile.uid === item.uid ? item : null\n        return !target\n      })\n      return target\n    },\n    abort(file) {\n      this.$refs['upload-inner'].abort(file)\n    },\n    clearFiles() {\n      this.uploadFiles = []\n    },\n    submit() {\n      this.uploadFiles\n        .filter((file) => file.status === 'ready')\n        .forEach((file) => {\n          this.$refs['upload-inner'].upload(file.raw)\n        })\n    },\n    getMigratingConfig() {\n      return {\n        props: {\n          'default-file-list': 'default-file-list is renamed to file-list.',\n          'show-upload-list': 'show-upload-list is renamed to show-file-list.',\n        },\n      }\n    },\n  },\n\n  beforeDestroy() {\n    this.uploadFiles.forEach((file) => {\n      if (file.url && file.url.indexOf('blob:') === 0) {\n        URL.revokeObjectURL(file.url)\n      }\n    })\n  },\n\n  render() {\n    let uploadList\n    const uploadData = {\n      props: {\n        type: this.type,\n        drag: this.drag,\n        action: this.action,\n        multiple: this.multiple,\n        'before-upload': this.beforeUpload,\n        'with-credentials': this.withCredentials,\n        headers: this.headers,\n        name: this.name,\n        data: this.data,\n        accept: this.accept,\n        fileList: this.uploadFiles,\n        autoUpload: this.autoUpload,\n        listType: this.listType,\n        disabled: this.uploadDisabled,\n        limit: this.limit,\n        maxFileSize: this.maxFileSize,\n        'on-exceed': this.onExceed,\n        'on-start': this.handleStart,\n        'on-progress': this.handleProgress,\n        'on-success': this.handleSuccess,\n        'on-error': this.handleError,\n        'on-preview': this.onPreview,\n        'on-remove': this.handleRemove,\n        'http-request': this.httpRequest,\n      },\n      ref: 'upload-inner',\n    }\n\n    const trigger = this.$slots.trigger || this.$slots.default\n    const uploadComponent = <upload {...uploadData}>{trigger}</upload>\n\n    return (\n      <div>\n        {this.listType === 'picture-card' ? uploadList : ''}\n        {this.$slots.trigger\n          ? [uploadComponent, this.$slots.default]\n          : uploadComponent}\n        {this.$slots.tip}\n        {this.listType !== 'picture-card' ? uploadList : ''}\n      </div>\n    )\n  },\n}\n",null]}