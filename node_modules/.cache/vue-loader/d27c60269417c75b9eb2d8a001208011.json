{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/ProductMappingForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/ProductMappingForm.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions, mapState } from 'vuex'\nimport { cloneDeep, isObjectDiff, asyncFilter } from '@core/utils'\nimport ConditionItem from './components/ConditionItem'\nimport { types } from '../constant'\nexport default {\n  name: 'ProductMappingForm',\n  components: {\n    ConditionItem,\n  },\n  data() {\n    return {\n      mode: 'new',\n      form: {\n        disjunctive: true,\n        product_type_id: null,\n        type: types.product_type,\n        rules: [\n          {\n            column: 'title',\n            relation: 'contain',\n            condition: '',\n          },\n        ],\n      },\n      initialForm: {},\n      isShowUnsavedBar: false,\n      isFetching: false,\n      isSaving: false,\n      isDeleting: false,\n    }\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      productMappingState: (state) => state.orderMapping,\n      products: (state) => state.productTypes,\n    }),\n    pageTitle() {\n      return this.mode === 'new'\n        ? 'Create product mapping rule'\n        : 'Update product mapping rule'\n    },\n  },\n  watch: {\n    form: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.initialForm)\n      },\n      deep: true,\n    },\n    initialForm: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.form)\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      createOrUpdateOrderMapping: 'createOrUpdateOrderMapping',\n      fetchOrderMapping: 'fetchOrderMapping',\n      deleteOrderMapping: 'deleteOrderMapping',\n      fetchProductTypes: 'fetchProductTypes',\n    }),\n    removeCondition(index) {\n      this.form.rules.splice(index, 1)\n    },\n    changeCondition(index, event) {\n      this.$set(this.form.rules, index, event)\n    },\n    addCondition() {\n      const rules = this.form.rules\n      rules.push({\n        ...rules[rules.length - 1],\n        condition: '',\n      })\n    },\n    async fetch() {\n      this.isFetching = true\n      const promises = [this.fetchProductTypes()]\n      if (this.$route.params.id && this.$route.params.id !== 'new') {\n        this.mode = 'edit'\n        promises.push(\n          this.fetchOrderMapping({\n            type: types.product_type,\n            id: +this.$route.params.id,\n          })\n        )\n      }\n      const [, res2] = await Promise.all(promises)\n      if (res2 && res2.success) {\n        this.form = cloneDeep(this.productMappingState)\n      }\n      this.initialForm = cloneDeep(this.form)\n      this.isFetching = false\n    },\n    discard() {\n      this.form = cloneDeep(this.initialForm)\n    },\n    showConfirmDelete() {\n      this.$dialog.confirm({\n        title: `Delete product mapping?`,\n        message: `Are you sure you want to delete this product mapping?`,\n        confirmText: 'Delete',\n        onConfirm: () => this.delete(),\n        type: 'danger',\n      })\n    },\n    async save() {\n      const validate = await this.$validator.validateAll()\n\n      let isConditionsValid = true\n      if (this.$refs.conditions && this.$refs.conditions.length) {\n        const filtered = await asyncFilter(this.$refs.conditions, async (c) => {\n          const isValid = await c.$validator.validateAll()\n          return isValid\n        })\n        isConditionsValid = filtered.length === this.$refs.conditions.length\n      }\n      if (!validate || !isConditionsValid) {\n        return\n      }\n\n      this.isSaving = true\n      if (this.mode === 'new') {\n        await this.create()\n      } else {\n        await this.update()\n      }\n      this.isSaving = false\n    },\n    async create() {\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.product_type,\n        payload: cloneDeep(this.form),\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was created',\n        })\n        this.$router.push({\n          name: 'product-mapping-update',\n          params: {\n            id: response.id,\n          },\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async update() {\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.product_type,\n        payload: cloneDeep(this.form),\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was updated',\n        })\n        await this.fetch()\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async delete() {\n      this.isDeleting = true\n      const response = await this.deleteOrderMapping({\n        type: types.product_type,\n        id: this.productMappingState.id,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was deleted',\n        })\n        this.$router.push({\n          name: 'product-mapping-list',\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n      this.isDeleting = false\n    },\n  },\n  created() {\n    this.fetch()\n  },\n}\n",null]}