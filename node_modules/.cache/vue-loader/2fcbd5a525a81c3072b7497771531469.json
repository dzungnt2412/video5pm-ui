{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/auth/views/SignIn.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/auth/views/SignIn.vue","mtime":1604203874773},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions, mapMutations, mapState } from 'vuex'\nimport VueRecaptcha from 'vue-recaptcha'\n\nimport { SHOW_NOTIFICATION_MESSAGE } from '@/packages/shared/store'\nexport default {\n  components: { VueRecaptcha },\n  name: 'SignIn',\n  data() {\n    return {\n      email: null,\n      password: null,\n      isLoading: false,\n      result: { success: false, message: '' },\n    }\n  },\n  computed: {\n    ...mapState('shared', {\n      notificationMessage: (state) => state.notificationMessage,\n    }),\n  },\n  methods: {\n    ...mapActions('auth', ['signIn']),\n    ...mapMutations('shared', [SHOW_NOTIFICATION_MESSAGE]),\n\n    pushNoti() {\n      this.showNotificationMessage('This is message')\n    },\n\n    async onSignIn() {\n      const validate = await this.$validator.validateAll()\n\n      if (!validate) {\n        return\n      }\n\n      this.isLoading = true\n\n      const data = {\n        password: this.password,\n      }\n\n      if (this.email.includes('@')) {\n        data.email = this.email\n      } else {\n        data.username = this.email\n      }\n\n      this.result = await this.signIn(data)\n      setTimeout(() => {\n        this.isLoading = false\n      }, 2000)\n\n      if (this.result.success) {\n        if (this.result.permission) {\n          return this.$router.push('/')\n        }\n        return this.$toast.open({\n          type: 'error',\n          message: 'You are not allowed to do this action !',\n        })\n      } else {\n        this.$toast.open({ type: 'error', message: this.result.message })\n      }\n    },\n  },\n}\n",{"version":3,"sources":["SignIn.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SignIn.vue","sourceRoot":"src/packages/auth/views","sourcesContent":["<template>\n  <div class=\"page vertical-align \">\n    <div class=\"vertical-align-middle mt-80\">\n      <div class=\"\">\n        <div class=\"brand contest\">\n          <h2 class=\"brand-text font-size-24 font-weight-bold\">\n            Sign in to Lionnix\n          </h2>\n          <span class=\"brand-text-little font-size-14 font-weight-400 \"\n            >Best quality. Lowest base cost. The most optimal system.</span\n          >\n        </div>\n        <form @submit.prevent=\"onSignIn\">\n          <div class=\"qinput\">\n            <label class=\" font-weight-bold\">Email or username</label>\n            <p-input placeholder=\"you@example.com\" type=\"email\" />\n          </div>\n          <div>\n            <label class=\" font-weight-bold\">Password</label>\n            <p-input\n              placeholder=\"Password\"\n              prefixIcon=\"search\"\n              type=\"password\"\n            />\n          </div>\n          <button class=\"mt-40 btn btn-special btn-primary\">\n            Sign in\n          </button>\n        </form>\n        <div class=\"captcha mb-20\">\n          <vue-recaptcha\n            sitekey=\"6Ld8Gt0ZAAAAAEjG7RBzGB-dmL5nQ8plAt1YvHpm\"\n            :loadRecaptchaScript=\"true\"\n          >\n          </vue-recaptcha>\n        </div>\n        <p class=\"text-center font-weight-400 font-size-14\">\n          New to Lionnix?\n          <router-link\n            class=\"font-weight-600 creatAcount\"\n            :to=\"{ name: 'sign-up' }\"\n            >Create an Account</router-link\n          >\n        </p>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport { mapActions, mapMutations, mapState } from 'vuex'\nimport VueRecaptcha from 'vue-recaptcha'\n\nimport { SHOW_NOTIFICATION_MESSAGE } from '@/packages/shared/store'\nexport default {\n  components: { VueRecaptcha },\n  name: 'SignIn',\n  data() {\n    return {\n      email: null,\n      password: null,\n      isLoading: false,\n      result: { success: false, message: '' },\n    }\n  },\n  computed: {\n    ...mapState('shared', {\n      notificationMessage: (state) => state.notificationMessage,\n    }),\n  },\n  methods: {\n    ...mapActions('auth', ['signIn']),\n    ...mapMutations('shared', [SHOW_NOTIFICATION_MESSAGE]),\n\n    pushNoti() {\n      this.showNotificationMessage('This is message')\n    },\n\n    async onSignIn() {\n      const validate = await this.$validator.validateAll()\n\n      if (!validate) {\n        return\n      }\n\n      this.isLoading = true\n\n      const data = {\n        password: this.password,\n      }\n\n      if (this.email.includes('@')) {\n        data.email = this.email\n      } else {\n        data.username = this.email\n      }\n\n      this.result = await this.signIn(data)\n      setTimeout(() => {\n        this.isLoading = false\n      }, 2000)\n\n      if (this.result.success) {\n        if (this.result.permission) {\n          return this.$router.push('/')\n        }\n        return this.$toast.open({\n          type: 'error',\n          message: 'You are not allowed to do this action !',\n        })\n      } else {\n        this.$toast.open({ type: 'error', message: this.result.message })\n      }\n    },\n  },\n}\n</script>\n"]}]}