{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/modal/Modal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/modal/Modal.vue","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { removeElement } from '../../utils/dom'\nimport config from '../../config'\n\nexport default {\n  name: 'PModal',\n  props: {\n    active: Boolean,\n    component: [Object, Function],\n    content: String,\n    programmatic: Boolean,\n    props: Object,\n    events: Object,\n    size: {\n      type: String,\n      default: 'lg',\n    },\n    width: {\n      type: [String, Number],\n      default: 960,\n    },\n    hasModalCard: Boolean,\n    animation: {\n      type: String,\n      default: 'zoom-out',\n    },\n    canCancel: {\n      type: [Array, Boolean],\n      default: () => {\n        return config.defaultModalCanCancel\n      },\n    },\n    onCancel: {\n      type: Function,\n      default: () => {},\n    },\n    scroll: {\n      type: String,\n      default: () => {\n        return config.defaultModalScroll ? config.defaultModalScroll : 'clip'\n      },\n      validator: (value) => {\n        return ['clip', 'keep'].indexOf(value) >= 0\n      },\n    },\n    fullScreen: Boolean,\n    customClass: String,\n    title: {\n      type: String,\n      default: '',\n    },\n    typeClass: String,\n  },\n  data() {\n    return {\n      isActive: this.active || false,\n      savedScrollTop: null,\n      newWidth: typeof this.width === 'number' ? this.width + 'px' : this.width,\n    }\n  },\n  computed: {\n    classSize() {\n      return this.size ? 'modal-' + this.size : ''\n    },\n    cancelOptions() {\n      return typeof this.canCancel === 'boolean'\n        ? this.canCancel\n          ? config.defaultModalCanCancel\n          : []\n        : this.canCancel\n    },\n    showX() {\n      return this.cancelOptions.indexOf('x') >= 0\n    },\n    customStyle() {\n      if (!this.fullScreen) {\n        return { maxWidth: this.newWidth }\n      }\n      return null\n    },\n  },\n  watch: {\n    active(value) {\n      this.isActive = value\n    },\n    isActive() {\n      this.handleScroll()\n    },\n  },\n  methods: {\n    hasHeaderSlot() {\n      return this.$slots.header || this.title\n    },\n    handleScroll() {\n      if (typeof window === 'undefined') {\n        return\n      }\n\n      if (this.scroll === 'clip') {\n        if (this.isActive) {\n          document.documentElement.classList.add('is-clipped')\n        } else {\n          document.documentElement.classList.remove('is-clipped')\n        }\n        return\n      }\n\n      this.savedScrollTop = !this.savedScrollTop\n        ? document.documentElement.scrollTop\n        : this.savedScrollTop\n\n      if (this.isActive) {\n        document.body.classList.add('is-noscroll')\n      } else {\n        document.body.classList.remove('is-noscroll')\n      }\n\n      if (this.isActive) {\n        document.body.style.top = `-${this.savedScrollTop}px`\n        return\n      }\n\n      document.documentElement.scrollTop = this.savedScrollTop\n      document.body.style.top = null\n      this.savedScrollTop = null\n    },\n\n    /**\n     * Close the Modal if canCancel and call the onCancel prop (function).\n     */\n    cancel(method) {\n      if (this.cancelOptions.indexOf(method) < 0) {\n        return\n      }\n\n      this.onCancel.apply(null, arguments)\n      this.close()\n    },\n\n    /**\n     * Call the onCancel prop (function).\n     * Emit events, and destroy modal if it's programmatic.\n     */\n    close() {\n      this.$emit('close')\n      this.$emit('update:active', false)\n\n      // Timeout for the animation complete before destroying\n      if (this.programmatic) {\n        this.isActive = false\n        setTimeout(() => {\n          this.$destroy()\n          removeElement(this.$el)\n        }, 150)\n      }\n    },\n\n    /**\n     * Keypress event that is bound to the document.\n     */\n    keyPress(event) {\n      // Esc key\n      if (this.isActive && event.keyCode === 27) {\n        this.cancel('escape')\n      }\n    },\n  },\n  created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('keyup', this.keyPress)\n    }\n  },\n  beforeMount() {\n    // Insert the Modal component in body tag\n    // only if it's programmatic\n    this.programmatic && document.body.appendChild(this.$el)\n  },\n  mounted() {\n    if (this.programmatic) this.isActive = true\n    else if (this.isActive) this.handleScroll()\n  },\n  beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('keyup', this.keyPress)\n      // reset scroll\n      document.documentElement.classList.remove('is-clipped')\n      const savedScrollTop = !this.savedScrollTop\n        ? document.documentElement.scrollTop\n        : this.savedScrollTop\n      document.body.classList.remove('is-noscroll')\n      document.documentElement.scrollTop = savedScrollTop\n      document.body.style.top = null\n    }\n  },\n}\n",{"version":3,"sources":["Modal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"Modal.vue","sourceRoot":"uikit/components/modal","sourcesContent":["<template>\n  <transition :name=\"animation\">\n    <div\n      v-if=\"isActive\"\n      class=\"p-modal is-active\"\n      :class=\"[{ 'is-full-screen': fullScreen }, customClass]\"\n    >\n      <div class=\"p-modal-background\" @click=\"cancel('outside')\"></div>\n      <div\n        class=\"p-animation-content\"\n        :class=\"[{ 'p-modal-content': !hasModalCard }, classSize, typeClass]\"\n        :style=\"customStyle\"\n      >\n        <div class=\"modal-content\">\n          <component\n            v-if=\"component\"\n            v-bind=\"props\"\n            v-on=\"events\"\n            :is=\"component\"\n            @close=\"close\"\n          />\n          <div v-else-if=\"content\" v-html=\"content\"></div>\n          <template v-else>\n            <div class=\"modal-header\">\n              <slot name=\"header\">\n                <button\n                  type=\"button\"\n                  class=\"close\"\n                  aria-label=\"Close\"\n                  @click=\"cancel('x')\"\n                >\n                  <span aria-hidden=\"true\">Ã—</span>\n                </button>\n                <h4 class=\"modal-title\">{{ title }}</h4>\n              </slot>\n            </div>\n            <div class=\"modal-body\">\n              <slot></slot>\n            </div>\n            <div class=\"modal-footer\">\n              <slot name=\"footer\"> </slot>\n            </div>\n          </template>\n        </div>\n      </div>\n      <button\n        type=\"button\"\n        v-if=\"showX\"\n        class=\"p-modal-close is-large\"\n        @click=\"cancel('x')\"\n      >\n      </button>\n    </div>\n  </transition>\n</template>\n\n<script>\nimport { removeElement } from '../../utils/dom'\nimport config from '../../config'\n\nexport default {\n  name: 'PModal',\n  props: {\n    active: Boolean,\n    component: [Object, Function],\n    content: String,\n    programmatic: Boolean,\n    props: Object,\n    events: Object,\n    size: {\n      type: String,\n      default: 'lg',\n    },\n    width: {\n      type: [String, Number],\n      default: 960,\n    },\n    hasModalCard: Boolean,\n    animation: {\n      type: String,\n      default: 'zoom-out',\n    },\n    canCancel: {\n      type: [Array, Boolean],\n      default: () => {\n        return config.defaultModalCanCancel\n      },\n    },\n    onCancel: {\n      type: Function,\n      default: () => {},\n    },\n    scroll: {\n      type: String,\n      default: () => {\n        return config.defaultModalScroll ? config.defaultModalScroll : 'clip'\n      },\n      validator: (value) => {\n        return ['clip', 'keep'].indexOf(value) >= 0\n      },\n    },\n    fullScreen: Boolean,\n    customClass: String,\n    title: {\n      type: String,\n      default: '',\n    },\n    typeClass: String,\n  },\n  data() {\n    return {\n      isActive: this.active || false,\n      savedScrollTop: null,\n      newWidth: typeof this.width === 'number' ? this.width + 'px' : this.width,\n    }\n  },\n  computed: {\n    classSize() {\n      return this.size ? 'modal-' + this.size : ''\n    },\n    cancelOptions() {\n      return typeof this.canCancel === 'boolean'\n        ? this.canCancel\n          ? config.defaultModalCanCancel\n          : []\n        : this.canCancel\n    },\n    showX() {\n      return this.cancelOptions.indexOf('x') >= 0\n    },\n    customStyle() {\n      if (!this.fullScreen) {\n        return { maxWidth: this.newWidth }\n      }\n      return null\n    },\n  },\n  watch: {\n    active(value) {\n      this.isActive = value\n    },\n    isActive() {\n      this.handleScroll()\n    },\n  },\n  methods: {\n    hasHeaderSlot() {\n      return this.$slots.header || this.title\n    },\n    handleScroll() {\n      if (typeof window === 'undefined') {\n        return\n      }\n\n      if (this.scroll === 'clip') {\n        if (this.isActive) {\n          document.documentElement.classList.add('is-clipped')\n        } else {\n          document.documentElement.classList.remove('is-clipped')\n        }\n        return\n      }\n\n      this.savedScrollTop = !this.savedScrollTop\n        ? document.documentElement.scrollTop\n        : this.savedScrollTop\n\n      if (this.isActive) {\n        document.body.classList.add('is-noscroll')\n      } else {\n        document.body.classList.remove('is-noscroll')\n      }\n\n      if (this.isActive) {\n        document.body.style.top = `-${this.savedScrollTop}px`\n        return\n      }\n\n      document.documentElement.scrollTop = this.savedScrollTop\n      document.body.style.top = null\n      this.savedScrollTop = null\n    },\n\n    /**\n     * Close the Modal if canCancel and call the onCancel prop (function).\n     */\n    cancel(method) {\n      if (this.cancelOptions.indexOf(method) < 0) {\n        return\n      }\n\n      this.onCancel.apply(null, arguments)\n      this.close()\n    },\n\n    /**\n     * Call the onCancel prop (function).\n     * Emit events, and destroy modal if it's programmatic.\n     */\n    close() {\n      this.$emit('close')\n      this.$emit('update:active', false)\n\n      // Timeout for the animation complete before destroying\n      if (this.programmatic) {\n        this.isActive = false\n        setTimeout(() => {\n          this.$destroy()\n          removeElement(this.$el)\n        }, 150)\n      }\n    },\n\n    /**\n     * Keypress event that is bound to the document.\n     */\n    keyPress(event) {\n      // Esc key\n      if (this.isActive && event.keyCode === 27) {\n        this.cancel('escape')\n      }\n    },\n  },\n  created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('keyup', this.keyPress)\n    }\n  },\n  beforeMount() {\n    // Insert the Modal component in body tag\n    // only if it's programmatic\n    this.programmatic && document.body.appendChild(this.$el)\n  },\n  mounted() {\n    if (this.programmatic) this.isActive = true\n    else if (this.isActive) this.handleScroll()\n  },\n  beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('keyup', this.keyPress)\n      // reset scroll\n      document.documentElement.classList.remove('is-clipped')\n      const savedScrollTop = !this.savedScrollTop\n        ? document.documentElement.scrollTop\n        : this.savedScrollTop\n      document.body.classList.remove('is-noscroll')\n      document.documentElement.scrollTop = savedScrollTop\n      document.body.style.top = null\n    }\n  },\n}\n</script>\n"]}]}