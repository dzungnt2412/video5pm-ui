{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/dialog/Dialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/dialog/Dialog.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PInput from '../input/Input'\nimport PIcon from '../icon/Icon'\nimport PModal from '../modal/Modal'\nimport config from '../../config'\nimport { removeElement } from '../../utils/dom'\n\nexport default {\n  name: 'BDialog',\n  components: {\n    PIcon,\n    PInput,\n  },\n  extends: PModal,\n  props: {\n    title: String,\n    message: String,\n    icon: String,\n    iconPack: String,\n    hasIcon: Boolean,\n    type: {\n      type: String,\n      default: 'primary',\n    },\n    confirmText: {\n      type: String,\n      default: () => {\n        return config.defaultDialogConfirmText\n          ? config.defaultDialogConfirmText\n          : 'OK'\n      },\n    },\n    cancelText: {\n      type: String,\n      default: () => {\n        return config.defaultDialogCancelText\n          ? config.defaultDialogCancelText\n          : 'Cancel'\n      },\n    },\n    hasInput: Boolean, // Used internally to know if it's prompt\n    inputAttrs: {\n      type: Object,\n      default: () => ({}),\n    },\n    onConfirm: {\n      type: Function,\n      default: () => {},\n    },\n    focusOn: {\n      type: String,\n      default: 'confirm',\n    },\n  },\n  data() {\n    const prompt = this.hasInput ? this.inputAttrs.value || '' : ''\n\n    return {\n      prompt,\n      isActive: false,\n      validationMessage: '',\n    }\n  },\n  computed: {\n    /**\n     * Icon name (WB) based on the type.\n     */\n    iconByType() {\n      switch (this.type) {\n        case 'info':\n          return 'info-circle'\n        case 'success':\n          return 'check-circle'\n        case 'warning':\n          return 'alert'\n        case 'danger':\n          return 'alert-circle'\n        default:\n          return null\n      }\n    },\n    showCancel() {\n      return this.cancelOptions.indexOf('button') >= 0\n    },\n  },\n  methods: {\n    /**\n     * If it's a prompt Dialog, validate the input.\n     * Call the onConfirm prop (function) and close the Dialog.\n     */\n    confirm() {\n      if (this.$refs.input !== undefined) {\n        if (!this.$refs.input.checkValidity()) {\n          this.validationMessage = this.$refs.input.validationMessage\n          this.$nextTick(() => this.$refs.input.select())\n          return\n        }\n      }\n\n      this.onConfirm(this.prompt)\n      this.close()\n    },\n\n    /**\n     * Close the Dialog.\n     */\n    close() {\n      this.isActive = false\n      // Timeout for the animation complete before destroying\n      setTimeout(() => {\n        this.$destroy()\n        removeElement(this.$el)\n      }, 150)\n    },\n  },\n  beforeMount() {\n    // Insert the Dialog component in body tag\n    this.$nextTick(() => {\n      document.body.appendChild(this.$el)\n    })\n  },\n  mounted() {\n    this.isActive = true\n\n    if (typeof this.inputAttrs.required === 'undefined') {\n      this.$set(this.inputAttrs, 'required', true)\n    }\n\n    this.$nextTick(() => {\n      // Handle which element receives focus\n      if (this.hasInput) {\n        this.$refs.input.focus()\n      } else if (this.focusOn === 'cancel' && this.showCancel) {\n        this.$refs.cancelButton.focus()\n      } else {\n        this.$refs.confirmButton.focus()\n      }\n    })\n  },\n}\n",{"version":3,"sources":["Dialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Dialog.vue","sourceRoot":"uikit/components/dialog","sourcesContent":["<template>\n  <transition :name=\"animation\">\n    <div v-if=\"isActive\" class=\"p-dialog p-modal is-active\">\n      <div class=\"p-modal-background\" @click=\"cancel('outside')\"></div>\n      <div class=\"p-modal-card p-animation-content\">\n        <div class=\"modal-content\">\n          <header class=\"modal-header\" v-if=\"title\">\n            <h4 class=\"modal-title\">{{ title }}</h4>\n          </header>\n          <section class=\"modal-body\">\n            <div class=\"media\">\n              <div class=\"mr-4\" v-if=\"hasIcon\">\n                <p-icon\n                  class=\"font-size-40\"\n                  :name=\"icon ? icon : iconByType\"\n                  :iconPack=\"iconPack\"\n                  :type=\"type\"\n                />\n              </div>\n              <div class=\"media-body\">\n                <p v-html=\"message\"></p>\n\n                <div v-if=\"hasInput\" class=\"form-group\">\n                  <p-input\n                    v-model=\"prompt\"\n                    ref=\"input\"\n                    :class=\"{ 'is-invalid': validationMessage }\"\n                    v-bind=\"inputAttrs\"\n                    @keyup.enter=\"confirm\"\n                  ></p-input>\n                  <p class=\"invalid-feedback\">{{ validationMessage }}</p>\n                </div>\n              </div>\n            </div>\n          </section>\n          <footer class=\"modal-footer\">\n            <button\n              v-if=\"showCancel\"\n              class=\"btn btn-default\"\n              ref=\"cancelButton\"\n              @click=\"cancel('button')\"\n            >\n              {{ cancelText }}\n            </button>\n            <button\n              class=\"btn\"\n              :class=\"`btn-${type}`\"\n              ref=\"confirmButton\"\n              @click=\"confirm\"\n            >\n              {{ confirmText }}\n            </button>\n          </footer>\n        </div>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script>\nimport PInput from '../input/Input'\nimport PIcon from '../icon/Icon'\nimport PModal from '../modal/Modal'\nimport config from '../../config'\nimport { removeElement } from '../../utils/dom'\n\nexport default {\n  name: 'BDialog',\n  components: {\n    PIcon,\n    PInput,\n  },\n  extends: PModal,\n  props: {\n    title: String,\n    message: String,\n    icon: String,\n    iconPack: String,\n    hasIcon: Boolean,\n    type: {\n      type: String,\n      default: 'primary',\n    },\n    confirmText: {\n      type: String,\n      default: () => {\n        return config.defaultDialogConfirmText\n          ? config.defaultDialogConfirmText\n          : 'OK'\n      },\n    },\n    cancelText: {\n      type: String,\n      default: () => {\n        return config.defaultDialogCancelText\n          ? config.defaultDialogCancelText\n          : 'Cancel'\n      },\n    },\n    hasInput: Boolean, // Used internally to know if it's prompt\n    inputAttrs: {\n      type: Object,\n      default: () => ({}),\n    },\n    onConfirm: {\n      type: Function,\n      default: () => {},\n    },\n    focusOn: {\n      type: String,\n      default: 'confirm',\n    },\n  },\n  data() {\n    const prompt = this.hasInput ? this.inputAttrs.value || '' : ''\n\n    return {\n      prompt,\n      isActive: false,\n      validationMessage: '',\n    }\n  },\n  computed: {\n    /**\n     * Icon name (WB) based on the type.\n     */\n    iconByType() {\n      switch (this.type) {\n        case 'info':\n          return 'info-circle'\n        case 'success':\n          return 'check-circle'\n        case 'warning':\n          return 'alert'\n        case 'danger':\n          return 'alert-circle'\n        default:\n          return null\n      }\n    },\n    showCancel() {\n      return this.cancelOptions.indexOf('button') >= 0\n    },\n  },\n  methods: {\n    /**\n     * If it's a prompt Dialog, validate the input.\n     * Call the onConfirm prop (function) and close the Dialog.\n     */\n    confirm() {\n      if (this.$refs.input !== undefined) {\n        if (!this.$refs.input.checkValidity()) {\n          this.validationMessage = this.$refs.input.validationMessage\n          this.$nextTick(() => this.$refs.input.select())\n          return\n        }\n      }\n\n      this.onConfirm(this.prompt)\n      this.close()\n    },\n\n    /**\n     * Close the Dialog.\n     */\n    close() {\n      this.isActive = false\n      // Timeout for the animation complete before destroying\n      setTimeout(() => {\n        this.$destroy()\n        removeElement(this.$el)\n      }, 150)\n    },\n  },\n  beforeMount() {\n    // Insert the Dialog component in body tag\n    this.$nextTick(() => {\n      document.body.appendChild(this.$el)\n    })\n  },\n  mounted() {\n    this.isActive = true\n\n    if (typeof this.inputAttrs.required === 'undefined') {\n      this.$set(this.inputAttrs, 'required', true)\n    }\n\n    this.$nextTick(() => {\n      // Handle which element receives focus\n      if (this.hasInput) {\n        this.$refs.input.focus()\n      } else if (this.focusOn === 'cancel' && this.showCancel) {\n        this.$refs.cancelButton.focus()\n      } else {\n        this.$refs.confirmButton.focus()\n      }\n    })\n  },\n}\n</script>\n"]}]}