{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/auth/views/VerifyEmail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/auth/views/VerifyEmail.vue","mtime":1605110441124},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions, mapState } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport Storage from '@core/helpers/storage'\n\nexport default {\n  name: 'VerifyEmail',\n  mixins: [mixinRoute],\n  filters: {},\n  computed: {\n    ...mapState('auth', {\n      currentUser: (state) => state.user,\n    }),\n    code() {\n      return this.$route.params.code\n    },\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      result: {},\n      counting: false,\n      count: '2m',\n    }\n  },\n\n  created() {\n    this.init()\n  },\n\n  methods: {\n    ...mapActions('auth', ['verifyEmail', 'resendEmail']),\n    async init() {\n      let now = new Date().getTime()\n      if (Storage.get('expried') < now || Storage.get('expried') == null) {\n        let expried = new Date().getTime() + 2 * 3000\n        Storage.set('expried', expried)\n        this.countDownTimer()\n      } else {\n        this.count = Storage.get('count')\n        this.counting = Storage.get('counting')\n        this.countDownTimer()\n      }\n      const url = new URL(window.location.href)\n      const code = url.searchParams.get('code')\n      const params = {\n        code: code,\n      }\n      if (code) {\n        const result = await this.verifyEmail(params)\n        if (result.success) {\n          if (result.permission) {\n            return this.$router.push('/')\n          }\n          return this.$toast.open({\n            type: 'error',\n            message: 'You are not allowed to do this action !',\n          })\n        } else {\n          this.$toast.open({ type: 'error', message: result.message })\n          return this.$router.push('/sign-in')\n        }\n      }\n    },\n    async handleResendEmail() {\n      console.log(Storage.get('userEmail'))\n      if (!Storage.get('userEmail')) {\n        return\n      }\n      this.isLoading = true\n\n      const params = {\n        email: Storage.get('userEmail'),\n      }\n      let response = await this.resendEmail(params)\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message:\n            'Successfully! Please check your email to activate the account.',\n        })\n        setTimeout(() => {\n          this.isLoading = false\n        }, 2000)\n        this.counting = true\n        let now = new Date().getTime()\n\n        if (Storage.get('expried') < now || Storage.get('expried') == null) {\n          let expried = new Date().getTime() + 2 * 3000\n          Storage.set('expried', expried)\n          this.countDownTimer()\n        } else {\n          this.countDownTimer()\n        }\n        return\n      }\n      this.$toast.open({ type: 'error', message: response.message })\n    },\n\n    countDownTimer() {\n      let countDownDate = Storage.get('expried')\n      let x = setInterval(\n        function() {\n          let now = new Date().getTime()\n\n          // Find the distance between now and the count down date\n          let distance = countDownDate - now\n\n          // Time calculations for minutes and seconds\n          let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))\n          let seconds = Math.floor((distance % (1000 * 60)) / 1000)\n\n          // Display the result in the element with id=\"demo\"\n          this.count = minutes + 'm ' + seconds + 's '\n\n          // If the count down is finished, write some text\n          if (distance < 0) {\n            this.counting = false\n            clearInterval(x)\n          }\n        }.bind(this),\n        1000\n      )\n      Storage.set('count', this.count)\n      Storage.set('counting', this.counting)\n    },\n  },\n\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n",{"version":3,"sources":["VerifyEmail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VerifyEmail.vue","sourceRoot":"src/packages/auth/views","sourcesContent":["<template>\n  <div class=\"page vertical-align verify-email \">\n    <h2>Thank you for using Lionnix</h2>\n    <p\n      >A verification mail has been sent to your email account. Please check\n      your inbox to verify.</p\n    >\n    <p>Still can't find the email?</p>\n    <p-button\n      class=\"btn btn-special btn-primary mt-20 mb-20\"\n      :loading=\"isLoading\"\n      :disabled=\"counting\"\n      @click=\"handleResendEmail\"\n    >\n      <span v-if=\"counting\">Resend Email again {{ count }} </span>\n      <span v-if=\"!counting\">Resend verification Email</span>\n    </p-button>\n    <p class=\"tip\">\n      Tip: If you have not received the email, please check your\n      <br />\n      <b>Spam</b> or <b>Trash folder</b>\n    </p>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapState } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport Storage from '@core/helpers/storage'\n\nexport default {\n  name: 'VerifyEmail',\n  mixins: [mixinRoute],\n  filters: {},\n  computed: {\n    ...mapState('auth', {\n      currentUser: (state) => state.user,\n    }),\n    code() {\n      return this.$route.params.code\n    },\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      result: {},\n      counting: false,\n      count: '2m',\n    }\n  },\n\n  created() {\n    this.init()\n  },\n\n  methods: {\n    ...mapActions('auth', ['verifyEmail', 'resendEmail']),\n    async init() {\n      let now = new Date().getTime()\n      if (Storage.get('expried') < now || Storage.get('expried') == null) {\n        let expried = new Date().getTime() + 2 * 3000\n        Storage.set('expried', expried)\n        this.countDownTimer()\n      } else {\n        this.count = Storage.get('count')\n        this.counting = Storage.get('counting')\n        this.countDownTimer()\n      }\n      const url = new URL(window.location.href)\n      const code = url.searchParams.get('code')\n      const params = {\n        code: code,\n      }\n      if (code) {\n        const result = await this.verifyEmail(params)\n        if (result.success) {\n          if (result.permission) {\n            return this.$router.push('/')\n          }\n          return this.$toast.open({\n            type: 'error',\n            message: 'You are not allowed to do this action !',\n          })\n        } else {\n          this.$toast.open({ type: 'error', message: result.message })\n          return this.$router.push('/sign-in')\n        }\n      }\n    },\n    async handleResendEmail() {\n      console.log(Storage.get('userEmail'))\n      if (!Storage.get('userEmail')) {\n        return\n      }\n      this.isLoading = true\n\n      const params = {\n        email: Storage.get('userEmail'),\n      }\n      let response = await this.resendEmail(params)\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message:\n            'Successfully! Please check your email to activate the account.',\n        })\n        setTimeout(() => {\n          this.isLoading = false\n        }, 2000)\n        this.counting = true\n        let now = new Date().getTime()\n\n        if (Storage.get('expried') < now || Storage.get('expried') == null) {\n          let expried = new Date().getTime() + 2 * 3000\n          Storage.set('expried', expried)\n          this.countDownTimer()\n        } else {\n          this.countDownTimer()\n        }\n        return\n      }\n      this.$toast.open({ type: 'error', message: response.message })\n    },\n\n    countDownTimer() {\n      let countDownDate = Storage.get('expried')\n      let x = setInterval(\n        function() {\n          let now = new Date().getTime()\n\n          // Find the distance between now and the count down date\n          let distance = countDownDate - now\n\n          // Time calculations for minutes and seconds\n          let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))\n          let seconds = Math.floor((distance % (1000 * 60)) / 1000)\n\n          // Display the result in the element with id=\"demo\"\n          this.count = minutes + 'm ' + seconds + 's '\n\n          // If the count down is finished, write some text\n          if (distance < 0) {\n            this.counting = false\n            clearInterval(x)\n          }\n        }.bind(this),\n        1000\n      )\n      Storage.set('count', this.count)\n      Storage.set('counting', this.counting)\n    },\n  },\n\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n</script>\n"]}]}