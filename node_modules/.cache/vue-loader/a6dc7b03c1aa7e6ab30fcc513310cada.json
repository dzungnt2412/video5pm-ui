{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/OrderMappingFails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/OrderMappingFails.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { VclTable } from 'vue-content-loading'\nimport { mapActions, mapState } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport mixinTable from '@core/mixins/table'\nimport EmptySearchResult from '@components/shared/EmptySearchResult'\nimport MOdalUpdateAndRetryMapping from './components/ModalUpdateAndRetryMapping'\nexport default {\n  name: 'ProductMappingList',\n  mixins: [mixinRoute, mixinTable],\n  components: {\n    VclTable,\n    EmptySearchResult,\n    MOdalUpdateAndRetryMapping,\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      orderMappingsFails: (state) => state.orderMappingFails,\n      count: (state) => state.orderMappingFailsCount,\n      products: (state) => state.productTypes,\n    }),\n    items() {\n      return this.orderMappingsFails\n    },\n  },\n  data() {\n    return {\n      isFetching: false,\n      isVisibleRetryMapping: false,\n      selectedOrderId: 0,\n      actions: {\n        retry: {\n          title: 'Retry',\n          isNeedConfirm: true,\n        },\n      },\n    }\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      fetchOrderMappingFails: 'fetchOrderMappingFails',\n      fetchProductTypes: 'fetchProductTypes',\n      retryOrderMappingFails: 'retryOrderMappingFails',\n    }),\n\n    async init() {\n      this.isFetching = true\n      this.handleUpdateRouteQuery()\n      await Promise.all([\n        this.fetchOrderMappingFails(this.filter),\n        this.fetchProductTypes(),\n      ])\n      this.isFetching = false\n    },\n    updateAndRetryItem(item) {\n      this.selectedOrderId = item.id\n      this.isVisibleRetryMapping = true\n    },\n    async retryAllItems() {\n      const responseRetry = await this.retryOrderMappingFails({\n        ids: this.orderMappingsFails.map((order) => order.id),\n      })\n      if (!responseRetry || !responseRetry.success) {\n        this.$toast.open({ type: 'error', message: responseRetry.message })\n        this.isSaving = false\n        return\n      }\n      await this.init()\n      this.$set(this.action, 'selected', [])\n      this.$toast.open({\n        type: 'success',\n        message: 'Retry successfully',\n      })\n    },\n    async handleActionItem() {\n      if (this.action.current === 'retry') {\n        await this.retryAllItems()\n        return\n      }\n    },\n  },\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n",{"version":3,"sources":["OrderMappingFails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"OrderMappingFails.vue","sourceRoot":"src/packages/order-mapping/views","sourcesContent":["<template>\n  <div class=\"order-list-page page\">\n    <div class=\"page-header\">\n      <h1 class=\"page-title\">Order Mapping Fails</h1>\n    </div>\n    <div class=\"page-content container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-xl-12\">\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <VclTable class=\"my-20\" v-if=\"isFetching\"> </VclTable>\n              <template v-else-if=\"orderMappingsFails.length\">\n                <div class=\"table-responsive\">\n                  <table class=\"table table-hover\">\n                    <thead>\n                      <tr>\n                        <th\n                          width=\"40\"\n                          class=\"order-select\"\n                          :colspan=\"totalSelected > 0 ? 4 : 1\"\n                        >\n                          <p-checkbox\n                            class=\"order-select-checkbox\"\n                            :style=\"totalSelected > 0 && { width: 0 }\"\n                            :value=\"isAllChecked\"\n                            @change.native=\"toggleSelectAll\"\n                            :indeterminate=\"isIndeterminate\"\n                          >\n                          </p-checkbox>\n                          <div\n                            class=\"bulk-actions d-flex align-items-center\"\n                            v-if=\"totalSelected > 0\"\n                          >\n                            <div class=\"bulk-actions__main-bar\">\n                              <span class=\"bulk-actions__selection-count\">\n                                {{ selectionCountText }}\n                              </span>\n                              <p-button\n                                class=\"bulk-actions__actions\"\n                                type=\"primary\"\n                                @click=\"handleAction('retry')\"\n                              >\n                                Retry\n                              </p-button>\n                            </div>\n                            <span class=\"bulk-select-all\" v-if=\"isAllChecked\">\n                              Tất cả các đơn trên trang này được chọn.\n                            </span>\n                          </div>\n                        </th>\n                        <template v-if=\"totalSelected === 0\">\n                          <th>Order</th>\n                          <th>Reason</th>\n                          <th class=\"text-right\">\n                            <span class=\"mr-10\">Action</span>\n                          </th>\n                        </template>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr v-for=\"(item, i) in orderMappingsFails\" :key=\"i\">\n                        <td width=\"30\" class=\"ml-0 text-center\">\n                          <p-checkbox\n                            v-model=\"action.selected\"\n                            :native-value=\"item\"\n                          >\n                          </p-checkbox>\n                        </td>\n                        <td>{{ item.order_number }}</td>\n                        <td>\n                          {{ item.reason }}\n                        </td>\n                        <td class=\"text-right\">\n                          <div class=\"d-flex justify-content-end\">\n                            <p-button\n                              class=\"ml-15\"\n                              type=\"default\"\n                              size=\"sm\"\n                              icon=\"refresh\"\n                              iconPack=\"md\"\n                              @click=\"updateAndRetryItem(item)\"\n                              >Update and Retry</p-button\n                            >\n                          </div>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div class=\"d-flex justify-content-between align-items-center\">\n                  <span>\n                    {{ paginationLabel }}\n                  </span>\n                  <p-pagination\n                    :total=\"count\"\n                    :perPage=\"filter.limit\"\n                    :current.sync=\"filter.page\"\n                    size=\"sm\"\n                  >\n                  </p-pagination>\n                </div>\n              </template>\n              <EmptySearchResult\n                v-else\n                title=\"No order mapping failed\"\n              ></EmptySearchResult>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <MOdalUpdateAndRetryMapping\n      v-if=\"isVisibleRetryMapping\"\n      :visible.sync=\"isVisibleRetryMapping\"\n      :orderId=\"selectedOrderId\"\n      @save=\"init\"\n    />\n  </div>\n</template>\n\n<script>\nimport { VclTable } from 'vue-content-loading'\nimport { mapActions, mapState } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport mixinTable from '@core/mixins/table'\nimport EmptySearchResult from '@components/shared/EmptySearchResult'\nimport MOdalUpdateAndRetryMapping from './components/ModalUpdateAndRetryMapping'\nexport default {\n  name: 'ProductMappingList',\n  mixins: [mixinRoute, mixinTable],\n  components: {\n    VclTable,\n    EmptySearchResult,\n    MOdalUpdateAndRetryMapping,\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      orderMappingsFails: (state) => state.orderMappingFails,\n      count: (state) => state.orderMappingFailsCount,\n      products: (state) => state.productTypes,\n    }),\n    items() {\n      return this.orderMappingsFails\n    },\n  },\n  data() {\n    return {\n      isFetching: false,\n      isVisibleRetryMapping: false,\n      selectedOrderId: 0,\n      actions: {\n        retry: {\n          title: 'Retry',\n          isNeedConfirm: true,\n        },\n      },\n    }\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      fetchOrderMappingFails: 'fetchOrderMappingFails',\n      fetchProductTypes: 'fetchProductTypes',\n      retryOrderMappingFails: 'retryOrderMappingFails',\n    }),\n\n    async init() {\n      this.isFetching = true\n      this.handleUpdateRouteQuery()\n      await Promise.all([\n        this.fetchOrderMappingFails(this.filter),\n        this.fetchProductTypes(),\n      ])\n      this.isFetching = false\n    },\n    updateAndRetryItem(item) {\n      this.selectedOrderId = item.id\n      this.isVisibleRetryMapping = true\n    },\n    async retryAllItems() {\n      const responseRetry = await this.retryOrderMappingFails({\n        ids: this.orderMappingsFails.map((order) => order.id),\n      })\n      if (!responseRetry || !responseRetry.success) {\n        this.$toast.open({ type: 'error', message: responseRetry.message })\n        this.isSaving = false\n        return\n      }\n      await this.init()\n      this.$set(this.action, 'selected', [])\n      this.$toast.open({\n        type: 'success',\n        message: 'Retry successfully',\n      })\n    },\n    async handleActionItem() {\n      if (this.action.current === 'retry') {\n        await this.retryAllItems()\n        return\n      }\n    },\n  },\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n</script>\n"]}]}