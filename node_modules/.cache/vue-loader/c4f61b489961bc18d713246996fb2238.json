{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/OrderMappingFails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/OrderMappingFails.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { VclTable } from 'vue-content-loading'\nimport { mapActions, mapState } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport mixinTable from '@core/mixins/table'\nimport EmptySearchResult from '@components/shared/EmptySearchResult'\nimport MOdalUpdateAndRetryMapping from './components/ModalUpdateAndRetryMapping'\nexport default {\n  name: 'ProductMappingList',\n  mixins: [mixinRoute, mixinTable],\n  components: {\n    VclTable,\n    EmptySearchResult,\n    MOdalUpdateAndRetryMapping,\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      orderMappingsFails: (state) => state.orderMappingFails,\n      count: (state) => state.orderMappingFailsCount,\n      products: (state) => state.productTypes,\n    }),\n    items() {\n      return this.orderMappingsFails\n    },\n  },\n  data() {\n    return {\n      isFetching: false,\n      isVisibleRetryMapping: false,\n      selectedOrderId: 0,\n      actions: {\n        retry: {\n          title: 'Retry',\n          isNeedConfirm: true,\n        },\n      },\n    }\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      fetchOrderMappingFails: 'fetchOrderMappingFails',\n      fetchProductTypes: 'fetchProductTypes',\n      retryOrderMappingFails: 'retryOrderMappingFails',\n    }),\n\n    async init() {\n      this.isFetching = true\n      this.handleUpdateRouteQuery()\n      await Promise.all([\n        this.fetchOrderMappingFails(this.filter),\n        this.fetchProductTypes(),\n      ])\n      this.isFetching = false\n    },\n    updateAndRetryItem(item) {\n      this.selectedOrderId = item.id\n      this.isVisibleRetryMapping = true\n    },\n    async retryAllItems() {\n      const responseRetry = await this.retryOrderMappingFails({\n        ids: this.orderMappingsFails.map((order) => order.id),\n      })\n      if (!responseRetry || !responseRetry.success) {\n        this.$toast.open({ type: 'error', message: responseRetry.message })\n        this.isSaving = false\n        return\n      }\n      await this.init()\n      this.$set(this.action, 'selected', [])\n      this.$toast.open({\n        type: 'success',\n        message: 'Retry successfully',\n      })\n    },\n    async handleActionItem() {\n      if (this.action.current === 'retry') {\n        await this.retryAllItems()\n        return\n      }\n    },\n  },\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n",null]}