{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/dropdown/Dropdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/dropdown/Dropdown.vue","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'PDropdown',\n  props: {\n    value: {\n      type: [String, Number, Boolean, Object, Array, Symbol, Function],\n      default: null,\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    hoverable: {\n      type: Boolean,\n      default: false,\n    },\n    inline: {\n      type: Boolean,\n      default: false,\n    },\n    position: {\n      type: String,\n      validator(value) {\n        return ['top-right', 'top-left', 'bottom-left'].indexOf(value) > -1\n      },\n    },\n    mobileModal: {\n      type: Boolean,\n      default: true,\n    },\n    ariaRole: {\n      type: String,\n      default: '',\n    },\n    animation: {\n      type: String,\n      default: 'fade',\n    },\n    multiple: Boolean,\n    closeOnClick: {\n      type: Boolean,\n      default: true,\n    },\n    dropdownClass: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      selected: this.value,\n      isActive: false,\n      isHoverable: this.hoverable,\n      isDropdown: true, // Used internally by DropdownItem\n    }\n  },\n  computed: {\n    wrapperClasses() {\n      return [\n        'p-dropdown',\n        this.position ? `is-${this.position}` : '',\n        {\n          'is-disabled': this.disabled,\n          'is-hoverable': this.hoverable,\n          'is-inline': this.inline,\n          'is-active': this.isActive || this.inline,\n          'is-mobile-modal': this.isMobileModal,\n        },\n      ]\n    },\n    isMobileModal() {\n      return this.mobileModal && !this.inline && !this.hoverable\n    },\n    ariaRoleMenu() {\n      return this.ariaRole === 'menu' || this.ariaRole === 'list'\n        ? this.ariaRole\n        : null\n    },\n  },\n  watch: {\n    /**\n     * When v-model is changed set the _new selected item.\n     */\n    value(value) {\n      this.selected = value\n    },\n\n    /**\n     * Emit event when isActive value is changed.\n     */\n    isActive(value) {\n      this.$emit('active-change', value)\n    },\n  },\n  methods: {\n    /**\n     * Click listener from DropdownItem.\n     *   1. Set _new selected item.\n     *   2. Emit input event to update the user v-model.\n     *   3. Close the dropdown.\n     */\n    selectItem(value) {\n      if (this.multiple) {\n        if (this.selected) {\n          const index = this.selected.indexOf(value)\n          if (index === -1) {\n            this.selected.push(value)\n          } else {\n            this.selected.splice(index, 1)\n          }\n        } else {\n          this.selected = [value]\n        }\n        this.$emit('change', this.selected)\n      } else {\n        if (this.selected !== value) {\n          this.selected = value\n          this.$emit('change', this.selected)\n        }\n      }\n\n      this.$emit('input', this.selected)\n\n      if (!this.multiple) {\n        this.isActive = !this.closeOnClick\n      }\n    },\n\n    /**\n     * White-listed items to not close when clicked.\n     */\n    isInWhiteList(el) {\n      if (el === this.$refs.dropdownMenu) {\n        return true\n      }\n\n      if (el === this.$refs.trigger) {\n        return true\n      }\n\n      // All chidren from dropdown\n      if (this.$refs.dropdownMenu !== undefined) {\n        const children = this.$refs.dropdownMenu.querySelectorAll('*')\n        for (const child of children) {\n          if (el === child) {\n            return true\n          }\n        }\n      }\n\n      // All children from trigger\n      if (this.$refs.trigger !== undefined) {\n        const children = this.$refs.trigger.querySelectorAll('*')\n        for (const child of children) {\n          if (el === child) {\n            return true\n          }\n        }\n      }\n\n      return false\n    },\n\n    /**\n     * Close dropdown if clicked outside.\n     */\n    clickedOutside(event) {\n      if (this.inline) {\n        return\n      }\n\n      if (!this.isInWhiteList(event.target)) {\n        this.isActive = false\n      }\n    },\n\n    /**\n     * Toggle dropdown if it's not disabled.\n     */\n    toggle() {\n      if (this.disabled) {\n        return\n      }\n\n      if (!this.isActive) {\n        // if not active, toggle after clickOutside event\n        // this fixes toggling programmatic\n        this.$nextTick(() => {\n          const value = !this.isActive\n          this.isActive = value\n          this.$emit('on-open', this.isActive)\n          // Vue 2.6.x ???\n          setTimeout(() => (this.isActive = value))\n        })\n      } else {\n        this.isActive = !this.isActive\n        this.$emit('on-open', this.isActive)\n      }\n    },\n  },\n  created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('click', this.clickedOutside)\n    }\n  },\n  beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('click', this.clickedOutside)\n    }\n  },\n}\n",null]}