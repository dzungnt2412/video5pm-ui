{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/OptionMappingForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/OptionMappingForm.vue","mtime":1603898990380},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions, mapState } from 'vuex'\nimport { cloneDeep, isObjectDiff } from '@core/utils'\nimport { types } from '../constant'\nexport default {\n  name: 'OptionMappingForm',\n  data() {\n    return {\n      mode: 'new',\n      form: {\n        product_type_id: null,\n        /**\n         * [{\n            option_set: {\n              condition: '',\n              target_value: null,\n            },\n            option: {\n              conditions: '',\n              values: [],\n              target_values: [],\n            },\n          }],\n         */\n        rules: [],\n      },\n      initialForm: {},\n      isShowUnsavedBar: false,\n      isFetching: false,\n      isSaving: false,\n      isDeleting: false,\n    }\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      optionMappingState: (state) => state.orderMapping,\n      products: (state) => state.productTypes,\n      options: (state) => state.options,\n      optionSets: (state) => state.optionSets,\n    }),\n    pageTitle() {\n      return this.mode === 'new'\n        ? 'Create option mapping rule'\n        : 'Update option mapping rule'\n    },\n    getOptionsWithOptionSetId() {\n      return (id) => {\n        return this.options.filter((option) => option.option_set_id === id)\n      }\n    },\n    getOptionValueByIndex() {\n      return (ruleIndex, index) => {\n        const rule = this.form.rules[ruleIndex]\n        if (!rule) {\n          return null\n        }\n        const value = rule.option.values[index]\n        if (!value) {\n          return null\n        }\n        return value\n      }\n    },\n    getOptionTargetValueByIndex() {\n      return (ruleIndex, index) => {\n        const rule = this.form.rules[ruleIndex]\n        if (!rule) {\n          return null\n        }\n        const targetValue = rule.option.target_values[index]\n        if (!targetValue) {\n          return null\n        }\n        return targetValue\n      }\n    },\n  },\n  watch: {\n    form: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.initialForm)\n      },\n      deep: true,\n    },\n    initialForm: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.form)\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      createOrUpdateOrderMapping: 'createOrUpdateOrderMapping',\n      fetchOrderMapping: 'fetchOrderMapping',\n      deleteOrderMapping: 'deleteOrderMapping',\n      fetchProductTypes: 'fetchProductTypes',\n      fetchOptionsByProductId: 'fetchOptionsByProductId',\n    }),\n    addNewOption() {\n      const rules = this.form.rules\n      rules.push({\n        option_set: {\n          condition: '',\n          target_value: null,\n        },\n        option: {\n          conditions: '',\n          values: [],\n          target_values: [],\n        },\n      })\n    },\n    deleteOption(index) {\n      this.form.rules.splice(index, 1)\n    },\n    onOptionSetTargetValueChange(rule, val) {\n      rule.option_set.target_value = val\n      const options = this.getOptionsWithOptionSetId(val)\n      rule.option.target_values = options.map((option) => option.id)\n    },\n    onRuleOptionConditionsChange(rule, val) {\n      rule.option.conditions = val\n\n      const newConditionsArr = val\n        .split(',')\n        .filter((condition) => condition.trim() !== '')\n\n      rule.option.values.forEach((value, index) => {\n        if (newConditionsArr[index]) {\n          rule.option.values[index] = newConditionsArr[index]\n        }\n      })\n      if (newConditionsArr.length > rule.option.values.length) {\n        newConditionsArr\n          .slice(rule.option.values.length)\n          .forEach((condition) => {\n            rule.option.values.push(condition)\n          })\n      } else if (newConditionsArr.length < rule.option.values.length) {\n        rule.option.values = rule.option.values.slice(\n          0,\n          newConditionsArr.length\n        )\n      }\n    },\n    setOptionValueByIndex(ruleIndex, index, value) {\n      const rule = this.form.rules[ruleIndex]\n      this.$set(rule.option.values, index, value)\n    },\n    setOptionTargetValueByIndex(ruleIndex, index, value) {\n      const rule = this.form.rules[ruleIndex]\n      this.$set(rule.option.target_values, index, value)\n    },\n    async onProductTypeChange(id) {\n      const result = await this.fetchOptionsByProductId(id)\n      if (!result.success) {\n        this.$toast.open({\n          type: 'error',\n          message:\n            result.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async fetch() {\n      this.isFetching = true\n      const promises = [this.fetchProductTypes()]\n      if (this.$route.params.id && this.$route.params.id !== 'new') {\n        this.mode = 'edit'\n        promises.push(\n          this.fetchOrderMapping({\n            type: types.option,\n            id: +this.$route.params.id,\n          })\n        )\n      }\n      const [, res2] = await Promise.all(promises)\n      if (res2 && res2.success) {\n        await this.transformStateToLocalForm(this.optionMappingState)\n      }\n      this.initialForm = cloneDeep(this.form)\n      this.isFetching = false\n    },\n    async transformStateToLocalForm(data) {\n      this.form.product_type_id = data.product_type_id\n      const result = await this.fetchOptionsByProductId(data.product_type_id)\n      if (!result.success) {\n        this.$toast.open({\n          type: 'error',\n          message:\n            result.message || 'Something went wrong. Please try again later',\n        })\n        return\n      }\n\n      // find all option_set rules\n      const optionSetRules = data.rules.filter(\n        (rule) => rule.column === 'option_set'\n      )\n      this.form.rules = optionSetRules.map((optionSetRule) => {\n        const formRule = {\n          option_set: {\n            condition: optionSetRule.condition,\n            target_value: optionSetRule.target_value\n              ? parseInt(optionSetRule.target_value)\n              : null,\n          },\n          option: {\n            conditions: '',\n            values: [],\n            target_values: [],\n          },\n        }\n\n        if (optionSetRule.target_value) {\n          //now find all option rules attach to this option set rules\n          const optionIds = this.getOptionsWithOptionSetId(\n            parseInt(optionSetRule.target_value)\n          ).map((option) => option.id)\n\n          const optionRules = data.rules.filter(\n            (rule) =>\n              rule.column === 'option' &&\n              rule.target_value &&\n              optionIds.indexOf(parseInt(rule.target_value)) > -1\n          )\n\n          formRule.option.values = optionRules.map(\n            (optionRule) => optionRule.condition\n          )\n          formRule.option.target_values = optionRules.map((optionRule) =>\n            optionRule.target_value ? parseInt(optionRule.target_value) : null\n          )\n          formRule.option.conditions = formRule.option.values.join(',')\n        }\n\n        return formRule\n      })\n    },\n    tranformLocalFormToPayload() {\n      const payload = {\n        product_type_id: this.form.product_type_id,\n        rules: [],\n        type: types.option,\n        disjunctive: false,\n      }\n      if (this.mode !== 'new') {\n        payload.id = this.optionMappingState.id\n      }\n      this.form.rules.map((rule) => {\n        // option set\n        payload.rules.push({\n          column: 'option_set',\n          relation: 'equal',\n          condition: rule.option_set.condition,\n          target_value: String(rule.option_set.target_value),\n        })\n        // option\n        rule.option.values.map((value, index) => {\n          payload.rules.push({\n            column: 'option',\n            relation: 'equal',\n            condition: value,\n            target_value: String(rule.option.target_values[index]),\n          })\n        })\n      })\n\n      return payload\n    },\n    discard() {\n      this.form = cloneDeep(this.initialForm)\n    },\n    showConfirmDelete() {\n      this.$dialog.confirm({\n        title: `Delete option mapping?`,\n        message: `Are you sure you want to delete this option mapping?`,\n        confirmText: 'Delete',\n        onConfirm: () => this.delete(),\n        type: 'danger',\n      })\n    },\n    async save() {\n      const isValid = await this.$validator.validateAll()\n      if (!isValid) return\n      this.isSaving = true\n      if (this.mode === 'new') {\n        await this.create()\n      } else {\n        await this.update()\n      }\n      this.isSaving = false\n    },\n    async create() {\n      const payload = this.tranformLocalFormToPayload()\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.option,\n        payload,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your option mapping was created',\n        })\n        this.$router.push({\n          name: 'option-mapping-update',\n          params: {\n            id: response.id,\n          },\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async update() {\n      const payload = this.tranformLocalFormToPayload()\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.option,\n        payload,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your option mapping was updated',\n        })\n        await this.fetch()\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async delete() {\n      this.isDeleting = true\n      const response = await this.deleteOrderMapping({\n        type: types.option,\n        id: this.optionMappingState.id,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your option mapping was deleted',\n        })\n        this.$router.push({\n          name: 'option-mapping-list',\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n      this.isDeleting = false\n    },\n  },\n  created() {\n    this.fetch()\n  },\n}\n",{"version":3,"sources":["OptionMappingForm.vue"],"names":[],"mappingsfile":"OptionMappingForm.vue","sourceRoot":"src/packages/order-mapping/views","sourcesContent":["<template>\n  <PageDetailLoading v-if=\"isFetching\"></PageDetailLoading>\n  <div class=\"page\" v-else>\n    <UnsavedBar\n      :show=\"isShowUnsavedBar\"\n      :showDiscard=\"true\"\n      :loading=\"isSaving\"\n      @save=\"save\"\n      @discard=\"discard\"\n      title=\"Save\"\n    ></UnsavedBar>\n    <div class=\"page-header\">\n      <p-button icon=\"chevron-left\" class=\"btn-pure pl-0 mb-15\">\n        <router-link :to=\"{ name: 'option-mapping-list' }\">\n          Option mapping rules\n        </router-link>\n      </p-button>\n      <h1 class=\"page-title\">{{ pageTitle }}</h1>\n    </div>\n    <div class=\"page-content container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"card\">\n            <div class=\"card-block\">\n              <div class=\"row\">\n                <div class=\"col-12\">\n                  <div class=\"d-flex\">\n                    <h5 class=\"white-space-nowrap mr-15\">Lionnix Product</h5>\n                    <div class=\"form-group mb-0\">\n                      <p-select\n                        :class=\"[\n                          { 'is-invalid': errors.has('product_type_id') },\n                        ]\"\n                        v-model=\"form.product_type_id\"\n                        @input=\"onProductTypeChange\"\n                        placeholder=\"Select product\"\n                        v-validate=\"'required'\"\n                        name=\"product_type_id\"\n                      >\n                        <option\n                          v-for=\"product in products\"\n                          :value=\"product.id\"\n                          :key=\"product.id\"\n                        >\n                          {{ product.name }}\n                        </option>\n                      </p-select>\n                      <div\n                        class=\"invalid-feedback\"\n                        v-if=\"errors.has('product_type_id')\"\n                      >\n                        Product type is required\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-6\">\n                  <h4>Lionnix</h4>\n                </div>\n                <div class=\"col-6\">\n                  <h4>Shop</h4>\n                </div>\n              </div>\n              <div\n                class=\"row mb-15\"\n                v-for=\"(rule, ruleIndex) in form.rules\"\n                :key=\"ruleIndex\"\n              >\n                <!-- map option -->\n                <div class=\"col-6\">\n                  <div class=\"form-group flex-fill\">\n                    <label>Option</label>\n                    <p-select\n                      :class=\"[\n                        {\n                          'is-invalid': errors.has(\n                            `option_set_target-${ruleIndex}`\n                          ),\n                        },\n                      ]\"\n                      :value=\"rule.option_set.target_value\"\n                      @input=\"\n                        (value) => onOptionSetTargetValueChange(rule, value)\n                      \"\n                      placeholder=\"Select option set\"\n                      v-validate=\"'required'\"\n                      :name=\"`option_set_target-${ruleIndex}`\"\n                    >\n                      <option\n                        v-for=\"(optionSet, index) in optionSets\"\n                        :value=\"optionSet.id\"\n                        :key=\"index\"\n                      >\n                        {{ optionSet.name }}\n                      </option>\n                    </p-select>\n                    <div\n                      class=\"invalid-feedback\"\n                      v-if=\"errors.has(`option_set_target-${ruleIndex}`)\"\n                    >\n                      Please choose Lionnix option\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-6\">\n                  <div class=\"d-flex ml--10 mt--10\">\n                    <div class=\"form-group flex-fill pl-10 pt-10\">\n                      <label>Option values</label>\n                      <input\n                        placeholder=\"Option values, separated by commas\"\n                        :class=\"[\n                          {\n                            'is-invalid': errors.has(\n                              `option_conditions-${ruleIndex}`\n                            ),\n                          },\n                        ]\"\n                        type=\"text\"\n                        @input=\"\n                          (event) =>\n                            onRuleOptionConditionsChange(\n                              rule,\n                              event.target.value\n                            )\n                        \"\n                        :value=\"rule.option.conditions\"\n                        class=\"flex-fill form-control\"\n                        v-validate=\"'required'\"\n                        :name=\"`option_conditions-${ruleIndex}`\"\n                      />\n                      <div\n                        class=\"invalid-feedback\"\n                        v-if=\"errors.has(`option_conditions-${ruleIndex}`)\"\n                      >\n                        Please enter option values, separated by commas\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <!-- end map option -->\n\n                <!-- map option values -->\n                <div class=\"col-6\">\n                  <div\n                    class=\"form-group mb-2\"\n                    v-if=\"\n                      getOptionsWithOptionSetId(rule.option_set.target_value)\n                        .length > 0\n                    \"\n                  >\n                    <label>\n                      Values\n                    </label>\n                    <div\n                      class=\"mb-10\"\n                      v-for=\"(option, index) in getOptionsWithOptionSetId(\n                        rule.option_set.target_value\n                      )\"\n                      :key=\"index\"\n                    >\n                      <p-select\n                        :class=\"[\n                          {\n                            'is-invalid': errors.has(\n                              `option_target-${ruleIndex}-${index}`\n                            ),\n                          },\n                        ]\"\n                        @input=\"\n                          (val) =>\n                            setOptionTargetValueByIndex(ruleIndex, index, val)\n                        \"\n                        :value=\"getOptionTargetValueByIndex(ruleIndex, index)\"\n                        placeholder=\"Select option value\"\n                        v-validate=\"'required'\"\n                        :name=\"`option_target-${ruleIndex}-${index}`\"\n                      >\n                        <option\n                          v-for=\"(option, index) in getOptionsWithOptionSetId(\n                            rule.option_set.target_value\n                          )\"\n                          :key=\"index\"\n                          :value=\"option.id\"\n                        >\n                          {{ option.value }}\n                        </option>\n                      </p-select>\n                      <div\n                        class=\"invalid-feedback\"\n                        v-if=\"errors.has(`option_target-${ruleIndex}-${index}`)\"\n                      >\n                        Please choose a option value\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-6\">\n                  <div\n                    class=\"form-group mb-0\"\n                    v-if=\"rule.option.values.length > 0\"\n                  >\n                    <label>\n                      Values\n                    </label>\n                    <div\n                      class=\"mb-10\"\n                      v-for=\"(value, index) in rule.option.values\"\n                      :key=\"index\"\n                    >\n                      <p-select\n                        :class=\"[\n                          {\n                            'is-invalid': errors.has(\n                              `option_value-${ruleIndex}-${index}`\n                            ),\n                          },\n                        ]\"\n                        @input=\"\n                          (val) => setOptionValueByIndex(ruleIndex, index, val)\n                        \"\n                        :value=\"getOptionValueByIndex(ruleIndex, index)\"\n                        placeholder=\"Select option value\"\n                        v-validate=\"'required'\"\n                        :name=\"`option_value-${ruleIndex}-${index}`\"\n                      >\n                        <option\n                          v-for=\"(v, index) in rule.option.values\"\n                          :key=\"index\"\n                          :value=\"v\"\n                        >\n                          {{ v }}\n                        </option>\n                      </p-select>\n                      <div\n                        class=\"invalid-feedback\"\n                        v-if=\"errors.has(`option_value-${ruleIndex}-${index}`)\"\n                      >\n                        Please choose a option value\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <!-- end map option values -->\n                <div class=\"col-12\">\n                  <div class=\"d-flex justify-content-end\">\n                    <a\n                      href=\"#\"\n                      class=\"btn-delete-option\"\n                      @click=\"deleteOption(ruleIndex)\"\n                    >\n                      Delete option\n                    </a>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-12\" @click=\"addNewOption\">\n                  <p-button type=\"default\">Add new option</p-button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"d-flex justify-content-between\">\n            <p-button\n              type=\"danger\"\n              @click=\"showConfirmDelete\"\n              @disabled=\"isDeleting\"\n              :loading=\"isDeleting\"\n              v-if=\"optionMappingState.id\"\n            >\n              Delete\n            </p-button>\n            <div v-else></div>\n            <div class=\"d-flex\">\n              <p-button type=\"default\" @click=\"discard\">\n                Cancel\n              </p-button>\n              <p-button\n                class=\"ml-15\"\n                @click=\"save\"\n                :disabled=\"isSaving\"\n                :loading=\"isSaving\"\n              >\n                Save\n              </p-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapState } from 'vuex'\nimport { cloneDeep, isObjectDiff } from '@core/utils'\nimport { types } from '../constant'\nexport default {\n  name: 'OptionMappingForm',\n  data() {\n    return {\n      mode: 'new',\n      form: {\n        product_type_id: null,\n        /**\n         * [{\n            option_set: {\n              condition: '',\n              target_value: null,\n            },\n            option: {\n              conditions: '',\n              values: [],\n              target_values: [],\n            },\n          }],\n         */\n        rules: [],\n      },\n      initialForm: {},\n      isShowUnsavedBar: false,\n      isFetching: false,\n      isSaving: false,\n      isDeleting: false,\n    }\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      optionMappingState: (state) => state.orderMapping,\n      products: (state) => state.productTypes,\n      options: (state) => state.options,\n      optionSets: (state) => state.optionSets,\n    }),\n    pageTitle() {\n      return this.mode === 'new'\n        ? 'Create option mapping rule'\n        : 'Update option mapping rule'\n    },\n    getOptionsWithOptionSetId() {\n      return (id) => {\n        return this.options.filter((option) => option.option_set_id === id)\n      }\n    },\n    getOptionValueByIndex() {\n      return (ruleIndex, index) => {\n        const rule = this.form.rules[ruleIndex]\n        if (!rule) {\n          return null\n        }\n        const value = rule.option.values[index]\n        if (!value) {\n          return null\n        }\n        return value\n      }\n    },\n    getOptionTargetValueByIndex() {\n      return (ruleIndex, index) => {\n        const rule = this.form.rules[ruleIndex]\n        if (!rule) {\n          return null\n        }\n        const targetValue = rule.option.target_values[index]\n        if (!targetValue) {\n          return null\n        }\n        return targetValue\n      }\n    },\n  },\n  watch: {\n    form: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.initialForm)\n      },\n      deep: true,\n    },\n    initialForm: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.form)\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      createOrUpdateOrderMapping: 'createOrUpdateOrderMapping',\n      fetchOrderMapping: 'fetchOrderMapping',\n      deleteOrderMapping: 'deleteOrderMapping',\n      fetchProductTypes: 'fetchProductTypes',\n      fetchOptionsByProductId: 'fetchOptionsByProductId',\n    }),\n    addNewOption() {\n      const rules = this.form.rules\n      rules.push({\n        option_set: {\n          condition: '',\n          target_value: null,\n        },\n        option: {\n          conditions: '',\n          values: [],\n          target_values: [],\n        },\n      })\n    },\n    deleteOption(index) {\n      this.form.rules.splice(index, 1)\n    },\n    onOptionSetTargetValueChange(rule, val) {\n      rule.option_set.target_value = val\n      const options = this.getOptionsWithOptionSetId(val)\n      rule.option.target_values = options.map((option) => option.id)\n    },\n    onRuleOptionConditionsChange(rule, val) {\n      rule.option.conditions = val\n\n      const newConditionsArr = val\n        .split(',')\n        .filter((condition) => condition.trim() !== '')\n\n      rule.option.values.forEach((value, index) => {\n        if (newConditionsArr[index]) {\n          rule.option.values[index] = newConditionsArr[index]\n        }\n      })\n      if (newConditionsArr.length > rule.option.values.length) {\n        newConditionsArr\n          .slice(rule.option.values.length)\n          .forEach((condition) => {\n            rule.option.values.push(condition)\n          })\n      } else if (newConditionsArr.length < rule.option.values.length) {\n        rule.option.values = rule.option.values.slice(\n          0,\n          newConditionsArr.length\n        )\n      }\n    },\n    setOptionValueByIndex(ruleIndex, index, value) {\n      const rule = this.form.rules[ruleIndex]\n      this.$set(rule.option.values, index, value)\n    },\n    setOptionTargetValueByIndex(ruleIndex, index, value) {\n      const rule = this.form.rules[ruleIndex]\n      this.$set(rule.option.target_values, index, value)\n    },\n    async onProductTypeChange(id) {\n      const result = await this.fetchOptionsByProductId(id)\n      if (!result.success) {\n        this.$toast.open({\n          type: 'error',\n          message:\n            result.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async fetch() {\n      this.isFetching = true\n      const promises = [this.fetchProductTypes()]\n      if (this.$route.params.id && this.$route.params.id !== 'new') {\n        this.mode = 'edit'\n        promises.push(\n          this.fetchOrderMapping({\n            type: types.option,\n            id: +this.$route.params.id,\n          })\n        )\n      }\n      const [, res2] = await Promise.all(promises)\n      if (res2 && res2.success) {\n        await this.transformStateToLocalForm(this.optionMappingState)\n      }\n      this.initialForm = cloneDeep(this.form)\n      this.isFetching = false\n    },\n    async transformStateToLocalForm(data) {\n      this.form.product_type_id = data.product_type_id\n      const result = await this.fetchOptionsByProductId(data.product_type_id)\n      if (!result.success) {\n        this.$toast.open({\n          type: 'error',\n          message:\n            result.message || 'Something went wrong. Please try again later',\n        })\n        return\n      }\n\n      // find all option_set rules\n      const optionSetRules = data.rules.filter(\n        (rule) => rule.column === 'option_set'\n      )\n      this.form.rules = optionSetRules.map((optionSetRule) => {\n        const formRule = {\n          option_set: {\n            condition: optionSetRule.condition,\n            target_value: optionSetRule.target_value\n              ? parseInt(optionSetRule.target_value)\n              : null,\n          },\n          option: {\n            conditions: '',\n            values: [],\n            target_values: [],\n          },\n        }\n\n        if (optionSetRule.target_value) {\n          //now find all option rules attach to this option set rules\n          const optionIds = this.getOptionsWithOptionSetId(\n            parseInt(optionSetRule.target_value)\n          ).map((option) => option.id)\n\n          const optionRules = data.rules.filter(\n            (rule) =>\n              rule.column === 'option' &&\n              rule.target_value &&\n              optionIds.indexOf(parseInt(rule.target_value)) > -1\n          )\n\n          formRule.option.values = optionRules.map(\n            (optionRule) => optionRule.condition\n          )\n          formRule.option.target_values = optionRules.map((optionRule) =>\n            optionRule.target_value ? parseInt(optionRule.target_value) : null\n          )\n          formRule.option.conditions = formRule.option.values.join(',')\n        }\n\n        return formRule\n      })\n    },\n    tranformLocalFormToPayload() {\n      const payload = {\n        product_type_id: this.form.product_type_id,\n        rules: [],\n        type: types.option,\n        disjunctive: false,\n      }\n      if (this.mode !== 'new') {\n        payload.id = this.optionMappingState.id\n      }\n      this.form.rules.map((rule) => {\n        // option set\n        payload.rules.push({\n          column: 'option_set',\n          relation: 'equal',\n          condition: rule.option_set.condition,\n          target_value: String(rule.option_set.target_value),\n        })\n        // option\n        rule.option.values.map((value, index) => {\n          payload.rules.push({\n            column: 'option',\n            relation: 'equal',\n            condition: value,\n            target_value: String(rule.option.target_values[index]),\n          })\n        })\n      })\n\n      return payload\n    },\n    discard() {\n      this.form = cloneDeep(this.initialForm)\n    },\n    showConfirmDelete() {\n      this.$dialog.confirm({\n        title: `Delete option mapping?`,\n        message: `Are you sure you want to delete this option mapping?`,\n        confirmText: 'Delete',\n        onConfirm: () => this.delete(),\n        type: 'danger',\n      })\n    },\n    async save() {\n      const isValid = await this.$validator.validateAll()\n      if (!isValid) return\n      this.isSaving = true\n      if (this.mode === 'new') {\n        await this.create()\n      } else {\n        await this.update()\n      }\n      this.isSaving = false\n    },\n    async create() {\n      const payload = this.tranformLocalFormToPayload()\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.option,\n        payload,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your option mapping was created',\n        })\n        this.$router.push({\n          name: 'option-mapping-update',\n          params: {\n            id: response.id,\n          },\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async update() {\n      const payload = this.tranformLocalFormToPayload()\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.option,\n        payload,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your option mapping was updated',\n        })\n        await this.fetch()\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async delete() {\n      this.isDeleting = true\n      const response = await this.deleteOrderMapping({\n        type: types.option,\n        id: this.optionMappingState.id,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your option mapping was deleted',\n        })\n        this.$router.push({\n          name: 'option-mapping-list',\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n      this.isDeleting = false\n    },\n  },\n  created() {\n    this.fetch()\n  },\n}\n</script>\n"]}]}