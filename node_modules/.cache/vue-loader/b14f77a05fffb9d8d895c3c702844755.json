{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/uikit/components/tabs/Tabs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/uikit/components/tabs/Tabs.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Icon from '../icon/Icon'\nexport default {\n  name: 'PTabs',\n  components: {\n    PIcon: Icon,\n  },\n  props: {\n    value: Number,\n    type: String,\n    size: String,\n    expanded: Boolean,\n    position: String,\n    animated: {\n      type: Boolean,\n      default: true,\n    },\n    itemClass: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      activeTab: this.value || 0,\n      tabItems: [],\n    }\n  },\n  methods: {\n    changeTab(newIndex) {\n      if (this.activeTab === newIndex) return\n      if (this.activeTab < this.tabItems.length) {\n        this.tabItems[this.activeTab].deactivate(this.activeTab, newIndex)\n      }\n      if (this.tabItems[newIndex]) {\n        this.tabItems[newIndex].activate(this.activeTab, newIndex)\n        const oldIndex = this.activeTab\n        this.activeTab = newIndex\n        this.$emit('change', newIndex, oldIndex)\n      }\n    },\n    tabClick(value) {\n      this.$emit('input', value)\n      this.changeTab(value)\n    },\n  },\n  watch: {\n    value(value) {\n      this.changeTab(value)\n    },\n    tabItems() {\n      if (this.activeTab < this.tabItems.length) {\n        this.tabItems[this.activeTab].isActive = true\n      }\n    },\n  },\n  mounted() {\n    if (this.activeTab < this.tabItems.length) {\n      this.tabItems[this.activeTab].isActive = true\n    }\n  },\n}\n",{"version":3,"sources":["Tabs.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Tabs.vue","sourceRoot":"uikit/components/tabs","sourcesContent":["<template>\n  <div class=\"p-tabs nav-tabs-horizontal\" :class=\"{ 'is-fullwidth': expanded }\">\n    <ul class=\"nav nav-tabs nav-tabs-line\" role=\"tablist\">\n      <li\n        v-for=\"(tabItem, index) in tabItems\"\n        :key=\"index\"\n        v-show=\"tabItem.visible\"\n        class=\"nav-item\"\n        role=\"presentation\"\n      >\n        <a\n          class=\"nav-link\"\n          :class=\"[\n            itemClass,\n            {\n              active: activeTab === index,\n              disabled: tabItem.disabled,\n            },\n          ]\"\n          role=\"tab\"\n          @click=\"tabClick(index)\"\n        >\n          <p-icon v-if=\"tabItem.icon\" :name=\"tabItem.icon\"> </p-icon>\n          <span>{{ tabItem.label }}</span>\n        </a>\n      </li>\n    </ul>\n    <section class=\"tab-content\">\n      <slot />\n    </section>\n  </div>\n</template>\n\n<script>\nimport Icon from '../icon/Icon'\nexport default {\n  name: 'PTabs',\n  components: {\n    PIcon: Icon,\n  },\n  props: {\n    value: Number,\n    type: String,\n    size: String,\n    expanded: Boolean,\n    position: String,\n    animated: {\n      type: Boolean,\n      default: true,\n    },\n    itemClass: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      activeTab: this.value || 0,\n      tabItems: [],\n    }\n  },\n  methods: {\n    changeTab(newIndex) {\n      if (this.activeTab === newIndex) return\n      if (this.activeTab < this.tabItems.length) {\n        this.tabItems[this.activeTab].deactivate(this.activeTab, newIndex)\n      }\n      if (this.tabItems[newIndex]) {\n        this.tabItems[newIndex].activate(this.activeTab, newIndex)\n        const oldIndex = this.activeTab\n        this.activeTab = newIndex\n        this.$emit('change', newIndex, oldIndex)\n      }\n    },\n    tabClick(value) {\n      this.$emit('input', value)\n      this.changeTab(value)\n    },\n  },\n  watch: {\n    value(value) {\n      this.changeTab(value)\n    },\n    tabItems() {\n      if (this.activeTab < this.tabItems.length) {\n        this.tabItems[this.activeTab].isActive = true\n      }\n    },\n  },\n  mounted() {\n    if (this.activeTab < this.tabItems.length) {\n      this.tabItems[this.activeTab].isActive = true\n    }\n  },\n}\n</script>\n"]}]}