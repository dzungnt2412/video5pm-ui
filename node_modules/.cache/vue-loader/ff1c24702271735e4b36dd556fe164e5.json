{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/uikit/components/checkbox/Checkbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/uikit/components/checkbox/Checkbox.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'PCheckbox',\n  props: {\n    value: {\n      type: [String, Number, Boolean, Function, Object, Array, Symbol],\n    },\n    nativeValue: {\n      type: [String, Number, Boolean, Function, Object, Array, Symbol],\n    },\n    indeterminate: {\n      type: Boolean,\n      default: false,\n    },\n    type: {\n      type: String,\n      default: 'primary',\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    required: {\n      type: Boolean,\n      default: false,\n    },\n    name: {\n      type: String,\n      default: '',\n    },\n    size: {\n      type: String,\n      default: '',\n      validator(value) {\n        return ['', 'lg', 'sm'].indexOf(value) > -1\n      },\n    },\n    trueValue: {\n      type: [String, Number, Boolean, Function, Object, Array, Symbol],\n      default: true,\n    },\n    falseValue: {\n      type: [String, Number, Boolean, Function, Object, Array, Symbol],\n      default: false,\n    },\n    inline: {\n      type: Boolean,\n      default: false,\n    },\n    circle: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    elementID() {\n      return 'cb' + Math.round(Math.random() * 1e6)\n    },\n    wrapperClasses() {\n      return [\n        'p-checkbox',\n        'checkbox-custom',\n        this.type ? `checkbox-${this.type}` : 'checkbox-default',\n        this.size ? `checkbox-${this.size}` : '',\n        {\n          'checkbox-circle': this.circle,\n          'checkbox-inline': this.inline,\n        },\n      ]\n    },\n  },\n  data() {\n    return {\n      internalVal: this.value,\n    }\n  },\n  methods: {\n    handleArrayCheckbox() {\n      return\n    },\n    toggle() {\n      // this.internalVal = !this.internalVal\n    },\n  },\n  watch: {\n    internalVal(val) {\n      this.$emit('input', val)\n    },\n\n    /**\n     * When v-model change, set internal value.\n     */\n    value(value) {\n      this.internalVal = value\n    },\n  },\n}\n",{"version":3,"sources":["Checkbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Checkbox.vue","sourceRoot":"uikit/components/checkbox","sourcesContent":["<template>\n  <div\n    :class=\"wrapperClasses\"\n    ref=\"checkbox\"\n    @keydown.prevent.enter=\"$refs.checkbox.click()\"\n  >\n    <input\n      v-model=\"internalVal\"\n      :indeterminate.prop=\"indeterminate\"\n      type=\"checkbox\"\n      :id=\"elementID\"\n      @click.stop\n      :disabled=\"disabled\"\n      :required=\"required\"\n      :name=\"name\"\n      :value=\"nativeValue\"\n      :true-value=\"trueValue\"\n      :false-value=\"falseValue\"\n    />\n    <label :for=\"elementID\" @click=\"toggle\">\n      <slot />\n    </label>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'PCheckbox',\n  props: {\n    value: {\n      type: [String, Number, Boolean, Function, Object, Array, Symbol],\n    },\n    nativeValue: {\n      type: [String, Number, Boolean, Function, Object, Array, Symbol],\n    },\n    indeterminate: {\n      type: Boolean,\n      default: false,\n    },\n    type: {\n      type: String,\n      default: 'primary',\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    required: {\n      type: Boolean,\n      default: false,\n    },\n    name: {\n      type: String,\n      default: '',\n    },\n    size: {\n      type: String,\n      default: '',\n      validator(value) {\n        return ['', 'lg', 'sm'].indexOf(value) > -1\n      },\n    },\n    trueValue: {\n      type: [String, Number, Boolean, Function, Object, Array, Symbol],\n      default: true,\n    },\n    falseValue: {\n      type: [String, Number, Boolean, Function, Object, Array, Symbol],\n      default: false,\n    },\n    inline: {\n      type: Boolean,\n      default: false,\n    },\n    circle: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    elementID() {\n      return 'cb' + Math.round(Math.random() * 1e6)\n    },\n    wrapperClasses() {\n      return [\n        'p-checkbox',\n        'checkbox-custom',\n        this.type ? `checkbox-${this.type}` : 'checkbox-default',\n        this.size ? `checkbox-${this.size}` : '',\n        {\n          'checkbox-circle': this.circle,\n          'checkbox-inline': this.inline,\n        },\n      ]\n    },\n  },\n  data() {\n    return {\n      internalVal: this.value,\n    }\n  },\n  methods: {\n    handleArrayCheckbox() {\n      return\n    },\n    toggle() {\n      // this.internalVal = !this.internalVal\n    },\n  },\n  watch: {\n    internalVal(val) {\n      this.$emit('input', val)\n    },\n\n    /**\n     * When v-model change, set internal value.\n     */\n    value(value) {\n      this.internalVal = value\n    },\n  },\n}\n</script>\n"]}]}