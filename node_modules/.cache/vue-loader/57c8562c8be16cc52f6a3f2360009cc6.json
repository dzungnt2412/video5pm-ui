{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/kit/Upload/UploadDragger.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/kit/Upload/UploadDragger.vue","mtime":1603898990380},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'ElUploadDrag',\n  props: {\n    disabled: Boolean,\n  },\n  inject: {\n    uploader: {\n      default: '',\n    },\n  },\n  data() {\n    return {\n      dragover: false,\n    }\n  },\n  methods: {\n    onDragover() {\n      if (!this.disabled) {\n        this.dragover = true\n      }\n    },\n    onDrop(e) {\n      if (this.disabled || !this.uploader) return\n      const accept = this.uploader.accept\n      this.dragover = false\n      if (!accept) {\n        this.$emit('file', e.dataTransfer.files)\n        return\n      }\n      this.$emit(\n        'file',\n        [].slice.call(e.dataTransfer.files).filter((file) => {\n          const { type, name } = file\n          const extension =\n            name.indexOf('.') > -1 ? `.${name.split('.').pop()}` : ''\n          const baseType = type.replace(/\\/.*$/, '')\n          return accept\n            .split(',')\n            .map((type) => type.trim())\n            .filter((type) => type)\n            .some((acceptedType) => {\n              if (/\\..+$/.test(acceptedType)) {\n                return extension === acceptedType\n              }\n              if (/\\/\\*$/.test(acceptedType)) {\n                return baseType === acceptedType.replace(/\\/\\*$/, '')\n              }\n              if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n                return type === acceptedType\n              }\n              return false\n            })\n        })\n      )\n    },\n  },\n}\n",{"version":3,"sources":["UploadDragger.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UploadDragger.vue","sourceRoot":"src/kit/Upload","sourcesContent":["<template>\n  <div\n    class=\"el-upload-dragger\"\n    :class=\"{\n      'is-dragover': dragover,\n    }\"\n    @drop.prevent=\"onDrop\"\n    @dragover.prevent=\"onDragover\"\n    @dragleave.prevent=\"dragover = false\"\n  >\n    <slot></slot>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'ElUploadDrag',\n  props: {\n    disabled: Boolean,\n  },\n  inject: {\n    uploader: {\n      default: '',\n    },\n  },\n  data() {\n    return {\n      dragover: false,\n    }\n  },\n  methods: {\n    onDragover() {\n      if (!this.disabled) {\n        this.dragover = true\n      }\n    },\n    onDrop(e) {\n      if (this.disabled || !this.uploader) return\n      const accept = this.uploader.accept\n      this.dragover = false\n      if (!accept) {\n        this.$emit('file', e.dataTransfer.files)\n        return\n      }\n      this.$emit(\n        'file',\n        [].slice.call(e.dataTransfer.files).filter((file) => {\n          const { type, name } = file\n          const extension =\n            name.indexOf('.') > -1 ? `.${name.split('.').pop()}` : ''\n          const baseType = type.replace(/\\/.*$/, '')\n          return accept\n            .split(',')\n            .map((type) => type.trim())\n            .filter((type) => type)\n            .some((acceptedType) => {\n              if (/\\..+$/.test(acceptedType)) {\n                return extension === acceptedType\n              }\n              if (/\\/\\*$/.test(acceptedType)) {\n                return baseType === acceptedType.replace(/\\/\\*$/, '')\n              }\n              if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n                return type === acceptedType\n              }\n              return false\n            })\n        })\n      )\n    },\n  },\n}\n</script>\n"]}]}