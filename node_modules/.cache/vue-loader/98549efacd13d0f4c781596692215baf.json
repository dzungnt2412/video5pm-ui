{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/ProductMappingList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/ProductMappingList.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { VclTable } from 'vue-content-loading'\nimport { mapActions, mapState, mapMutations } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport mixinTable from '@core/mixins/table'\nimport EmptySearchResult from '@components/shared/EmptySearchResult'\nimport { types, productConditionRelations, conditionColumns } from '../constant'\nimport { FETCH_ORDER_MAPPINGS } from '../store'\n\nexport default {\n  name: 'ProductMappingList',\n  mixins: [mixinRoute, mixinTable],\n  components: {\n    VclTable,\n    EmptySearchResult,\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      orderMappingsList: (state) => state.orderMappingsList,\n      count: (state) => state.orderMappingsCount,\n      products: (state) => state.productTypes,\n    }),\n    filterType() {\n      return (item) => {\n        return item.disjunctive ? 'or' : 'and'\n      }\n    },\n    getRulePhrase() {\n      return (rule) => {\n        const conditionTitle = conditionColumns.find(\n          (column) => column.value === rule.column\n        )\n        const relationTitle = productConditionRelations.find(\n          (relation) => relation.value === rule.relation\n        )\n        return `${conditionTitle.text} ${relationTitle.text} ${rule.condition}`\n      }\n    },\n  },\n  data() {\n    return {\n      isFetching: false,\n      filter: {\n        product_type_ids: [],\n      },\n    }\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      fetchOrderMappingList: 'fetchOrderMappingList',\n      fetchProductTypes: 'fetchProductTypes',\n      deleteOrderMapping: 'deleteOrderMapping',\n    }),\n    ...mapMutations('orderMapping', {\n      updateStateOrderMappings: FETCH_ORDER_MAPPINGS,\n    }),\n    async init() {\n      this.isFetching = true\n      this.handleUpdateRouteQuery()\n      await Promise.all([\n        this.fetchOrderMappingList({\n          type: types.product_type,\n          payload: this.filter,\n        }),\n        this.fetchProductTypes(),\n      ])\n      this.isFetching = false\n    },\n    showConfirmDeleteMapping(item) {\n      this.$dialog.confirm({\n        title: `Delete product mapping?`,\n        message: `Are you sure you want to delete this product mapping?`,\n        confirmText: 'Delete',\n        onConfirm: () => this.deleteMapping(item),\n        type: 'danger',\n      })\n    },\n    async deleteMapping(item) {\n      this.isFetching = true\n      const response = await this.deleteOrderMapping({\n        type: types.product_type,\n        id: item.id,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was deleted',\n        })\n        this.fetchOrderMappingList({\n          type: types.product_type,\n          payload: this.filter,\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n      this.isFetching = false\n    },\n    editMapping(item) {\n      this.$router.push({\n        name: 'product-mapping-update',\n        params: { id: item.id },\n      })\n    },\n    addNewRule() {\n      this.$router.push({\n        name: 'product-mapping-_new',\n      })\n    },\n    onProductTypeSelect(val) {\n      this.filter.product_type_ids = val\n    },\n  },\n  beforeRouteLeave(to, from, next) {\n    this.updateStateOrderMappings([])\n    next()\n  },\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n",{"version":3,"sources":["ProductMappingList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"ProductMappingList.vue","sourceRoot":"src/packages/order-mapping/views","sourcesContent":["<template>\n  <div class=\"page\">\n    <div class=\"page-header\">\n      <div class=\"d-flex align-items-center justify-content-between\">\n        <h1 class=\"page-title\">Product Mapping Rules</h1>\n        <div class=\"page-header-group-actions__right\">\n          <p-button @click=\"addNewRule\">\n            Add new rule\n          </p-button>\n        </div>\n      </div>\n    </div>\n    <div class=\"page-content container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-xl-12\">\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <p-select\n                placeholder=\"Filter by Lionnix product\"\n                class=\"mb-2\"\n                :value=\"filter.product_type_ids\"\n                @input=\"onProductTypeSelect\"\n              >\n                <option :value=\"[]\">All</option>\n                <option\n                  v-for=\"(product, index) in products\"\n                  :key=\"index\"\n                  :value=\"[product.id]\"\n                >\n                  {{ product.name }}\n                </option>\n              </p-select>\n              <VclTable class=\"my-20\" v-if=\"isFetching\"> </VclTable>\n              <template v-else-if=\"orderMappingsList.length\">\n                <div class=\"table-responsive\">\n                  <table class=\"table table-hover\">\n                    <thead>\n                      <tr>\n                        <th>Lionnix Product</th>\n                        <th>Conditions</th>\n                        <th>Date</th>\n                        <th class=\"text-right\">\n                          <span class=\"mr-10\">Action</span>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr v-for=\"(item, i) in orderMappingsList\" :key=\"i\">\n                        <td>{{ item.product_type_name }}</td>\n                        <td>\n                          <template\n                            v-for=\"(rule, index) in item.rules\"\n                            class=\"d-flex\"\n                          >\n                            <span :key=\"index\">{{ getRulePhrase(rule) }}</span>\n                            <span\n                              :key=\"`${index}-badge`\"\n                              class=\"text-uppercase badge badge-round badge-default mx-2 vertical-align-bottom\"\n                              v-if=\"index < item.rules.length - 1\"\n                            >\n                              {{ filterType(item) }}\n                            </span>\n                          </template>\n                        </td>\n                        <td>{{ item.created_at | date }}</td>\n                        <td class=\"text-right\">\n                          <div class=\"d-flex justify-content-end\">\n                            <p-button\n                              type=\"default\"\n                              icon=\"edit\"\n                              size=\"sm\"\n                              @click=\"editMapping(item)\"\n                            ></p-button>\n                            <p-button\n                              class=\"ml-2\"\n                              type=\"danger\"\n                              size=\"sm\"\n                              icon=\"close\"\n                              @click=\"showConfirmDeleteMapping(item)\"\n                            ></p-button>\n                          </div>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div class=\"d-flex justify-content-between align-items-center\">\n                  <span>\n                    {{ paginationLabel }}\n                  </span>\n                  <p-pagination\n                    :total=\"count\"\n                    :perPage=\"filter.limit\"\n                    :current.sync=\"filter.page\"\n                    size=\"sm\"\n                  >\n                  </p-pagination>\n                </div>\n              </template>\n              <EmptySearchResult\n                v-else\n                title=\"No product mappings found\"\n              ></EmptySearchResult>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { VclTable } from 'vue-content-loading'\nimport { mapActions, mapState, mapMutations } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport mixinTable from '@core/mixins/table'\nimport EmptySearchResult from '@components/shared/EmptySearchResult'\nimport { types, productConditionRelations, conditionColumns } from '../constant'\nimport { FETCH_ORDER_MAPPINGS } from '../store'\n\nexport default {\n  name: 'ProductMappingList',\n  mixins: [mixinRoute, mixinTable],\n  components: {\n    VclTable,\n    EmptySearchResult,\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      orderMappingsList: (state) => state.orderMappingsList,\n      count: (state) => state.orderMappingsCount,\n      products: (state) => state.productTypes,\n    }),\n    filterType() {\n      return (item) => {\n        return item.disjunctive ? 'or' : 'and'\n      }\n    },\n    getRulePhrase() {\n      return (rule) => {\n        const conditionTitle = conditionColumns.find(\n          (column) => column.value === rule.column\n        )\n        const relationTitle = productConditionRelations.find(\n          (relation) => relation.value === rule.relation\n        )\n        return `${conditionTitle.text} ${relationTitle.text} ${rule.condition}`\n      }\n    },\n  },\n  data() {\n    return {\n      isFetching: false,\n      filter: {\n        product_type_ids: [],\n      },\n    }\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      fetchOrderMappingList: 'fetchOrderMappingList',\n      fetchProductTypes: 'fetchProductTypes',\n      deleteOrderMapping: 'deleteOrderMapping',\n    }),\n    ...mapMutations('orderMapping', {\n      updateStateOrderMappings: FETCH_ORDER_MAPPINGS,\n    }),\n    async init() {\n      this.isFetching = true\n      this.handleUpdateRouteQuery()\n      await Promise.all([\n        this.fetchOrderMappingList({\n          type: types.product_type,\n          payload: this.filter,\n        }),\n        this.fetchProductTypes(),\n      ])\n      this.isFetching = false\n    },\n    showConfirmDeleteMapping(item) {\n      this.$dialog.confirm({\n        title: `Delete product mapping?`,\n        message: `Are you sure you want to delete this product mapping?`,\n        confirmText: 'Delete',\n        onConfirm: () => this.deleteMapping(item),\n        type: 'danger',\n      })\n    },\n    async deleteMapping(item) {\n      this.isFetching = true\n      const response = await this.deleteOrderMapping({\n        type: types.product_type,\n        id: item.id,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was deleted',\n        })\n        this.fetchOrderMappingList({\n          type: types.product_type,\n          payload: this.filter,\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n      this.isFetching = false\n    },\n    editMapping(item) {\n      this.$router.push({\n        name: 'product-mapping-update',\n        params: { id: item.id },\n      })\n    },\n    addNewRule() {\n      this.$router.push({\n        name: 'product-mapping-_new',\n      })\n    },\n    onProductTypeSelect(val) {\n      this.filter.product_type_ids = val\n    },\n  },\n  beforeRouteLeave(to, from, next) {\n    this.updateStateOrderMappings([])\n    next()\n  },\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n</script>\n"]}]}