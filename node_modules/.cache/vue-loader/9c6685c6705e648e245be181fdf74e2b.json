{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/order-mapping/views/components/ModalUpdateAndRetryMapping.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/order-mapping/views/components/ModalUpdateAndRetryMapping.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapActions } from 'vuex'\nimport { cloneDeep } from '@core/utils'\nimport { FETCH_ORDER, UPDATE_ORDER } from '@/packages/container/store/types'\nimport OrderItems from '@/packages/container/views/components/OrderItems'\nexport default {\n  name: 'ModalUpdateAndRetryMapping',\n  components: {\n    OrderItems,\n  },\n  props: {\n    visible: {\n      type: Boolean,\n      default: false,\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n    },\n    orderId: {\n      type: Number,\n      default: 0,\n    },\n  },\n  computed: {\n    ...mapState('container', {\n      order: (state) => state.order,\n    }),\n    ...mapState('shared', {\n      productTypes: (state) => state.productTypes,\n    }),\n    ...mapState('design', {\n      designs: (state) => state.designs,\n    }),\n  },\n  data() {\n    return {\n      isFetching: false,\n      isSaving: false,\n      isShow: this.visible,\n      orderItems: [],\n    }\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    ...mapActions('container', [FETCH_ORDER, UPDATE_ORDER]),\n    ...mapActions('design', ['fetchDesigns']),\n    ...mapActions('orderMapping', {\n      retryOrderMappingFails: 'retryOrderMappingFails',\n    }),\n    async init() {\n      this.isFetching = true\n      await this.fetchOrder(this.orderId)\n      this.isFetching = false\n    },\n    handleSelectedDesign({ url, item, design }) {\n      this.handleUpdateOrderItem(item, {\n        design,\n        design_id: design.id,\n        image: url,\n      })\n    },\n\n    handleSelectedProductType({ item, product }) {\n      this.handleUpdateOrderItem(item, {\n        product_type_id: product.id,\n        product_type: product,\n      })\n    },\n    handleUpdateOrderItem(item, newVal) {\n      const index = this.orderItems.findIndex(({ id }) => id === item.id)\n\n      if (index !== -1) {\n        this.editing = true\n        this.$set(this.orderItems, index, Object.assign({}, item, newVal))\n      }\n    },\n    close() {\n      this.$emit('update:visible', false)\n    },\n    async save() {\n      this.isSaving = true\n      const response = await this.updateOrder(\n        Object.assign({}, this.order, { order_items: this.orderItems })\n      )\n\n      if (!response || !response.success) {\n        this.$toast.open({ type: 'error', message: response.message })\n        this.isSaving = false\n        return\n      }\n      this.$set(this, 'orderItems', cloneDeep(this.order.order_items))\n      const responseRetry = await this.retryOrderMappingFails({\n        ids: [this.orderId],\n      })\n\n      if (!responseRetry || !responseRetry.success) {\n        this.$toast.open({ type: 'error', message: responseRetry.message })\n        this.isSaving = false\n        return\n      }\n      this.$toast.open({\n        type: 'success',\n        message: 'Updated successfully',\n      })\n      this.$emit('save')\n      this.close()\n    },\n  },\n  watch: {\n    visible(value) {\n      this.isShow = value\n    },\n    'order.order_items': function(val) {\n      this.$set(this, 'orderItems', cloneDeep(val))\n    },\n  },\n}\n",{"version":3,"sources":["ModalUpdateAndRetryMapping.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"ModalUpdateAndRetryMapping.vue","sourceRoot":"src/packages/order-mapping/views/components","sourcesContent":["<template>\n  <p-modal\n    :size=\"'xl'\"\n    :active.sync=\"isShow\"\n    :title=\"`Retry map order ${order.ref_id}`\"\n    @close=\"close\"\n  >\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <section class=\"section-order-items\">\n          <div>\n            <h4>Order items</h4>\n            <order-items\n              :order=\"order\"\n              :items=\"orderItems\"\n              :editing=\"true\"\n              :designs=\"designs\"\n              :fetch-designs=\"fetchDesigns\"\n              :product-types=\"productTypes\"\n              :shop-id=\"order.shop_id\"\n              @selectedProduct=\"handleSelectedProductType\"\n              @selectedDesign=\"handleSelectedDesign\"\n              :is-allow-update=\"true\"\n            />\n          </div>\n        </section>\n      </div>\n    </div>\n    <template slot=\"footer\">\n      <p-button type=\"default\" @click=\"close\">\n        <span>Cancel</span>\n      </p-button>\n      <p-button type=\"primary\" @click=\"save\" :disabled=\"isSaving || isFetching\">\n        <span>Update and Retry</span>\n      </p-button>\n    </template>\n  </p-modal>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport { cloneDeep } from '@core/utils'\nimport { FETCH_ORDER, UPDATE_ORDER } from '@/packages/container/store/types'\nimport OrderItems from '@/packages/container/views/components/OrderItems'\nexport default {\n  name: 'ModalUpdateAndRetryMapping',\n  components: {\n    OrderItems,\n  },\n  props: {\n    visible: {\n      type: Boolean,\n      default: false,\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n    },\n    orderId: {\n      type: Number,\n      default: 0,\n    },\n  },\n  computed: {\n    ...mapState('container', {\n      order: (state) => state.order,\n    }),\n    ...mapState('shared', {\n      productTypes: (state) => state.productTypes,\n    }),\n    ...mapState('design', {\n      designs: (state) => state.designs,\n    }),\n  },\n  data() {\n    return {\n      isFetching: false,\n      isSaving: false,\n      isShow: this.visible,\n      orderItems: [],\n    }\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    ...mapActions('container', [FETCH_ORDER, UPDATE_ORDER]),\n    ...mapActions('design', ['fetchDesigns']),\n    ...mapActions('orderMapping', {\n      retryOrderMappingFails: 'retryOrderMappingFails',\n    }),\n    async init() {\n      this.isFetching = true\n      await this.fetchOrder(this.orderId)\n      this.isFetching = false\n    },\n    handleSelectedDesign({ url, item, design }) {\n      this.handleUpdateOrderItem(item, {\n        design,\n        design_id: design.id,\n        image: url,\n      })\n    },\n\n    handleSelectedProductType({ item, product }) {\n      this.handleUpdateOrderItem(item, {\n        product_type_id: product.id,\n        product_type: product,\n      })\n    },\n    handleUpdateOrderItem(item, newVal) {\n      const index = this.orderItems.findIndex(({ id }) => id === item.id)\n\n      if (index !== -1) {\n        this.editing = true\n        this.$set(this.orderItems, index, Object.assign({}, item, newVal))\n      }\n    },\n    close() {\n      this.$emit('update:visible', false)\n    },\n    async save() {\n      this.isSaving = true\n      const response = await this.updateOrder(\n        Object.assign({}, this.order, { order_items: this.orderItems })\n      )\n\n      if (!response || !response.success) {\n        this.$toast.open({ type: 'error', message: response.message })\n        this.isSaving = false\n        return\n      }\n      this.$set(this, 'orderItems', cloneDeep(this.order.order_items))\n      const responseRetry = await this.retryOrderMappingFails({\n        ids: [this.orderId],\n      })\n\n      if (!responseRetry || !responseRetry.success) {\n        this.$toast.open({ type: 'error', message: responseRetry.message })\n        this.isSaving = false\n        return\n      }\n      this.$toast.open({\n        type: 'success',\n        message: 'Updated successfully',\n      })\n      this.$emit('save')\n      this.close()\n    },\n  },\n  watch: {\n    visible(value) {\n      this.isShow = value\n    },\n    'order.order_items': function(val) {\n      this.$set(this, 'orderItems', cloneDeep(val))\n    },\n  },\n}\n</script>\n"]}]}