{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/shop/views/Form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/shop/views/Form.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapActions } from 'vuex'\nimport { cloneDeep } from '@core/utils'\nimport { FETCH_SHOP, UPDATE_SHOP } from '../store'\n\nexport default {\n  name: 'ShopEdit',\n  computed: {\n    ...mapState('shop', {\n      current: (state) => state.shopUpdate,\n    }),\n    shopId() {\n      return parseInt(this.$route.params.id)\n    },\n  },\n  data() {\n    return {\n      isUpdating: false,\n      isFetching: false,\n      resultFetch: {},\n      shop: {},\n    }\n  },\n  mounted() {\n    this.handleFetchShop()\n  },\n  methods: {\n    ...mapActions('shop', [FETCH_SHOP, UPDATE_SHOP]),\n\n    async handleFetchShop() {\n      this.isFetching = true\n      this.resultFetch = await this.fetchShop(this.shopId)\n\n      if (this.resultFetch.success) {\n        this.$set(this, 'shop', cloneDeep(this.current))\n      }\n\n      this.isFetching = false\n    },\n\n    async handleUpdateShop() {\n      const validate = await this.$validator.validateAll()\n\n      if (!validate) {\n        return\n      }\n\n      this.isUpdating = true\n      const result = await this.updateShop(this.shop)\n\n      if (result.success) {\n        this.$set(this, 'shop', cloneDeep(this.current))\n        this.$toast.open({ type: 'success', message: 'Cập nhật thành công' })\n      } else {\n        this.$toast.open({ type: 'error', message: result.message })\n      }\n\n      this.isUpdating = false\n    },\n  },\n}\n",null]}