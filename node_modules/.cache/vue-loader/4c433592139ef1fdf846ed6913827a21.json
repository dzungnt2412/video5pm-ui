{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/uikit/components/pagination/Pagination.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/uikit/components/pagination/Pagination.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'PPagination',\n  props: {\n    total: [Number, String],\n    perPage: {\n      type: [Number, String],\n      default: 20,\n    },\n    current: {\n      type: [Number, String],\n      default: 1,\n    },\n    size: String,\n    simple: Boolean,\n    rounded: Boolean,\n    order: String,\n    iconPack: String,\n    ariaNextLabel: String,\n    ariaPreviousLabel: String,\n    ariaPageLabel: String,\n    ariaCurrentLabel: String,\n  },\n  computed: {\n    rootClasses() {\n      return [\n        this.order,\n        this.size ? `pagination-${this.size}` : '',\n        {\n          'is-simple': this.simple,\n          'is-rounded': this.rounded,\n        },\n      ]\n    },\n\n    /**\n     * Total page size (count).\n     */\n    pageCount() {\n      return Math.ceil(this.total / this.perPage)\n    },\n\n    /**\n     * First item of the page (count).\n     */\n    firstItem() {\n      const firstItem = this.current * this.perPage - this.perPage + 1\n      return firstItem >= 0 ? firstItem : 0\n    },\n\n    /**\n     * Check if previous button is available.\n     */\n    hasPrev() {\n      return this.current > 1\n    },\n\n    /**\n     * Check if first page button should be visible.\n     */\n    hasFirst() {\n      return this.current >= 3\n    },\n\n    /**\n     * Check if first ellipsis should be visible.\n     */\n    hasFirstEllipsis() {\n      return this.current >= 5\n    },\n\n    /**\n     * Check if last page button should be visible.\n     */\n    hasLast() {\n      return this.current <= this.pageCount - 2\n    },\n\n    /**\n     * Check if last ellipsis should be visible.\n     */\n    hasLastEllipsis() {\n      return this.current < this.pageCount - 3\n    },\n\n    /**\n     * Check if next button is available.\n     */\n    hasNext() {\n      return this.current < this.pageCount\n    },\n\n    /**\n     * Get near pages, 1 before and 1 after the current.\n     * Also add the click event to the array.\n     */\n    pagesInRange() {\n      if (this.simple) {\n        return\n      }\n\n      let left = Math.max(1, this.current - 1)\n      if (left - 1 === 2) {\n        left-- // Do not show the ellipsis if there is only one to hide\n      }\n      let right = Math.min(this.current + 1, this.pageCount)\n      if (this.pageCount - right === 2) {\n        right++ // Do not show the ellipsis if there is only one to hide\n      }\n\n      const pages = []\n      for (let i = left; i <= right; i++) {\n        pages.push({\n          number: i,\n          isCurrent: this.current === i,\n          click: (event) => {\n            if (this.current === i) {\n              return\n            }\n\n            this.$emit('change', i)\n            this.$emit('update:current', i)\n\n            // Set focus on element to keep tab order\n            this.$nextTick(() => event.target.focus())\n          },\n        })\n      }\n      return pages\n    },\n  },\n  watch: {\n    /**\n     * If current page is trying to be greater than page count, set to last.\n     */\n    pageCount(value) {\n      if (this.current > value) {\n        this.last()\n      }\n    },\n  },\n  methods: {\n    /**\n     * Previous button click listener.\n     */\n    prev() {\n      if (!this.hasPrev) {\n        return\n      }\n\n      this.$emit('change', this.current - 1)\n      this.$emit('update:current', this.current - 1)\n    },\n\n    /**\n     * First button click listener.\n     */\n    first() {\n      this.$emit('change', 1)\n      this.$emit('update:current', 1)\n    },\n\n    /**\n     * Last button click listener.\n     */\n    last() {\n      this.$emit('change', this.pageCount)\n      this.$emit('update:current', this.pageCount)\n    },\n\n    /**\n     * Next button click listener.\n     */\n    next() {\n      if (!this.hasNext) {\n        return\n      }\n\n      this.$emit('change', this.current + 1)\n      this.$emit('update:current', this.current + 1)\n    },\n\n    /**\n     * Get text for aria-label according to page number.\n     */\n    getAriaPageLabel(pageNumber, isCurrent) {\n      if (this.ariaPageLabel && (!isCurrent || !this.ariaCurrentLabel)) {\n        return this.ariaPageLabel + ' ' + pageNumber + '.'\n      } else if (this.ariaPageLabel && isCurrent && this.ariaCurrentLabel) {\n        return (\n          this.ariaCurrentLabel +\n          ', ' +\n          this.ariaPageLabel +\n          ' ' +\n          pageNumber +\n          '.'\n        )\n      }\n      return null\n    },\n  },\n}\n",{"version":3,"sources":["Pagination.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Pagination.vue","sourceRoot":"uikit/components/pagination","sourcesContent":["<template>\n  <nav>\n    <ul\n      class=\"p-pagination pagination pagination-gap\"\n      :class=\"rootClasses\"\n      v-if=\"!simple\"\n    >\n      <li class=\"page-item\">\n        <a\n          role=\"button\"\n          href=\"#\"\n          class=\"page-link\"\n          :disabled=\"!hasPrev\"\n          @click.prevent=\"prev\"\n          :aria-label=\"ariaPreviousLabel\"\n        >\n          <span aria-hidden=\"true\">«</span>\n        </a>\n      </li>\n      <!--First-->\n      <li v-if=\"hasFirst\" class=\"page-item\">\n        <a\n          role=\"button\"\n          href=\"#\"\n          class=\"page-link\"\n          @click.prevent=\"first\"\n          :aria-label=\"getAriaPageLabel(1, false)\"\n        >\n          1\n        </a>\n      </li>\n      <li v-if=\"hasFirstEllipsis\"\n        ><span class=\"p-pagination-ellipsis\">&hellip;</span></li\n      >\n\n      <!--Pages-->\n      <li\n        class=\"page-item\"\n        :class=\"{ active: page.isCurrent }\"\n        v-for=\"page in pagesInRange\"\n        :key=\"page.number\"\n      >\n        <a\n          role=\"button\"\n          href=\"#\"\n          class=\"page-link\"\n          @click.prevent=\"page.click\"\n          :aria-label=\"getAriaPageLabel(page.number, page.isCurrent)\"\n          :aria-current=\"page.isCurrent\"\n        >\n          {{ page.number }}\n        </a>\n      </li>\n\n      <!--Last-->\n      <li v-if=\"hasLastEllipsis\"\n        ><span class=\"p-pagination-ellipsis\">&hellip;</span></li\n      >\n      <li class=\"page-item\" v-if=\"hasLast\">\n        <a\n          role=\"button\"\n          href=\"#\"\n          class=\"page-link\"\n          @click.prevent=\"last\"\n          :aria-label=\"getAriaPageLabel(pageCount, false)\"\n        >\n          {{ pageCount }}\n        </a>\n      </li>\n      <li class=\"page-item\">\n        <a\n          role=\"button\"\n          href=\"#\"\n          class=\"page-link\"\n          :disabled=\"!hasNext\"\n          @click.prevent=\"next\"\n          :aria-label=\"ariaNextLabel\"\n        >\n          <span aria-hidden=\"true\">»</span>\n        </a>\n      </li>\n    </ul>\n    <small class=\"info\" v-if=\"simple\">\n      <template v-if=\"perPage === 1\"> {{ firstItem }} / {{ total }} </template>\n      <template v-else>\n        {{ firstItem }}-{{ Math.min(current * perPage, total) }} / {{ total }}\n      </template>\n    </small>\n  </nav>\n</template>\n\n<script>\nexport default {\n  name: 'PPagination',\n  props: {\n    total: [Number, String],\n    perPage: {\n      type: [Number, String],\n      default: 20,\n    },\n    current: {\n      type: [Number, String],\n      default: 1,\n    },\n    size: String,\n    simple: Boolean,\n    rounded: Boolean,\n    order: String,\n    iconPack: String,\n    ariaNextLabel: String,\n    ariaPreviousLabel: String,\n    ariaPageLabel: String,\n    ariaCurrentLabel: String,\n  },\n  computed: {\n    rootClasses() {\n      return [\n        this.order,\n        this.size ? `pagination-${this.size}` : '',\n        {\n          'is-simple': this.simple,\n          'is-rounded': this.rounded,\n        },\n      ]\n    },\n\n    /**\n     * Total page size (count).\n     */\n    pageCount() {\n      return Math.ceil(this.total / this.perPage)\n    },\n\n    /**\n     * First item of the page (count).\n     */\n    firstItem() {\n      const firstItem = this.current * this.perPage - this.perPage + 1\n      return firstItem >= 0 ? firstItem : 0\n    },\n\n    /**\n     * Check if previous button is available.\n     */\n    hasPrev() {\n      return this.current > 1\n    },\n\n    /**\n     * Check if first page button should be visible.\n     */\n    hasFirst() {\n      return this.current >= 3\n    },\n\n    /**\n     * Check if first ellipsis should be visible.\n     */\n    hasFirstEllipsis() {\n      return this.current >= 5\n    },\n\n    /**\n     * Check if last page button should be visible.\n     */\n    hasLast() {\n      return this.current <= this.pageCount - 2\n    },\n\n    /**\n     * Check if last ellipsis should be visible.\n     */\n    hasLastEllipsis() {\n      return this.current < this.pageCount - 3\n    },\n\n    /**\n     * Check if next button is available.\n     */\n    hasNext() {\n      return this.current < this.pageCount\n    },\n\n    /**\n     * Get near pages, 1 before and 1 after the current.\n     * Also add the click event to the array.\n     */\n    pagesInRange() {\n      if (this.simple) {\n        return\n      }\n\n      let left = Math.max(1, this.current - 1)\n      if (left - 1 === 2) {\n        left-- // Do not show the ellipsis if there is only one to hide\n      }\n      let right = Math.min(this.current + 1, this.pageCount)\n      if (this.pageCount - right === 2) {\n        right++ // Do not show the ellipsis if there is only one to hide\n      }\n\n      const pages = []\n      for (let i = left; i <= right; i++) {\n        pages.push({\n          number: i,\n          isCurrent: this.current === i,\n          click: (event) => {\n            if (this.current === i) {\n              return\n            }\n\n            this.$emit('change', i)\n            this.$emit('update:current', i)\n\n            // Set focus on element to keep tab order\n            this.$nextTick(() => event.target.focus())\n          },\n        })\n      }\n      return pages\n    },\n  },\n  watch: {\n    /**\n     * If current page is trying to be greater than page count, set to last.\n     */\n    pageCount(value) {\n      if (this.current > value) {\n        this.last()\n      }\n    },\n  },\n  methods: {\n    /**\n     * Previous button click listener.\n     */\n    prev() {\n      if (!this.hasPrev) {\n        return\n      }\n\n      this.$emit('change', this.current - 1)\n      this.$emit('update:current', this.current - 1)\n    },\n\n    /**\n     * First button click listener.\n     */\n    first() {\n      this.$emit('change', 1)\n      this.$emit('update:current', 1)\n    },\n\n    /**\n     * Last button click listener.\n     */\n    last() {\n      this.$emit('change', this.pageCount)\n      this.$emit('update:current', this.pageCount)\n    },\n\n    /**\n     * Next button click listener.\n     */\n    next() {\n      if (!this.hasNext) {\n        return\n      }\n\n      this.$emit('change', this.current + 1)\n      this.$emit('update:current', this.current + 1)\n    },\n\n    /**\n     * Get text for aria-label according to page number.\n     */\n    getAriaPageLabel(pageNumber, isCurrent) {\n      if (this.ariaPageLabel && (!isCurrent || !this.ariaCurrentLabel)) {\n        return this.ariaPageLabel + ' ' + pageNumber + '.'\n      } else if (this.ariaPageLabel && isCurrent && this.ariaCurrentLabel) {\n        return (\n          this.ariaCurrentLabel +\n          ', ' +\n          this.ariaPageLabel +\n          ' ' +\n          pageNumber +\n          '.'\n        )\n      }\n      return null\n    },\n  },\n}\n</script>\n"]}]}