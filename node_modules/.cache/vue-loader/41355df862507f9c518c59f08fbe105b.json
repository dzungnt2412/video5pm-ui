{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/progress/Progress.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/progress/Progress.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'PProgress',\n  props: {\n    type: {\n      type: [String, Object],\n      default: 'dark',\n    },\n    size: String,\n    value: {\n      type: Number,\n      default: undefined,\n    },\n    max: {\n      type: Number,\n      default: 100,\n    },\n    showValue: {\n      type: Boolean,\n      default: false,\n    },\n    format: {\n      type: String,\n      default: 'raw',\n      validator: (value) => {\n        return ['raw', 'percent'].indexOf(value) >= 0\n      },\n    },\n    precision: {\n      type: Number,\n      default: 2,\n    },\n    keepTrailingZeroes: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    isIndeterminate() {\n      return this.value === undefined || this.value === null\n    },\n    newType() {\n      return [\n        this.size ? `is-${this.size}` : '',\n        this.type ? `is-${this.type}` : '',\n      ]\n    },\n    newValue() {\n      if (\n        this.value === undefined ||\n        this.value === null ||\n        isNaN(this.value)\n      ) {\n        return undefined\n      }\n\n      if (this.format === 'percent') {\n        const val = this.toFixed((this.value * this.max) / 100)\n        return `${val}%`\n      }\n      const val = this.toFixed(this.value)\n      return val\n    },\n  },\n  watch: {\n    value(value) {\n      this.setValue(value)\n    },\n  },\n  methods: {\n    /**\n     * When value is changed back to undefined, value of native progress get reset to 0.\n     * Need to add and remove the value attribute to have the indeterminate or not.\n     */\n    setValue(value) {\n      if (this.isIndeterminate) {\n        this.$refs.progress.removeAttribute('value')\n      } else {\n        this.$refs.progress.setAttribute('value', value)\n      }\n    },\n    // Custom function that imitate the javascript toFixed method with improved rounding\n    toFixed(num) {\n      let fixed = (+`${Math.round(+`${num}e${this.precision}`)}e${-this\n        .precision}`).toFixed(this.precision)\n      if (!this.keepTrailingZeroes) {\n        fixed = fixed.replace(/\\.?0+$/, '')\n      }\n      return fixed\n    },\n  },\n  mounted() {\n    this.setValue(this.value)\n  },\n}\n",{"version":3,"sources":["Progress.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Progress.vue","sourceRoot":"uikit/components/progress","sourcesContent":["<template>\n  <div class=\"progress-wrapper\">\n    <progress ref=\"progress\" class=\"progress\" :class=\"newType\" :max=\"max\">{{\n      newValue\n    }}</progress>\n    <p v-if=\"showValue\" class=\"progress-value\"\n      ><slot>{{ newValue }}</slot></p\n    >\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'PProgress',\n  props: {\n    type: {\n      type: [String, Object],\n      default: 'dark',\n    },\n    size: String,\n    value: {\n      type: Number,\n      default: undefined,\n    },\n    max: {\n      type: Number,\n      default: 100,\n    },\n    showValue: {\n      type: Boolean,\n      default: false,\n    },\n    format: {\n      type: String,\n      default: 'raw',\n      validator: (value) => {\n        return ['raw', 'percent'].indexOf(value) >= 0\n      },\n    },\n    precision: {\n      type: Number,\n      default: 2,\n    },\n    keepTrailingZeroes: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    isIndeterminate() {\n      return this.value === undefined || this.value === null\n    },\n    newType() {\n      return [\n        this.size ? `is-${this.size}` : '',\n        this.type ? `is-${this.type}` : '',\n      ]\n    },\n    newValue() {\n      if (\n        this.value === undefined ||\n        this.value === null ||\n        isNaN(this.value)\n      ) {\n        return undefined\n      }\n\n      if (this.format === 'percent') {\n        const val = this.toFixed((this.value * this.max) / 100)\n        return `${val}%`\n      }\n      const val = this.toFixed(this.value)\n      return val\n    },\n  },\n  watch: {\n    value(value) {\n      this.setValue(value)\n    },\n  },\n  methods: {\n    /**\n     * When value is changed back to undefined, value of native progress get reset to 0.\n     * Need to add and remove the value attribute to have the indeterminate or not.\n     */\n    setValue(value) {\n      if (this.isIndeterminate) {\n        this.$refs.progress.removeAttribute('value')\n      } else {\n        this.$refs.progress.setAttribute('value', value)\n      }\n    },\n    // Custom function that imitate the javascript toFixed method with improved rounding\n    toFixed(num) {\n      let fixed = (+`${Math.round(+`${num}e${this.precision}`)}e${-this\n        .precision}`).toFixed(this.precision)\n      if (!this.keepTrailingZeroes) {\n        fixed = fixed.replace(/\\.?0+$/, '')\n      }\n      return fixed\n    },\n  },\n  mounted() {\n    this.setValue(this.value)\n  },\n}\n</script>\n"]}]}