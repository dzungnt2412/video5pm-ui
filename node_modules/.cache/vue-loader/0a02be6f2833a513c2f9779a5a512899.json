{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/ProductMappingList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/ProductMappingList.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { VclTable } from 'vue-content-loading'\nimport { mapActions, mapState, mapMutations } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport mixinTable from '@core/mixins/table'\nimport EmptySearchResult from '@components/shared/EmptySearchResult'\nimport { types, productConditionRelations, conditionColumns } from '../constant'\nimport { FETCH_ORDER_MAPPINGS } from '../store'\n\nexport default {\n  name: 'ProductMappingList',\n  mixins: [mixinRoute, mixinTable],\n  components: {\n    VclTable,\n    EmptySearchResult,\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      orderMappingsList: (state) => state.orderMappingsList,\n      count: (state) => state.orderMappingsCount,\n      products: (state) => state.productTypes,\n    }),\n    filterType() {\n      return (item) => {\n        return item.disjunctive ? 'or' : 'and'\n      }\n    },\n    getRulePhrase() {\n      return (rule) => {\n        const conditionTitle = conditionColumns.find(\n          (column) => column.value === rule.column\n        )\n        const relationTitle = productConditionRelations.find(\n          (relation) => relation.value === rule.relation\n        )\n        return `${conditionTitle.text} ${relationTitle.text} ${rule.condition}`\n      }\n    },\n  },\n  data() {\n    return {\n      isFetching: false,\n      filter: {\n        product_type_ids: [],\n      },\n    }\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      fetchOrderMappingList: 'fetchOrderMappingList',\n      fetchProductTypes: 'fetchProductTypes',\n      deleteOrderMapping: 'deleteOrderMapping',\n    }),\n    ...mapMutations('orderMapping', {\n      updateStateOrderMappings: FETCH_ORDER_MAPPINGS,\n    }),\n    async init() {\n      this.isFetching = true\n      this.handleUpdateRouteQuery()\n      await Promise.all([\n        this.fetchOrderMappingList({\n          type: types.product_type,\n          payload: this.filter,\n        }),\n        this.fetchProductTypes(),\n      ])\n      this.isFetching = false\n    },\n    showConfirmDeleteMapping(item) {\n      this.$dialog.confirm({\n        title: `Delete product mapping?`,\n        message: `Are you sure you want to delete this product mapping?`,\n        confirmText: 'Delete',\n        onConfirm: () => this.deleteMapping(item),\n        type: 'danger',\n      })\n    },\n    async deleteMapping(item) {\n      this.isFetching = true\n      const response = await this.deleteOrderMapping({\n        type: types.product_type,\n        id: item.id,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was deleted',\n        })\n        this.fetchOrderMappingList({\n          type: types.product_type,\n          payload: this.filter,\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n      this.isFetching = false\n    },\n    editMapping(item) {\n      this.$router.push({\n        name: 'product-mapping-update',\n        params: { id: item.id },\n      })\n    },\n    addNewRule() {\n      this.$router.push({\n        name: 'product-mapping-_new',\n      })\n    },\n    onProductTypeSelect(val) {\n      this.filter.product_type_ids = val\n    },\n  },\n  beforeRouteLeave(to, from, next) {\n    this.updateStateOrderMappings([])\n    next()\n  },\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n",null]}