{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/OrderView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/OrderView.vue","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapActions } from 'vuex'\nimport { cloneDeep } from '@core/utils'\nimport { FETCH_ORDER, UPDATE_ORDER } from '@/packages/container/store/types'\nimport mixinFulfillment from '../mixins/fulfillment'\nimport mixinUpdateOrder from '../mixins/update-order'\nimport OrderItems from './components/OrderItems'\nimport ModalUpdateOrder from './components/ModalUpdateOrder'\nimport {\n  FETCH_PRODUCT_TYPES,\n  FETCH_PROVIDERS,\n  FETCH_COUNTRIES,\n} from '@/packages/shared/store'\nimport { ORDER_STATUS_CANCELED } from '@core/constants'\n\nexport default {\n  name: 'OrderView',\n  mixins: [mixinUpdateOrder, mixinFulfillment],\n  components: {\n    OrderItems,\n    ModalUpdateOrder,\n  },\n  computed: {\n    ...mapState('container', {\n      order: (state) => state.order,\n    }),\n    ...mapState('shared', {\n      productTypes: (state) => state.productTypes,\n      providers: (state) => state.providers,\n      countries: (state) => state.countries,\n    }),\n    ...mapState('design', {\n      designs: (state) => state.designs,\n    }),\n    shopId() {\n      return this.order ? this.order.shop_id : 0\n    },\n    orderId() {\n      return parseInt(this.$route.params.id, 10)\n    },\n  },\n  data() {\n    return {\n      editing: false,\n      isFetching: false,\n      isUpdating: false,\n      orderItems: [],\n      resultFetch: {},\n      resultUpdate: {},\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    ...mapActions('container', [FETCH_ORDER, UPDATE_ORDER, 'getLogs']),\n    ...mapActions('shared', [\n      FETCH_PRODUCT_TYPES,\n      FETCH_PROVIDERS,\n      FETCH_COUNTRIES,\n    ]),\n    ...mapActions('design', ['fetchDesigns']),\n\n    async init() {\n      const id = parseInt(this.$route.params.id, 10)\n\n      if (id < 1) {\n        return this.$router.push({ name: 'order-list' })\n      }\n\n      this.isFetching = true\n\n      const { r1 } = await Promise.all([this.fetchOrder(id)])\n\n      this.resultFetch = r1\n      this.isFetching = false\n    },\n\n    async handleUpdateOrder(order) {\n      this.isUpdating = true\n      this.resultUpdate = await this.updateOrder(\n        Object.assign({}, order || this.order, { order_items: this.orderItems })\n      )\n\n      if (this.resultUpdate && this.resultUpdate.success) {\n        this.$set(this, 'orderItems', cloneDeep(this.order.order_items))\n        this.editing = false\n        this.isVisibleEditOrder = false\n        this.init()\n        this.$toast.open({\n          type: 'success',\n          message: 'Cập nhập order item thành công',\n        })\n      } else {\n        this.$toast.open({ type: 'error', message: this.resultUpdate.message })\n      }\n\n      this.isUpdating = false\n    },\n\n    handleSelectedDesign({ url, item, design }) {\n      this.handleUpdateOrderItem(item, {\n        design,\n        design_id: design.id,\n        image: url,\n      })\n    },\n\n    handleSelectedProductType({ item, product }) {\n      this.handleUpdateOrderItem(item, {\n        product_type_id: product.id,\n        product_type: product,\n      })\n    },\n    handleUpdateOrderItem(item, newVal) {\n      const index = this.orderItems.findIndex(({ id }) => id === item.id)\n\n      if (index !== -1) {\n        this.editing = true\n        this.$set(this.orderItems, index, Object.assign({}, item, newVal))\n      }\n    },\n    toggleEditOrder() {\n      if (this.editing) {\n        this.$set(this, 'orderItems', cloneDeep(this.order.order_items))\n        this.editing = false\n      } else {\n        this.editing = true\n      }\n    },\n\n    confirmUpdateOrder(action) {\n      this.$dialog.confirm({\n        message: 'Are you sure you want to do this?',\n        onConfirm: () => this.onUpdateOrderActionConfirm(action),\n      })\n    },\n\n    async onUpdateOrderActionConfirm(action) {\n      const order = Object.assign({}, this.order)\n      switch (action) {\n        case 'canceled':\n          order.status = ORDER_STATUS_CANCELED\n          break\n      }\n\n      this.handleUpdateOrder(order)\n    },\n  },\n  watch: {\n    'order.order_items': function(val) {\n      this.$set(this, 'orderItems', cloneDeep(val))\n    },\n  },\n  filters: {\n    displayname: (order) => {\n      return order.full_name || `${order.first_name} ${order.last_name}`\n    },\n  },\n}\n",null]}