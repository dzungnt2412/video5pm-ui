{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/Accordion.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/Accordion.vue","mtime":1603898990376},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'Accordion',\n  props: {\n    initialOpenItem: {\n      required: false,\n      type: [Number, String],\n      default: null,\n    },\n    initialOpenItems: {\n      required: false,\n      type: Array,\n      default: null,\n      validator: (items) =>\n        Array.isArray(items) && !items.some((n) => typeof n !== 'number'),\n    },\n    caretAnimation: {\n      required: false,\n      type: Object,\n      default: () => ({\n        duration: '450ms',\n        timerFunc: 'ease',\n      }),\n      validator: (config) => {\n        const isValid =\n          (typeof config.duration === 'string' &&\n            typeof config.timerFunc === 'string') ||\n          config.none === true\n        return isValid\n      },\n    },\n    dropdown: {\n      required: false,\n      type: Boolean,\n      default: false,\n    },\n    icon: {\n      required: false,\n      type: String,\n      default: 'caret',\n      validator: (choice) => {\n        const isValid =\n          choice === 'caret' || choice === 'plus-minus' || choice === 'custom'\n        return isValid\n      },\n    },\n    slide: {\n      required: false,\n      type: Object,\n      default: () => ({\n        duration: '700ms',\n        timerFunc: 'ease',\n      }),\n      validator: (config) => {\n        const isValid =\n          typeof config.duration === 'string' &&\n          typeof config.timerFunc === 'string'\n        return isValid\n      },\n    },\n    expand: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  mounted() {\n    this.$on('child-registered', (child) => {\n      const id = this.getNextId()\n      child.setUniqueId(id)\n      this.children_toggle_status[id] = false\n    })\n    this.$on('child-clicked', this.handleChildClicked)\n    this.$on('child-removed', (child_id) => {\n      delete this.children_toggle_status[child_id]\n    })\n    this.$nextTick(() => {\n      this.openInitialItems(this.$children.length)\n    })\n  },\n  data() {\n    return {\n      next_id: 1,\n      children_toggle_status: {},\n    }\n  },\n  methods: {\n    getNextId() {\n      const v = this.next_id.toString(10)\n      this.next_id += 1\n      return v\n    },\n    handleChildClicked(child_id) {\n      if (!this.dropdown) {\n        for (const id in this.children_toggle_status) {\n          if (this.children_toggle_status[id] && id !== child_id) {\n            this.$emit('toggle-child', id)\n            this.children_toggle_status[id] = false\n          }\n        }\n      }\n      this.children_toggle_status[child_id] = !this.children_toggle_status[\n        child_id\n      ]\n      // this.$emit('toggle-child', child_id)\n    },\n    openInitialItems(items_length) {\n      const i = this.initialOpenItem\n      const is = this.initialOpenItems\n      if (i !== null) {\n        this.openInitialItem(i, items_length)\n      } else if (is !== null) {\n        is.forEach((item) => {\n          this.openInitialItem(item, items_length)\n        })\n      }\n    },\n    openInitialItem(item, items_length) {\n      const num_item = typeof item === 'number' ? item : parseInt(item, 10)\n      if (num_item > 0 && num_item <= items_length) {\n        this.handleChildClicked(String(num_item))\n      } else {\n        throw new Error(\n          `There are only ${items_length} AccordionItems, ${num_item} is out of bounds. [indexing from 1]`\n        )\n      }\n    },\n    handleToggleAll(newStatus) {\n      Object.keys(this.children_toggle_status).forEach((key) => {\n        const current = this.children_toggle_status[key]\n        this.children_toggle_status[key] = newStatus\n\n        if (current !== newStatus) {\n          this.$emit('toggle-child', key)\n        }\n      })\n    },\n  },\n  watch: {\n    expand(val) {\n      this.handleToggleAll(val)\n    },\n  },\n}\n",{"version":3,"sources":["Accordion.vue"],"names":[],"mappingsfile":"Accordion.vue","sourceRoot":"src/kit","sourcesContent":["<template>\n  <div class=\"accordion\">\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Accordion',\n  props: {\n    initialOpenItem: {\n      required: false,\n      type: [Number, String],\n      default: null,\n    },\n    initialOpenItems: {\n      required: false,\n      type: Array,\n      default: null,\n      validator: (items) =>\n        Array.isArray(items) && !items.some((n) => typeof n !== 'number'),\n    },\n    caretAnimation: {\n      required: false,\n      type: Object,\n      default: () => ({\n        duration: '450ms',\n        timerFunc: 'ease',\n      }),\n      validator: (config) => {\n        const isValid =\n          (typeof config.duration === 'string' &&\n            typeof config.timerFunc === 'string') ||\n          config.none === true\n        return isValid\n      },\n    },\n    dropdown: {\n      required: false,\n      type: Boolean,\n      default: false,\n    },\n    icon: {\n      required: false,\n      type: String,\n      default: 'caret',\n      validator: (choice) => {\n        const isValid =\n          choice === 'caret' || choice === 'plus-minus' || choice === 'custom'\n        return isValid\n      },\n    },\n    slide: {\n      required: false,\n      type: Object,\n      default: () => ({\n        duration: '700ms',\n        timerFunc: 'ease',\n      }),\n      validator: (config) => {\n        const isValid =\n          typeof config.duration === 'string' &&\n          typeof config.timerFunc === 'string'\n        return isValid\n      },\n    },\n    expand: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  mounted() {\n    this.$on('child-registered', (child) => {\n      const id = this.getNextId()\n      child.setUniqueId(id)\n      this.children_toggle_status[id] = false\n    })\n    this.$on('child-clicked', this.handleChildClicked)\n    this.$on('child-removed', (child_id) => {\n      delete this.children_toggle_status[child_id]\n    })\n    this.$nextTick(() => {\n      this.openInitialItems(this.$children.length)\n    })\n  },\n  data() {\n    return {\n      next_id: 1,\n      children_toggle_status: {},\n    }\n  },\n  methods: {\n    getNextId() {\n      const v = this.next_id.toString(10)\n      this.next_id += 1\n      return v\n    },\n    handleChildClicked(child_id) {\n      if (!this.dropdown) {\n        for (const id in this.children_toggle_status) {\n          if (this.children_toggle_status[id] && id !== child_id) {\n            this.$emit('toggle-child', id)\n            this.children_toggle_status[id] = false\n          }\n        }\n      }\n      this.children_toggle_status[child_id] = !this.children_toggle_status[\n        child_id\n      ]\n      // this.$emit('toggle-child', child_id)\n    },\n    openInitialItems(items_length) {\n      const i = this.initialOpenItem\n      const is = this.initialOpenItems\n      if (i !== null) {\n        this.openInitialItem(i, items_length)\n      } else if (is !== null) {\n        is.forEach((item) => {\n          this.openInitialItem(item, items_length)\n        })\n      }\n    },\n    openInitialItem(item, items_length) {\n      const num_item = typeof item === 'number' ? item : parseInt(item, 10)\n      if (num_item > 0 && num_item <= items_length) {\n        this.handleChildClicked(String(num_item))\n      } else {\n        throw new Error(\n          `There are only ${items_length} AccordionItems, ${num_item} is out of bounds. [indexing from 1]`\n        )\n      }\n    },\n    handleToggleAll(newStatus) {\n      Object.keys(this.children_toggle_status).forEach((key) => {\n        const current = this.children_toggle_status[key]\n        this.children_toggle_status[key] = newStatus\n\n        if (current !== newStatus) {\n          this.$emit('toggle-child', key)\n        }\n      })\n    },\n  },\n  watch: {\n    expand(val) {\n      this.handleToggleAll(val)\n    },\n  },\n}\n</script>\n"]}]}