{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/Upload/upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/Upload/upload.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FormElementMixin from '../../mixins/FormElement'\nimport { File } from '../../utils/ssr'\n\nexport default {\n  name: 'PUpload',\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: {\n      type: [Object, Function, File, Array],\n    },\n    multiple: Boolean,\n    disabled: Boolean,\n    accept: String,\n    dragDrop: Boolean,\n    type: {\n      type: String,\n      default: 'is-primary',\n    },\n    native: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      newValue: this.value,\n      dragDropFocus: false,\n      // eslint-disable-next-line\n      _elementRef: 'input',\n    }\n  },\n  watch: {\n    /**\n     * When v-model is changed:\n     *   1. Set internal value.\n     *   2. Reset input value if array is empty\n     *   3. If it's invalid, validate again.\n     */\n    value(value) {\n      this.newValue = value\n      if (\n        !this.newValue ||\n        (Array.isArray(this.newValue) && this.newValue.length === 0)\n      ) {\n        this.$refs.input.value = null\n      }\n      !this.isValid && !this.dragDrop && this.checkHtml5Validity()\n    },\n  },\n  methods: {\n    /**\n     * Listen change event on input type 'file',\n     * emit 'input' event and validate\n     */\n    onFileChange(event) {\n      if (this.disabled || this.loading) return\n      if (this.dragDrop) {\n        this.updateDragDropFocus(false)\n      }\n      const value = event.target.files || event.dataTransfer.files\n      if (value) {\n        if (value.length === 0) {\n          this.newValue = null\n        } else if (!this.multiple) {\n          // only one element in case drag drop mode and isn't multiple\n          if (this.dragDrop && value.length !== 1) return false\n          else {\n            const file = value[0]\n            if (this.checkType(file)) {\n              this.newValue = file\n            }\n          }\n        } else {\n          // always _new values if native or undefined local\n          if (this.native || !this.newValue) {\n            this.newValue = []\n          }\n          for (let i = 0; i < value.length; i++) {\n            const file = value[i]\n            if (this.checkType(file)) {\n              this.newValue.push(file)\n            }\n          }\n        }\n      }\n      this.$emit('input', this.newValue)\n      !this.dragDrop && this.checkHtml5Validity()\n    },\n\n    /**\n     * Listen drag-drop to update internal variable\n     */\n    updateDragDropFocus(focus) {\n      if (!this.disabled && !this.loading) {\n        this.dragDropFocus = focus\n      }\n    },\n\n    /**\n     * Check mime type of file\n     */\n    checkType(file) {\n      if (!this.accept) return true\n      const types = this.accept.split(',')\n      if (types.length === 0) return true\n      let valid = false\n      for (let i = 0; i < types.length && !valid; i++) {\n        const type = types[i].trim()\n        if (type) {\n          if (type.substring(0, 1) === '.') {\n            // check extension\n            const extIndex = file.name.lastIndexOf('.')\n            if (extIndex >= 0 && file.name.substring(extIndex) === type) {\n              valid = true\n            }\n          } else {\n            // check mime type\n            if (file.type.match(type)) {\n              valid = true\n            }\n          }\n        }\n      }\n      return valid\n    },\n  },\n}\n",{"version":3,"sources":["upload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgfile":"upload.vue","sourceRoot":"uikit/components/Upload","sourcesContent":["<template>\n  <label class=\"p-upload\">\n    <slot />\n    <input\n      ref=\"input\"\n      type=\"file\"\n      v-bind=\"$attrs\"\n      :multiple=\"multiple\"\n      :accept=\"accept\"\n      :disabled=\"disabled\"\n      @change=\"onFileChange\"\n    />\n  </label>\n</template>\n\n<script>\nimport FormElementMixin from '../../mixins/FormElement'\nimport { File } from '../../utils/ssr'\n\nexport default {\n  name: 'PUpload',\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: {\n      type: [Object, Function, File, Array],\n    },\n    multiple: Boolean,\n    disabled: Boolean,\n    accept: String,\n    dragDrop: Boolean,\n    type: {\n      type: String,\n      default: 'is-primary',\n    },\n    native: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      newValue: this.value,\n      dragDropFocus: false,\n      // eslint-disable-next-line\n      _elementRef: 'input',\n    }\n  },\n  watch: {\n    /**\n     * When v-model is changed:\n     *   1. Set internal value.\n     *   2. Reset input value if array is empty\n     *   3. If it's invalid, validate again.\n     */\n    value(value) {\n      this.newValue = value\n      if (\n        !this.newValue ||\n        (Array.isArray(this.newValue) && this.newValue.length === 0)\n      ) {\n        this.$refs.input.value = null\n      }\n      !this.isValid && !this.dragDrop && this.checkHtml5Validity()\n    },\n  },\n  methods: {\n    /**\n     * Listen change event on input type 'file',\n     * emit 'input' event and validate\n     */\n    onFileChange(event) {\n      if (this.disabled || this.loading) return\n      if (this.dragDrop) {\n        this.updateDragDropFocus(false)\n      }\n      const value = event.target.files || event.dataTransfer.files\n      if (value) {\n        if (value.length === 0) {\n          this.newValue = null\n        } else if (!this.multiple) {\n          // only one element in case drag drop mode and isn't multiple\n          if (this.dragDrop && value.length !== 1) return false\n          else {\n            const file = value[0]\n            if (this.checkType(file)) {\n              this.newValue = file\n            }\n          }\n        } else {\n          // always _new values if native or undefined local\n          if (this.native || !this.newValue) {\n            this.newValue = []\n          }\n          for (let i = 0; i < value.length; i++) {\n            const file = value[i]\n            if (this.checkType(file)) {\n              this.newValue.push(file)\n            }\n          }\n        }\n      }\n      this.$emit('input', this.newValue)\n      !this.dragDrop && this.checkHtml5Validity()\n    },\n\n    /**\n     * Listen drag-drop to update internal variable\n     */\n    updateDragDropFocus(focus) {\n      if (!this.disabled && !this.loading) {\n        this.dragDropFocus = focus\n      }\n    },\n\n    /**\n     * Check mime type of file\n     */\n    checkType(file) {\n      if (!this.accept) return true\n      const types = this.accept.split(',')\n      if (types.length === 0) return true\n      let valid = false\n      for (let i = 0; i < types.length && !valid; i++) {\n        const type = types[i].trim()\n        if (type) {\n          if (type.substring(0, 1) === '.') {\n            // check extension\n            const extIndex = file.name.lastIndexOf('.')\n            if (extIndex >= 0 && file.name.substring(extIndex) === type) {\n              valid = true\n            }\n          } else {\n            // check mime type\n            if (file.type.match(type)) {\n              valid = true\n            }\n          }\n        }\n      }\n      return valid\n    },\n  },\n}\n</script>\n"]}]}