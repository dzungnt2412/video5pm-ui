{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/order-mapping/views/ProductMappingForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/order-mapping/views/ProductMappingForm.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions, mapState } from 'vuex'\nimport { cloneDeep, isObjectDiff, asyncFilter } from '@core/utils'\nimport ConditionItem from './components/ConditionItem'\nimport { types } from '../constant'\nexport default {\n  name: 'ProductMappingForm',\n  components: {\n    ConditionItem,\n  },\n  data() {\n    return {\n      mode: 'new',\n      form: {\n        disjunctive: true,\n        product_type_id: null,\n        type: types.product_type,\n        rules: [\n          {\n            column: 'title',\n            relation: 'contain',\n            condition: '',\n          },\n        ],\n      },\n      initialForm: {},\n      isShowUnsavedBar: false,\n      isFetching: false,\n      isSaving: false,\n      isDeleting: false,\n    }\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      productMappingState: (state) => state.orderMapping,\n      products: (state) => state.productTypes,\n    }),\n    pageTitle() {\n      return this.mode === 'new'\n        ? 'Create product mapping rule'\n        : 'Update product mapping rule'\n    },\n  },\n  watch: {\n    form: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.initialForm)\n      },\n      deep: true,\n    },\n    initialForm: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.form)\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      createOrUpdateOrderMapping: 'createOrUpdateOrderMapping',\n      fetchOrderMapping: 'fetchOrderMapping',\n      deleteOrderMapping: 'deleteOrderMapping',\n      fetchProductTypes: 'fetchProductTypes',\n    }),\n    removeCondition(index) {\n      this.form.rules.splice(index, 1)\n    },\n    changeCondition(index, event) {\n      this.$set(this.form.rules, index, event)\n    },\n    addCondition() {\n      const rules = this.form.rules\n      rules.push({\n        ...rules[rules.length - 1],\n        condition: '',\n      })\n    },\n    async fetch() {\n      this.isFetching = true\n      const promises = [this.fetchProductTypes()]\n      if (this.$route.params.id && this.$route.params.id !== 'new') {\n        this.mode = 'edit'\n        promises.push(\n          this.fetchOrderMapping({\n            type: types.product_type,\n            id: +this.$route.params.id,\n          })\n        )\n      }\n      const [, res2] = await Promise.all(promises)\n      if (res2 && res2.success) {\n        this.form = cloneDeep(this.productMappingState)\n      }\n      this.initialForm = cloneDeep(this.form)\n      this.isFetching = false\n    },\n    discard() {\n      this.form = cloneDeep(this.initialForm)\n    },\n    showConfirmDelete() {\n      this.$dialog.confirm({\n        title: `Delete product mapping?`,\n        message: `Are you sure you want to delete this product mapping?`,\n        confirmText: 'Delete',\n        onConfirm: () => this.delete(),\n        type: 'danger',\n      })\n    },\n    async save() {\n      const validate = await this.$validator.validateAll()\n\n      let isConditionsValid = true\n      if (this.$refs.conditions && this.$refs.conditions.length) {\n        const filtered = await asyncFilter(this.$refs.conditions, async (c) => {\n          const isValid = await c.$validator.validateAll()\n          return isValid\n        })\n        isConditionsValid = filtered.length === this.$refs.conditions.length\n      }\n      if (!validate || !isConditionsValid) {\n        return\n      }\n\n      this.isSaving = true\n      if (this.mode === 'new') {\n        await this.create()\n      } else {\n        await this.update()\n      }\n      this.isSaving = false\n    },\n    async create() {\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.product_type,\n        payload: cloneDeep(this.form),\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was created',\n        })\n        this.$router.push({\n          name: 'product-mapping-update',\n          params: {\n            id: response.id,\n          },\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async update() {\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.product_type,\n        payload: cloneDeep(this.form),\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was updated',\n        })\n        await this.fetch()\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async delete() {\n      this.isDeleting = true\n      const response = await this.deleteOrderMapping({\n        type: types.product_type,\n        id: this.productMappingState.id,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was deleted',\n        })\n        this.$router.push({\n          name: 'product-mapping-list',\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n      this.isDeleting = false\n    },\n  },\n  created() {\n    this.fetch()\n  },\n}\n",{"version":3,"sources":["ProductMappingForm.vue"],"names":[],"mappingsfile":"ProductMappingForm.vue","sourceRoot":"src/packages/order-mapping/views","sourcesContent":["<template>\n  <PageDetailLoading v-if=\"isFetching\"></PageDetailLoading>\n  <div class=\"page\" v-else>\n    <UnsavedBar\n      :show=\"isShowUnsavedBar\"\n      :showDiscard=\"true\"\n      :loading=\"isSaving\"\n      @save=\"save\"\n      @discard=\"discard\"\n      title=\"Save\"\n    ></UnsavedBar>\n    <div class=\"page-header\">\n      <p-button icon=\"chevron-left\" class=\"btn-pure pl-0 mb-15\">\n        <router-link :to=\"{ name: 'product-mapping-list' }\">\n          Product mapping rules\n        </router-link>\n      </p-button>\n      <h1 class=\"page-title\">{{ pageTitle }}</h1>\n    </div>\n    <div class=\"page-content container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"card\">\n            <div class=\"card-block\">\n              <div class=\"d-flex mt-20\">\n                <span class=\"mr-15 mt-10\">Lionnix product</span>\n                <div class=\"form-group mb-0\">\n                  <p-select\n                    :class=\"[{ 'is-invalid': errors.has('product_type_id') }]\"\n                    v-model=\"form.product_type_id\"\n                    v-validate=\"'required'\"\n                    name=\"product_type_id\"\n                    placeholder=\"Select product\"\n                    style=\"width: 250px;\"\n                  >\n                    <option\n                      v-for=\"(item, i) in products\"\n                      :key=\"i\"\n                      :value=\"item.id\"\n                    >\n                      {{ item.name }}\n                    </option>\n                  </p-select>\n                  <div\n                    class=\"invalid-feedback\"\n                    v-if=\"errors.has('product_type_id')\"\n                  >\n                    Product type is required\n                  </div>\n                </div>\n              </div>\n              <div class=\"d-flex mt-15 align-items-center\">\n                <p class=\"m-0 mr-30\">Must match</p>\n                <p-radio\n                  class=\"mr-15\"\n                  v-model=\"form.disjunctive\"\n                  :native-value=\"true\"\n                >\n                  All conditions\n                </p-radio>\n                <p-radio v-model=\"form.disjunctive\" :native-value=\"false\">\n                  Any condition\n                </p-radio>\n              </div>\n              <div>\n                <condition-item\n                  v-for=\"(rule, index) in form.rules\"\n                  :condition=\"rule\"\n                  :key=\"index\"\n                  :disable-remove=\"index === 0\"\n                  @remove=\"removeCondition(index)\"\n                  @input=\"changeCondition(index, $event)\"\n                  type=\"product_type\"\n                  ref=\"conditions\"\n                />\n                <div class=\"row\">\n                  <div class=\"col-12 mt-2\">\n                    <p-button\n                      type=\"default\"\n                      class=\"mt-2\"\n                      @click.prevent=\"addCondition\"\n                    >\n                      Add new condition\n                    </p-button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"d-flex justify-content-between\">\n            <p-button\n              type=\"danger\"\n              @click=\"showConfirmDelete\"\n              @disabled=\"isDeleting\"\n              :loading=\"isDeleting\"\n              v-if=\"productMappingState.id\"\n            >\n              Delete\n            </p-button>\n            <div v-else></div>\n            <div class=\"d-flex\">\n              <p-button type=\"default\" @click=\"discard\">\n                Cancel\n              </p-button>\n              <p-button\n                class=\"ml-15\"\n                @click=\"save\"\n                :disabled=\"isSaving\"\n                :loading=\"isSaving\"\n              >\n                Save\n              </p-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapState } from 'vuex'\nimport { cloneDeep, isObjectDiff, asyncFilter } from '@core/utils'\nimport ConditionItem from './components/ConditionItem'\nimport { types } from '../constant'\nexport default {\n  name: 'ProductMappingForm',\n  components: {\n    ConditionItem,\n  },\n  data() {\n    return {\n      mode: 'new',\n      form: {\n        disjunctive: true,\n        product_type_id: null,\n        type: types.product_type,\n        rules: [\n          {\n            column: 'title',\n            relation: 'contain',\n            condition: '',\n          },\n        ],\n      },\n      initialForm: {},\n      isShowUnsavedBar: false,\n      isFetching: false,\n      isSaving: false,\n      isDeleting: false,\n    }\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      productMappingState: (state) => state.orderMapping,\n      products: (state) => state.productTypes,\n    }),\n    pageTitle() {\n      return this.mode === 'new'\n        ? 'Create product mapping rule'\n        : 'Update product mapping rule'\n    },\n  },\n  watch: {\n    form: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.initialForm)\n      },\n      deep: true,\n    },\n    initialForm: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.form)\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      createOrUpdateOrderMapping: 'createOrUpdateOrderMapping',\n      fetchOrderMapping: 'fetchOrderMapping',\n      deleteOrderMapping: 'deleteOrderMapping',\n      fetchProductTypes: 'fetchProductTypes',\n    }),\n    removeCondition(index) {\n      this.form.rules.splice(index, 1)\n    },\n    changeCondition(index, event) {\n      this.$set(this.form.rules, index, event)\n    },\n    addCondition() {\n      const rules = this.form.rules\n      rules.push({\n        ...rules[rules.length - 1],\n        condition: '',\n      })\n    },\n    async fetch() {\n      this.isFetching = true\n      const promises = [this.fetchProductTypes()]\n      if (this.$route.params.id && this.$route.params.id !== 'new') {\n        this.mode = 'edit'\n        promises.push(\n          this.fetchOrderMapping({\n            type: types.product_type,\n            id: +this.$route.params.id,\n          })\n        )\n      }\n      const [, res2] = await Promise.all(promises)\n      if (res2 && res2.success) {\n        this.form = cloneDeep(this.productMappingState)\n      }\n      this.initialForm = cloneDeep(this.form)\n      this.isFetching = false\n    },\n    discard() {\n      this.form = cloneDeep(this.initialForm)\n    },\n    showConfirmDelete() {\n      this.$dialog.confirm({\n        title: `Delete product mapping?`,\n        message: `Are you sure you want to delete this product mapping?`,\n        confirmText: 'Delete',\n        onConfirm: () => this.delete(),\n        type: 'danger',\n      })\n    },\n    async save() {\n      const validate = await this.$validator.validateAll()\n\n      let isConditionsValid = true\n      if (this.$refs.conditions && this.$refs.conditions.length) {\n        const filtered = await asyncFilter(this.$refs.conditions, async (c) => {\n          const isValid = await c.$validator.validateAll()\n          return isValid\n        })\n        isConditionsValid = filtered.length === this.$refs.conditions.length\n      }\n      if (!validate || !isConditionsValid) {\n        return\n      }\n\n      this.isSaving = true\n      if (this.mode === 'new') {\n        await this.create()\n      } else {\n        await this.update()\n      }\n      this.isSaving = false\n    },\n    async create() {\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.product_type,\n        payload: cloneDeep(this.form),\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was created',\n        })\n        this.$router.push({\n          name: 'product-mapping-update',\n          params: {\n            id: response.id,\n          },\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async update() {\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.product_type,\n        payload: cloneDeep(this.form),\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was updated',\n        })\n        await this.fetch()\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async delete() {\n      this.isDeleting = true\n      const response = await this.deleteOrderMapping({\n        type: types.product_type,\n        id: this.productMappingState.id,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your product mapping was deleted',\n        })\n        this.$router.push({\n          name: 'product-mapping-list',\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n      this.isDeleting = false\n    },\n  },\n  created() {\n    this.fetch()\n  },\n}\n</script>\n"]}]}