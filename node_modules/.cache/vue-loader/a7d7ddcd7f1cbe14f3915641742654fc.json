{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/ContainerView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/ContainerView.vue","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*eslint-disable*/\nimport { mapState, mapActions } from 'vuex'\nimport { VclTable } from 'vue-content-loading'\nimport { cloneDeep } from '@core/utils'\nimport { ORDER_STATUS_CANCELED, ORDER_STATUS_PAID } from '@core/constants'\nimport mixinRoute from '@core/mixins/route'\nimport mixinTable from '@core/mixins/table'\nimport {\n  FETCH_CONTAINER,\n  FETCH_ORDERS,\n  FETCH_ORDER,\n  UPDATE_ORDER,\n} from '@/packages/container/store/types'\nimport mixinUpdateOrder from '../mixins/update-order'\nimport { Pagination } from '@kit'\nimport Accordion from '@kit/Accordion'\nimport AccordionItem from '@kit/AccordionItem'\nimport { formatPrice } from '@core/utils/formatter'\nimport {\n  FETCH_PRODUCT_TYPES,\n  FETCH_USERS_BY_ROLE,\n} from '@/packages/shared/store'\nimport Thumbnail from '@components/shared/Thumbnail'\nimport mixinContainer from '../mixins/container'\nimport { ORDER_STATUS } from '../constants'\nimport StatusTab from '@components/shared/StatusTab'\nimport OrderItems from './components/OrderItems'\nimport ModalUpdateOrdersWrong from './components/ModalUpdateOrdersWrong'\nimport ModalUpdateOrder from './components/ModalUpdateOrder'\n\nexport default {\n  name: 'ContainerView',\n  mixins: [mixinRoute, mixinTable, mixinContainer, mixinUpdateOrder],\n  components: {\n    StatusTab,\n    Thumbnail,\n    OrderItems,\n    Accordion,\n    AccordionItem,\n    ModalUpdateOrdersWrong,\n    ModalUpdateOrder,\n    Pagination,\n    VclTable,\n  },\n  computed: {\n    ...mapState('container', {\n      container: (state) => state.container,\n      currentOrders: (state) => state.orders,\n      count: (state) => state.orderCount,\n      order: (state) => state.order,\n      consignments: (state) => state.consignments,\n    }),\n    ...mapState('shared', {\n      productTypes: (state) => state.productTypes,\n      supplierUsers: (state) => state.users,\n    }),\n    ...mapState('design', {\n      designs: (state) => state.designs,\n    }),\n\n    containerId() {\n      return parseInt(this.$route.params.id, 10)\n    },\n\n    isVisibleStatisticSection() {\n      const status = ['pending', 'draft', 'canceled']\n      return (\n        this.statisticsProductBases &&\n        this.statisticsProductBases.length &&\n        status.indexOf(this.order.status) === -1\n      )\n    },\n\n    wrongOrders() {\n      return this.orders.filter(\n        ({ id }) => this.wrongOrderIds.indexOf(id) !== -1\n      )\n    },\n\n    isVisibleActions() {\n      return this.container && this.container.status !== ORDER_STATUS_CANCELED\n    },\n\n    shopId() {\n      return this.container && this.container.shop ? this.container.shop.id : 0\n    },\n\n    user() {\n      return this.container.shop && this.container.shop.user\n        ? this.container.shop.user\n        : {}\n    },\n    statisticsProductBases() {\n      return this.container && this.container.product_bases\n        ? this.container.product_bases.filter((item) => item.id)\n        : []\n    },\n    orderStatus() {\n      return ORDER_STATUS\n    },\n    statisticTotalShippingFees() {\n      return this.statisticsProductBases\n        ? this.statisticsProductBases.reduce(\n            (total, item) => total + item.shipping_fee * item.qty,\n            0\n          )\n        : 0\n    },\n    statisticTotalAmount() {\n      return this.statisticsProductBases\n        ? this.statisticsProductBases.reduce(\n            (amount, item) => amount + item.price * item.qty,\n            0\n          )\n        : 0\n    },\n    items() {\n      const items = []\n      this.orders.forEach((order) => {\n        order.order_items.forEach((item) => {\n          items.push({\n            id: item.id,\n            order_id: item.order_id,\n            consignment_id: item.consignment_id,\n            name: item.name,\n            image: item.image,\n            sku: item.sku,\n            product_type: item.product_type,\n            price: item.price,\n            quantity: item.quantity,\n            attribute: item.attribute,\n            shipping_method: order.shipping_method,\n            shipping_fee: item.shipping_fee,\n            order_status: item.shipping_fee,\n          })\n        })\n      })\n\n      return items\n    },\n  },\n  data() {\n    return {\n      isFetching: true,\n      isOrderFetching: true,\n      isOrdersFetching: true,\n      resultFetchOrder: {},\n      isVisibleSelectSupplier: false,\n      isSupplierAssigning: false,\n      isExpandOrders: false,\n      orders: [],\n      isVisibleUpdateOrder: false,\n      isVisibleUpdateOrdersWrong: false,\n      isOrderUpdating: false,\n      wrongOrderIds: [],\n      updateOrderIds: [],\n      isVisibleAppendConsignment: false,\n      isVisibleUpdateOrderStatus: false,\n      styleTable: 0,\n    }\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n    this.init()\n  },\n  methods: {\n    ...mapActions('container', [\n      FETCH_CONTAINER,\n      FETCH_ORDERS,\n      FETCH_ORDER,\n      UPDATE_ORDER,\n    ]),\n    ...mapActions('design', ['fetchDesigns']),\n    ...mapActions('shared', [FETCH_PRODUCT_TYPES, FETCH_USERS_BY_ROLE]),\n    formatPrice,\n\n    async init() {\n      await Promise.all([this.handleFetchContainer(), this.handleFetchOrders()])\n    },\n\n    async handleFetchContainer() {\n      this.isFetching = true\n      const result = await this.fetchContainer(this.containerId)\n\n      if (!result.success) {\n        this.$toast.open({ message: result.message, type: 'error' })\n      }\n\n      this.isFetching = false\n    },\n\n    async handleFetchOrders() {\n      this.isExpandOrders = false\n      this.isOrdersFetching = true\n      this.handleUpdateRouteQuery()\n      this.resultFetchOrder = await this.fetchOrders(\n        Object.assign({ container_id: this.containerId }, this.filter)\n      )\n      this.isExpandOrders = true\n      this.isOrdersFetching = false\n    },\n\n    async handleFetchOrder(orderId) {\n      this.isOrderFetching = true\n      const result = await this.fetchOrder(orderId)\n\n      if (result.success) {\n        this.handleVisibleModalUpdateOrder()\n      } else {\n        this.$toast.open({ type: 'error', message: result.message })\n      }\n    },\n\n    handleSelectedDesign({ url, orderId, design, item }) {\n      this.handleUpdateOrderItem(orderId, item, {\n        design_id: design.id,\n        design,\n        image: url,\n      })\n    },\n\n    handleUpdateOrderItem(orderId, item, val) {\n      const index = this.orders.findIndex(({ id }) => id === orderId)\n\n      if (index === -1) {\n        return\n      }\n\n      const orderItems = this.orders[index].order_items\n      const indexItem = orderItems.findIndex(({ id }) => id === item.id)\n\n      if (indexItem !== -1) {\n        const newVal = Object.assign({}, orderItems[indexItem], val)\n        this.$set(this.orders[index].order_items, indexItem, newVal)\n        this.isVisibleUpdateOrder = true\n        this.updateOrderIds.push(orderId)\n      }\n    },\n\n    /**\n     * Handle update multiple orders\n     * @param exceptSuccess\n     * @return {Promise<void>}\n     */\n    async handleUpdateOrders(exceptSuccess = false) {\n      const orders = []\n      this.orders.forEach((order) => {\n        if (\n          this.updateOrderIds.indexOf(order.id) !== -1 &&\n          (!exceptSuccess || this.wrongOrderIds.indexOf(order.id) !== -1)\n        ) {\n          orders.push(order)\n        }\n      })\n\n      if (!orders.length) {\n        return\n      }\n\n      const promises = []\n      orders.forEach((order) => {\n        promises.push(this.updateOrder(order))\n      })\n\n      this.isOrderUpdating = true\n      let result = await Promise.all(promises)\n      this.isOrderUpdating = false\n\n      // Result\n      if (result && Array.isArray(result)) {\n        const wrongOrderIds = result\n          .filter(({ success }) => success === false)\n          .map(({ id }) => id)\n\n        if (wrongOrderIds.length === 0) {\n          this.updateOrderIds = []\n          this.wrongOrderIds = []\n          this.isVisibleUpdateOrdersWrong = false\n          this.isVisibleUpdateOrder = false\n          await this.handleFetchOrders()\n          await this.handleFetchContainer()\n          this.$toast.open({\n            type: 'success',\n            message: 'Cập nhập order thành công',\n          })\n          return\n        }\n\n        this.isVisibleUpdateOrdersWrong = true\n        this.wrongOrderIds = wrongOrderIds\n      }\n    },\n\n    async handleUpdateOrder(order) {\n      const payload = cloneDeep(order)\n      delete payload.order_items\n      this.isOrderUpdating = true\n      this.resultUpdate = await this.updateOrder(payload)\n\n      if (this.resultUpdate && this.resultUpdate.success) {\n        this.isOrderUpdating = false\n        this.isVisibleEditOrder = false\n        await this.handleFetchContainer()\n        this.$toast.open({\n          type: 'success',\n          message: 'Cập nhập order item thành công',\n        })\n        return\n      }\n\n      this.$toast.open({ type: 'error', message: this.resultUpdate.message })\n      this.isOrderUpdating = false\n    },\n\n    getOrderTitle(order) {\n      let title = `| ${order.country_code} | ${order.shipping_method}`\n\n      if (order.fulfillments.length) {\n        const items = order.fulfillments.map((item) => {\n          return item.tracking_number\n        })\n\n        title += ` | ${items.toString()}`\n      }\n\n      return title\n    },\n\n    toggleOpen(action) {\n      this.isExpandOrders = action === 'expand'\n    },\n  },\n  watch: {\n    currentOrders: {\n      handler: function(val) {\n        if (val) {\n          this.orders = cloneDeep(val)\n        }\n      },\n      immediate: true,\n    },\n    filter: {\n      handler: function() {\n        this.handleFetchOrders()\n      },\n      immediate: true,\n      deep: true,\n    },\n  },\n}\n",null]}