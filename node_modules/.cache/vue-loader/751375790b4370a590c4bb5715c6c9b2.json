{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/OrderList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/OrderList.vue","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { truncate } from '@core/utils/string'\nimport { VclTable } from 'vue-content-loading'\nimport { mapState, mapActions } from 'vuex'\nimport { ORDER_STATUS_PENDING } from '@core/constants'\nimport Browser from '@core/helpers/browser'\nimport mixinRoute from '@core/mixins/route'\nimport mixinTable from '@core/mixins/table'\nimport mixinExportOrder from '@/packages/container/mixins/export-file'\nimport {\n  CREATE_CONTAINER,\n  FETCH_ORDERS,\n  IMPORT_ORDERS,\n  PREVIEW_IMPORT_ORDERS,\n  FETCH_CONTAINERS,\n  EXPORT_ORDERS,\n} from '../store/types'\nimport { ORDER_STATUS } from '../constants'\nimport EmptySearchResult from '@components/shared/EmptySearchResult'\nimport Thumbnail from '@components/shared/Thumbnail'\nimport ModalImport from '@components/shared/modal/ModalImport'\nimport StatusTab from '@components/shared/StatusTab'\nimport ModalCreateOrAppendContainer from './components/ModalCreateOrAppendContainer'\nimport ModalPreviewImportOrder from './components/ModalPreviewImportOrder'\nimport shippings from '@/packages/shared/data/shippings'\nimport { ORDER_EXPORT_BUCKET } from '@core/constants/storage'\n\nexport default {\n  name: 'OrderList',\n  mixins: [mixinRoute, mixinTable, mixinExportOrder],\n  components: {\n    Thumbnail,\n    ModalImport,\n    ModalCreateOrAppendContainer,\n    ModalPreviewImportOrder,\n    StatusTab,\n    VclTable,\n    EmptySearchResult,\n  },\n  filters: {\n    shippingName(value) {\n      if (value) {\n        return shippings[value] || ''\n      }\n      return ''\n    },\n    trackingNumbers(value) {\n      if (!value) {\n        return\n      }\n\n      const items = value.map((item) => {\n        return item.tracking_number\n      })\n\n      return items.toString()\n    },\n  },\n  computed: {\n    ...mapState('container', {\n      count: (state) => state.orderCount,\n      orders: (state) => state.orders,\n      containers: (state) => state.containers,\n    }),\n    orderStatus() {\n      return ORDER_STATUS\n    },\n    availableCreateContainerOrders() {\n      if (!this.action.selected || !this.action.selected.length) {\n        return []\n      }\n\n      let orders = this.action.selected\n      return orders.filter(\n        ({ status, container_id }) =>\n          container_id < 1 && status === ORDER_STATUS_PENDING\n      )\n    },\n    items() {\n      return this.orders\n    },\n    imagePlaceholder() {\n      return require('@assets/img/image-placeholder.png')\n    },\n  },\n  data() {\n    return {\n      isFetching: true,\n      result: {},\n      actions: {\n        delete: {\n          title: 'Delete',\n          isNeedConfirm: false,\n        },\n        process: {\n          title: 'Process',\n        },\n        cancel: {\n          title: 'Cancel',\n          isNeedConfirm: true,\n        },\n      },\n      filter: {\n        search: '',\n        limit: 20,\n        status: '',\n      },\n      isVisibleImport: false,\n      isUploading: false,\n      isImporting: false,\n      orderItems: [],\n      file: null,\n      isVisiblePreview: false,\n      resultImport: {},\n      isVisibleCreateOrderAppendContainer: false,\n      isContainerCreating: false,\n      importOrder: {\n        create_container: true,\n        file: null,\n      },\n      importOrderErrors: {},\n      createContainerErrors: {},\n    }\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n  },\n  methods: {\n    truncate,\n    ...mapActions('container', [\n      FETCH_ORDERS,\n      IMPORT_ORDERS,\n      PREVIEW_IMPORT_ORDERS,\n      CREATE_CONTAINER,\n      FETCH_CONTAINERS,\n      EXPORT_ORDERS,\n    ]),\n\n    async init() {\n      this.isFetching = true\n      const { container_id: id } = this.$route.query\n\n      if (id) {\n        this.$set(this.filter, 'container_id', parseInt(id, 10))\n      }\n\n      this.handleUpdateRouteQuery()\n      this.result = await this.fetchOrders(this.filter)\n      this.isFetching = false\n    },\n\n    async handleActionItem() {\n      if (this.action.current === 'process') {\n        this.isVisibleCreateOrderAppendContainer = true\n        return\n      }\n\n      if (this.action.current === 'cancel') {\n        this.handleRejectOrders(this.action.item, 'canceled')\n      }\n    },\n\n    async handleCreateContainer({ ids, containerId }) {\n      this.createContainerErrors.shop = ''\n      this.isContainerCreating = true\n      const payload = { order_ids: ids }\n\n      if (containerId) {\n        payload.container_id = containerId\n      }\n\n      const result = await this.createContainer(payload)\n      this.isContainerCreating = false\n\n      if (!result.success) {\n        this.$toast.open({ type: 'error', message: result.message })\n        return\n      }\n\n      if (containerId) {\n        await this.init()\n        this.$toast.open({\n          type: 'success',\n          message: `Thêm đơn hàng vào delivery order ${containerId} thành công`,\n        })\n        this.isVisibleCreateOrderAppendContainer = false\n        return\n      }\n\n      this.$toast.open({\n        type: 'success',\n        message: 'Delivery order đã được tạo thành công',\n      })\n      this.$router.push({ name: 'container-view', params: { id: result.id } })\n    },\n\n    async handleImportOrder(file) {\n      this.importOrder.file = file\n\n      if (!this.validateImportOrder()) {\n        return\n      }\n\n      this.importOrder.file = file\n      this.isUploading = true\n      this.resultImport = await this.importOrders({\n        file: this.importOrder.file,\n        shop_id: this.importOrder.shop_id,\n      })\n\n      this.isVisibleImport = false\n      this.isVisiblePreview = true\n\n      if (this.resultImport && this.resultImport.success) {\n        this.isUploading = false\n        return\n      }\n\n      this.$toast.open({\n        type: 'error',\n        message: this.resultImport.message || 'File không đúng định dạng',\n      })\n      this.isUploading = false\n    },\n\n    async handleImportFile() {\n      const payload = {\n        file_url: this.resultPreview.file_url,\n        total_order: this.resultPreview.total_order,\n        create_container: this.importOrder.create_container,\n      }\n\n      this.isImporting = true\n      this.resultImport = await this.importOrders(payload)\n\n      if (this.resultImport && this.resultImport.success) {\n        if (this.resultImport.container_id) {\n          this.$toast.open({\n            type: 'success',\n            message: 'Thêm đơn hàng thành công',\n          })\n          this.$router.push({\n            name: 'container-view',\n            params: { id: this.resultImport.container_id },\n          })\n          return\n        }\n\n        this.handleResetImportFile()\n        this.isVisiblePreview = false\n        this.isImporting = false\n        this.$dialog.alert({\n          title: 'Import orders',\n          message:\n            'Chúng tôi hiện đang import lên hệ thống. Điều này sẽ mất ít thời gian. Một email sẽ được gửi cho bạn sau khi quá trình import hoàn tất.',\n        })\n        return\n      }\n\n      this.$toast.open({\n        type: 'error',\n        message: this.resultImport.message,\n      })\n    },\n\n    handleResetImportFile() {\n      this.$set(this, 'resultPreview', {})\n      this.file = null\n      this.isVisiblePreview = false\n    },\n\n    handleCloseImportFile() {\n      this.file = null\n      this.isVisibleImport = false\n    },\n\n    visibleImportModal() {\n      this.isVisibleImport = true\n    },\n\n    importTrackingSuccessful() {\n      return this.init()\n    },\n\n    validateImportOrder() {\n      this.$set(\n        this.importOrderErrors,\n        'file',\n        !this.importOrder.file ? '*Chưa có file' : ''\n      )\n\n      return !Object.values(this.importOrderErrors).filter(Boolean).length\n    },\n\n    async handleExportOrders() {\n      const result = await this.exportOrders(this.selectedIds)\n      this.exportFile(result, `orders.csv`, ORDER_EXPORT_BUCKET)\n    },\n\n    getSKU(order) {\n      if (order && order.order_items) {\n        return order.order_items\n          .map(({ sku }) => sku)\n          .filter((sku) => sku)\n          .join(', ')\n      }\n    },\n  },\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n",null]}