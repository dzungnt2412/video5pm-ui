{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/ticket/views/Form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/ticket/views/Form.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapActions } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport debounce from 'lodash/debounce'\nimport mixinUpload from '@/core/mixins/upload'\nimport mixinTicket from '../mixins/ticket'\n\nexport default {\n  name: 'TicketForm',\n  mixins: [mixinRoute, mixinUpload, mixinTicket],\n  data() {\n    return {\n      isChange: false,\n      selected: '',\n      isSubmiting: false,\n      isLoading: false,\n      limit: 10,\n      shopId: 0,\n      result: {},\n      form: {\n        subject: '',\n        content: '',\n        category: '',\n        object_id: 0,\n        urls: [],\n      },\n    }\n  },\n  mounted() {\n    this.fetchCategories()\n    if (!this.orders || !this.orders.length) {\n      this.handleSearchOrders()\n    }\n  },\n  computed: {\n    ...mapState('container', {\n      orders: (state) => state.orders,\n    }),\n    ...mapState('ticket', {\n      categories: (state) => state.categories,\n    }),\n\n    ...mapState('shop', {\n      shops: (state) => state.shops,\n    }),\n\n    items() {\n      const items = this.orders.map((item) => {\n        return {\n          id: item.id,\n          text: item.ref_id,\n        }\n      })\n      return items\n    },\n    isClosed() {\n      return this.ticket.status === 'closed'\n    },\n  },\n  methods: {\n    ...mapActions('ticket', ['createTicket', 'fetchCategories']),\n    ...mapActions('container', ['fetchOrders']),\n\n    handleSearchOrders: debounce(async function(search = '') {\n      if (this.shopId < 1) {\n        return\n      }\n\n      this.isLoading = true\n      const result = await this.fetchOrders({\n        limit: this.limit,\n        search: search,\n        shop_id: this.shopId,\n      })\n      this.isLoading = false\n\n      if (result && result.success) {\n        return\n      }\n\n      this.$toast.open({ type: 'error', message: result.message })\n    }, 500),\n\n    async handlerCreateTicket() {\n      this.form.urls = this.files.map((item) => item.url)\n      const validate = await this.$validator.validateAll()\n      if (!validate) {\n        return\n      }\n\n      const result = await this.createTicket(this.form)\n\n      if (result.success) {\n        this.clearFrom()\n        this.$router.push({ name: 'ticket-view', params: { id: result.id } })\n      } else {\n        this.$toast.open({ type: 'error', message: result.message })\n      }\n    },\n\n    customLabel({ text }) {\n      return typeof text !== 'undefined' ? `${text}` : ''\n    },\n\n    handleSelect(item) {\n      this.form.object_id = item && item.id ? item.id : 0\n    },\n\n    handleRemove() {\n      this.form.object_id = 0\n    },\n\n    clearFrom() {\n      this.files = []\n      this.form = {\n        subject: '',\n        content: '',\n        category: '',\n        object_id: 0,\n        urls: null,\n      }\n    },\n\n    showDeleteConfirmation(item) {\n      this.$dialog.confirm({\n        title: `Xác nhận xóa file đính kèm?`,\n        message: `Bạn có chắc chắn muốn xóa file đính kèm này?`,\n        confirmText: 'Xóa',\n        onConfirm: () => this.handleDeleteImage(item),\n        type: 'danger',\n      })\n    },\n  },\n  watch: {\n    shopId: function() {\n      this.handleSearchOrders()\n    },\n  },\n}\n",null]}