{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/ticket/views/View.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/ticket/views/View.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapActions, mapMutations } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport ModalImage from './components/ModalImage'\nimport mixinTicket from '../mixins/ticket'\nimport mixinUpload from '@/core/mixins/upload'\nimport Browser from '@core/helpers/browser'\nimport { cloneDeep } from '@core/utils'\nexport default {\n  name: 'TicketView',\n  mixins: [mixinRoute, mixinUpload, mixinTicket],\n  components: { ModalImage },\n  data() {\n    return {\n      isChange: false,\n      isHideReply: true,\n      isMessageSending: false,\n      isFetching: false,\n      imageZoomImage: '',\n      isZoomImage: false,\n      result: {},\n      filter: {\n        page: 1,\n        limit: 50,\n      },\n      form: {\n        ticket_id: 0,\n        message: '',\n        urls: [],\n      },\n      attach_files: [],\n    }\n  },\n  computed: {\n    ...mapState('auth', {\n      auth: (state) => state.user,\n    }),\n    ...mapState('ticket', {\n      ticket: (state) => state.ticket,\n      messages: (state) => state.messages,\n      count: (state) => state.count,\n    }),\n    createrName() {\n      if (this.ticket.creater) {\n        return this.ticket.creater.ful_name || this.ticket.creater.username\n      }\n\n      return 'Undefined'\n    },\n\n    ticketID() {\n      return parseInt(this.$route.params.id, 10)\n    },\n\n    isClosed() {\n      return this.ticket.status === 'closed'\n    },\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n    this.init()\n  },\n  methods: {\n    ...mapActions('ticket', [\n      'fetchTicket',\n      'fetchTicketFile',\n      'fetchTicketMessages',\n      'pushMessage',\n      'closeTicket',\n      'fetchTicketStatictis',\n    ]),\n    ...mapMutations(['updateTicketMessage']),\n    async init() {\n      await Promise.all([\n        this.handlerFetchTicket(),\n        this.handlerFetchTicketMessages(),\n      ])\n\n      if (this.ticket.status === 'closed') {\n        this.isHideReply = false\n      }\n      if (this.ticket.attach_files) {\n        this.$set(this, 'attach_files', cloneDeep(this.ticket.attach_files))\n      }\n\n      this.getTicketFiles()\n    },\n    async getTicketFile(url, isFile) {\n      let result\n\n      this.isFetching = true\n      try {\n        const payload = {\n          url: url,\n          type: 'tickets',\n        }\n        result = await this.fetchTicketFile(payload)\n\n        if (!result.success) {\n          this.$toast.open({ type: 'error', message: `Download failed ! ` })\n          return false\n        }\n      } catch (e) {\n        this.$toast.open({ type: 'error', message: `Download failed !` })\n      }\n      this.isFetching = false\n\n      if (isFile) {\n        Browser.downloadBlob(result.blob, url.split('/').pop())\n      } else {\n        return window.URL.createObjectURL(result.blob)\n      }\n    },\n    getTicketFiles() {\n      if (!this.attach_files.length) return false\n      this.attach_files.forEach(async (el, i) => {\n        if (this.isImage(el)) {\n          let result = this.getTicketFile(el, false)\n          result.then((response) => {\n            this.$set(this.attach_files, i, {\n              url: el,\n              blob: response,\n            })\n          })\n        }\n      })\n    },\n    async handlerFetchTicket() {\n      await this.fetchTicket(this.ticketID)\n    },\n\n    async handlerFetchTicketMessages() {\n      this.isFetching = true\n      await this.fetchTicketMessages(this.ticketID, this.filter)\n      this.messages.forEach((el, index) => {\n        let files = el.attach_files\n        if (!files) {\n          return\n        }\n        files.forEach((file, i) => {\n          if (this.isImage(file)) {\n            let result = this.getTicketFile(file, false)\n            result.then(\n              function(response) {\n                this.messages[index].attach_files[i] = {\n                  url: file,\n                  blob: response,\n                }\n                this.$store.commit(\n                  'ticket/updateTicketMessage',\n                  cloneDeep(this.messages)\n                )\n              }.bind(this)\n            )\n          }\n        })\n      })\n      this.isFetching = false\n    },\n\n    async handlerPushMessage() {\n      this.form.urls = this.files.map((item) => item.url)\n      const validate = await this.$validator.validateAll()\n      if (!validate) {\n        return\n      }\n\n      this.form.ticket_id = this.ticketID\n\n      this.isMessageSending = true\n      const result = await this.pushMessage(this.form)\n\n      if (result && result.success) {\n        this.handlerFetchTicketMessages()\n        if (this.ticket.status === 'closed') {\n          this.handlerFetchTicket()\n          await this.fetchTicketStatictis()\n        }\n        this.clearFrom()\n        this.$toast.open({\n          type: 'success',\n          message: 'Gửi tin thành công',\n        })\n      } else {\n        this.$toast.open({ type: 'error', message: result.message })\n      }\n      this.isMessageSending = false\n    },\n\n    clearFrom() {\n      this.files = []\n      this.form = {\n        ticket_id: 0,\n        message: '',\n        urls: [],\n      }\n    },\n\n    zoomImage(src) {\n      this.isZoomImage = true\n      this.imageZoomImage = src\n    },\n\n    showDeleteConfirmation(item) {\n      this.$dialog.confirm({\n        title: `Xác nhận xóa file đính kèm?`,\n        message: `Bạn có chắc chắn muốn xóa file đính kèm này?`,\n        confirmText: 'Xóa',\n        onConfirm: () => this.handleDeleteImage(item),\n        type: 'danger',\n      })\n    },\n\n    handlerForword(staff) {\n      const idx = this.ticket.staffs.find((item) => item.staff_id == staff.id)\n      if (idx) {\n        this.$toast.open({\n          type: 'warning',\n          message: `Ticket đã được chuyển tiếp cho ${staff.full_name ||\n            staff.username}`,\n        })\n        return\n      }\n      this.$dialog.confirm({\n        title: `Chuyển tiếp ticket`,\n        message: `Bạn muốn chuyển tiếp ticket cho ${staff.full_name ||\n          staff.username}`,\n        confirmText: 'Xác nhận',\n        onConfirm: () => {\n          this.handlerForward('', staff.id)\n        },\n        type: 'primary',\n      })\n    },\n  },\n}\n",{"version":3,"sources":["View.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"View.vue","sourceRoot":"src/packages/ticket/views","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col-xl-12\">\n        <div class=\"px-10 mb-2 panel ticket-toolbar\">\n          <a href=\"#\" class=\"mr-30\" @click=\"toBack()\">\n            <p-tooltip position=\"bottom\" trigger=\"hover\" label=\"Quay lại\">\n              <span class=\"badge badge-default badge-outline\">\n                <i class=\"icon md-arrow-left\"></i>\n              </span>\n            </p-tooltip>\n          </a>\n          <a\n            href=\"#form-reply-ticket\"\n            class=\"ml-30 mr-20\"\n            v-if=\"ticket.status != 'closed'\"\n          >\n            <p-tooltip position=\"bottom\" trigger=\"hover\" label=\"Trả lời\">\n              <span class=\"badge badge-default badge-outline\">\n                <i class=\"icon md-mail-reply\"></i>\n              </span>\n            </p-tooltip>\n          </a>\n          <a href=\"#ticket-bottom\" class=\"mr-10 float-right\">\n            <p-tooltip\n              position=\"bottom-left\"\n              trigger=\"hover\"\n              label=\"Cuộn xuống\"\n            >\n              <span class=\"badge badge-default badge-outline\">\n                <i class=\"icon md-long-arrow-down\"></i>\n              </span>\n            </p-tooltip>\n          </a>\n        </div>\n      </div>\n      <div class=\"col-xl-12\">\n        <div class=\"card\">\n          <div class=\"card-block\">\n            <div class=\"card-title\">\n              <h3 class=\"m0\">\n                {{ ticket.subject }}\n              </h3>\n              <p v-if=\"ticket.status == 'closed'\" class=\"mt-2 mb-0 text-danger\"\n                >Ticket đã được đóng, nếu sự cố của bạn chưa được giải quết, bạn\n                có thể click <a href=\"#ticket-bottom\">vào đây</a> để mở lại\n                ticket.</p\n              >\n            </div>\n            <div class=\"card-text\">\n              <div class=\"row\">\n                <div class=\"col-sm-7\">\n                  <p class=\"mb-5\">\n                    <span>Ticket ID: {{ ticket.id }}</span>\n                    <time class=\"ml-35\">\n                      Tạo ngày:\n                      {{ ticket.created_at | datetime('dd/MM/yyyy HH:mm') }} ({{\n                        ticket.created_at | timeAgo\n                      }}\n                      trước)\n                    </time>\n                  </p>\n                  <p class=\"mb-5\" v-if=\"ticket.object_id\">\n                    Mã đơn hàng:\n                    <router-link\n                      class=\"hightlight\"\n                      target=\"_blank\"\n                      slot=\"reference\"\n                      :to=\"{\n                        name: 'order-view',\n                        params: { id: ticket.object_id },\n                      }\"\n                    >\n                      {{ ticket.ref_id }}\n                    </router-link>\n                  </p>\n                </div>\n                <div class=\"col-sm-5\">\n                  <p class=\"mb-5\"\n                    >Trạng thái:\n                    <span v-status:status=\"ticket.status\">\n                      {{ ticket.status }}\n                    </span>\n                  </p>\n                  <p class=\"mb-5\" v-if=\"ticket.category\"\n                    >Danh mục: {{ ticket.category }}</p\n                  >\n                </div>\n              </div>\n              <hr />\n              <p class=\"text-pre-line\">{{ ticket.content }}</p>\n              <div\n                class=\"gallery ticket-attach-files\"\n                v-if=\"attach_files && attach_files.length\"\n              >\n                <hr />\n                <div class=\"row\">\n                  <div class=\"col\" v-for=\"(file, i) in attach_files\" :key=\"i\">\n                    <div\n                      v-if=\"isImage(file.url)\"\n                      class=\"gallery-item\"\n                      @click=\"zoomImage(file.blob)\"\n                    >\n                      <img class=\"img-fluid w-full\" :src=\"file.blob\" />\n                    </div>\n                    <div v-else class=\"gallery-item ticket-file\">\n                      <a @click=\"getTicketFile(file, true)\" class=\"btn\">\n                        <span>{{ extenionFileUrl(file) }}</span>\n                        <span class=\"icon md-download\"></span>\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          class=\"card mb-5 ticket-message\"\n          v-for=\"(item, index) in messages\"\n          :key=\"index\"\n          :class=\"{ me: item.user_id == auth.id }\"\n        >\n          <div class=\"card-block\">\n            <div class=\"card-title\">\n              <h4 class=\"m0 d-ib\">\n                {{ item.full_name || 'Undefined' }}\n                <span\n                  v-if=\"item.is_staff == 'Y'\"\n                  class=\"badge badge-info text-top\"\n                  >Lionnix Staff</span\n                >\n              </h4>\n              <span class=\"float-right\">\n                {{ item.created_at | datetime('dd/MM/yyyy HH:mm') }}\n              </span>\n            </div>\n            <div class=\"card-text\">\n              <p class=\"text-pre-line\">{{ item.message }}</p>\n              <div\n                class=\"gallery ticket-attach-files\"\n                v-if=\"item.attach_files && item.attach_files.length\"\n              >\n                <hr />\n                <div class=\"row\">\n                  <div\n                    class=\"col\"\n                    v-for=\"(file, i) in item.attach_files\"\n                    :key=\"i\"\n                  >\n                    <div\n                      v-if=\"isImage(file.url)\"\n                      class=\"gallery-item\"\n                      @click=\"zoomImage(file.blob)\"\n                    >\n                      <img class=\"img-fluid w-full\" :src=\"file.blob\" />\n                    </div>\n                    <div v-else class=\"gallery-item ticket-file\">\n                      <a @click=\"getTicketFile(file, true)\" class=\"btn\">\n                        <span>{{ extenionFileUrl(file) }}</span>\n                        <span class=\"icon md-download\"></span>\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"card\" id=\"ticket-bottom\">\n          <div class=\"card-block\">\n            <template v-if=\"isHideReply\">\n              <div\n                id=\"form-reply-ticket\"\n                class=\"form-group floating\"\n                :class=\"[\n                  { 'has-success': !errors.has('message') },\n                  { 'has-danger': errors.has('message') },\n                ]\"\n              >\n                <textarea\n                  class=\"form-control\"\n                  rows=\"5\"\n                  placeholder=\"Nội dung\"\n                  v-model=\"form.message\"\n                  v-validate=\"'required'\"\n                  name=\"message\"\n                  data-vv-as=\"Nội dung\"\n                ></textarea>\n                <span class=\"invalid-feedback\" v-if=\"errors.has('message')\">{{\n                  errors.first('message')\n                }}</span>\n              </div>\n\n              <div\n                class=\"form-group floating\"\n                :class=\"[\n                  { 'has-success': !errors.has('file') },\n                  { 'has-danger': errors.has('file') },\n                ]\"\n              >\n                <ul\n                  class=\"list-group list-group-full ticket-attach-list\"\n                  v-if=\"files && files.length\"\n                >\n                  <li\n                    class=\"list-group-item\"\n                    v-for=\"(item, i) in files\"\n                    :key=\"i\"\n                  >\n                    <span\n                      class=\"float-right\"\n                      @click.prevent=\"showDeleteConfirmation(item.uid)\"\n                    >\n                      <i class=\"icon md-close\"></i>\n                    </span>\n                    {{ item.name }}\n                  </li>\n                </ul>\n                <upload\n                  class=\"ticket-uploader\"\n                  :action=\"uploadFileEndpoint\"\n                  :accept=\"'.png,.jpg,.csv,.xlsx,.xls'\"\n                  drag\n                  multiple\n                  list-type=\"picture\"\n                  :data=\"{ type: 'tickets' }\"\n                  :headers=\"uploadHeaders\"\n                  :on-error=\"handleErrorFile\"\n                  :on-success=\"handleSuccess\"\n                  :max-file-size=\"4000000\"\n                >\n                  <div class=\"el-upload__text\">\n                    <p-icon name=\"image\" icon-pack=\"md\"></p-icon>\n                    Tải file đính kèm\n                  </div>\n                </upload>\n                <p\n                  >File đính kèm chỉ nhận định dạng PNG, JPEG, CSV, Excel và\n                  không được vượt quá 5MB</p\n                >\n              </div>\n              <p-button\n                type=\"primary\"\n                @click=\"handlerPushMessage\"\n                :disable=\"isMessageSending\"\n              >\n                <span>Trả lời</span>\n              </p-button>\n            </template>\n            <template v-else>\n              <p class=\"text-danger\" v-if=\"this.isClosed\"\n                >Ticket đã được đóng, nếu sự cố của bạn chưa được giải quết, bạn\n                có thể bấm button dưới để mở lại ticket.</p\n              >\n              <p-button\n                id=\"btn-reopen\"\n                type=\"primary\"\n                @click=\"isHideReply = true\"\n              >\n                <span>Mở lại ticket</span>\n              </p-button>\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n    <modal-image :visible.sync=\"isZoomImage\" :src=\"imageZoomImage\" />\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions, mapMutations } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport ModalImage from './components/ModalImage'\nimport mixinTicket from '../mixins/ticket'\nimport mixinUpload from '@/core/mixins/upload'\nimport Browser from '@core/helpers/browser'\nimport { cloneDeep } from '@core/utils'\nexport default {\n  name: 'TicketView',\n  mixins: [mixinRoute, mixinUpload, mixinTicket],\n  components: { ModalImage },\n  data() {\n    return {\n      isChange: false,\n      isHideReply: true,\n      isMessageSending: false,\n      isFetching: false,\n      imageZoomImage: '',\n      isZoomImage: false,\n      result: {},\n      filter: {\n        page: 1,\n        limit: 50,\n      },\n      form: {\n        ticket_id: 0,\n        message: '',\n        urls: [],\n      },\n      attach_files: [],\n    }\n  },\n  computed: {\n    ...mapState('auth', {\n      auth: (state) => state.user,\n    }),\n    ...mapState('ticket', {\n      ticket: (state) => state.ticket,\n      messages: (state) => state.messages,\n      count: (state) => state.count,\n    }),\n    createrName() {\n      if (this.ticket.creater) {\n        return this.ticket.creater.ful_name || this.ticket.creater.username\n      }\n\n      return 'Undefined'\n    },\n\n    ticketID() {\n      return parseInt(this.$route.params.id, 10)\n    },\n\n    isClosed() {\n      return this.ticket.status === 'closed'\n    },\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n    this.init()\n  },\n  methods: {\n    ...mapActions('ticket', [\n      'fetchTicket',\n      'fetchTicketFile',\n      'fetchTicketMessages',\n      'pushMessage',\n      'closeTicket',\n      'fetchTicketStatictis',\n    ]),\n    ...mapMutations(['updateTicketMessage']),\n    async init() {\n      await Promise.all([\n        this.handlerFetchTicket(),\n        this.handlerFetchTicketMessages(),\n      ])\n\n      if (this.ticket.status === 'closed') {\n        this.isHideReply = false\n      }\n      if (this.ticket.attach_files) {\n        this.$set(this, 'attach_files', cloneDeep(this.ticket.attach_files))\n      }\n\n      this.getTicketFiles()\n    },\n    async getTicketFile(url, isFile) {\n      let result\n\n      this.isFetching = true\n      try {\n        const payload = {\n          url: url,\n          type: 'tickets',\n        }\n        result = await this.fetchTicketFile(payload)\n\n        if (!result.success) {\n          this.$toast.open({ type: 'error', message: `Download failed ! ` })\n          return false\n        }\n      } catch (e) {\n        this.$toast.open({ type: 'error', message: `Download failed !` })\n      }\n      this.isFetching = false\n\n      if (isFile) {\n        Browser.downloadBlob(result.blob, url.split('/').pop())\n      } else {\n        return window.URL.createObjectURL(result.blob)\n      }\n    },\n    getTicketFiles() {\n      if (!this.attach_files.length) return false\n      this.attach_files.forEach(async (el, i) => {\n        if (this.isImage(el)) {\n          let result = this.getTicketFile(el, false)\n          result.then((response) => {\n            this.$set(this.attach_files, i, {\n              url: el,\n              blob: response,\n            })\n          })\n        }\n      })\n    },\n    async handlerFetchTicket() {\n      await this.fetchTicket(this.ticketID)\n    },\n\n    async handlerFetchTicketMessages() {\n      this.isFetching = true\n      await this.fetchTicketMessages(this.ticketID, this.filter)\n      this.messages.forEach((el, index) => {\n        let files = el.attach_files\n        if (!files) {\n          return\n        }\n        files.forEach((file, i) => {\n          if (this.isImage(file)) {\n            let result = this.getTicketFile(file, false)\n            result.then(\n              function(response) {\n                this.messages[index].attach_files[i] = {\n                  url: file,\n                  blob: response,\n                }\n                this.$store.commit(\n                  'ticket/updateTicketMessage',\n                  cloneDeep(this.messages)\n                )\n              }.bind(this)\n            )\n          }\n        })\n      })\n      this.isFetching = false\n    },\n\n    async handlerPushMessage() {\n      this.form.urls = this.files.map((item) => item.url)\n      const validate = await this.$validator.validateAll()\n      if (!validate) {\n        return\n      }\n\n      this.form.ticket_id = this.ticketID\n\n      this.isMessageSending = true\n      const result = await this.pushMessage(this.form)\n\n      if (result && result.success) {\n        this.handlerFetchTicketMessages()\n        if (this.ticket.status === 'closed') {\n          this.handlerFetchTicket()\n          await this.fetchTicketStatictis()\n        }\n        this.clearFrom()\n        this.$toast.open({\n          type: 'success',\n          message: 'Gửi tin thành công',\n        })\n      } else {\n        this.$toast.open({ type: 'error', message: result.message })\n      }\n      this.isMessageSending = false\n    },\n\n    clearFrom() {\n      this.files = []\n      this.form = {\n        ticket_id: 0,\n        message: '',\n        urls: [],\n      }\n    },\n\n    zoomImage(src) {\n      this.isZoomImage = true\n      this.imageZoomImage = src\n    },\n\n    showDeleteConfirmation(item) {\n      this.$dialog.confirm({\n        title: `Xác nhận xóa file đính kèm?`,\n        message: `Bạn có chắc chắn muốn xóa file đính kèm này?`,\n        confirmText: 'Xóa',\n        onConfirm: () => this.handleDeleteImage(item),\n        type: 'danger',\n      })\n    },\n\n    handlerForword(staff) {\n      const idx = this.ticket.staffs.find((item) => item.staff_id == staff.id)\n      if (idx) {\n        this.$toast.open({\n          type: 'warning',\n          message: `Ticket đã được chuyển tiếp cho ${staff.full_name ||\n            staff.username}`,\n        })\n        return\n      }\n      this.$dialog.confirm({\n        title: `Chuyển tiếp ticket`,\n        message: `Bạn muốn chuyển tiếp ticket cho ${staff.full_name ||\n          staff.username}`,\n        confirmText: 'Xác nhận',\n        onConfirm: () => {\n          this.handlerForward('', staff.id)\n        },\n        type: 'primary',\n      })\n    },\n  },\n}\n</script>\n"]}]}