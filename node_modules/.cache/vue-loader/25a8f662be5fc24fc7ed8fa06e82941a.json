{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/design/views/Form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/design/views/Form.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*eslint-disable*/\nimport { mapActions, mapState } from 'vuex'\nimport mixinUpload from '@/core/mixins/upload'\nimport Thumbnail from '@components/shared/Thumbnail'\nimport mixinCreateDesign from '../mixins/create-design'\nimport { Upload } from '@kit'\nimport { MAX_DESIGN_FILE } from '@core/constants'\nimport {\n  CREATE_DESIGN,\n  FETCH_DESIGN,\n  FETCH_DESIGNS,\n  UPDATE_DESIGN,\n  DELETE_DESIGN,\n  UPDATE_DESIGN_SKU,\n  DELETE_DESIGN_FILES,\n  DOWNLOAD_DESIGN,\n} from '../store'\nimport ModalCreateDesign from './components/ModalCreateDesign'\nimport { cloneDeep } from '@core/utils'\nimport Browser from '@core/helpers/browser'\nimport designApi from '../api'\nimport ProductTypeResource from '@/components/shared/resource/ProductType'\nimport AuthService from '@core/services/auth'\n\nexport default {\n  name: 'DesignForm',\n  mixins: [mixinUpload, mixinCreateDesign],\n  components: { Thumbnail, Upload, ModalCreateDesign, ProductTypeResource },\n  computed: {\n    ...mapState('design', {\n      currentDesign: (state) => state.design,\n      currentDesignFiles: (state) => state.design.design_files,\n    }),\n    ...mapState('shared', {\n      productBases: (state) => state.productBases,\n    }),\n    validFiles() {\n      return this.files.filter(\n        ({ uid }) => this.uploadedIds.indexOf(uid) === -1\n      )\n    },\n    userInformation() {\n      if (this.design && this.design.user) {\n        return [\n          this.design.user.full_name,\n          this.design.user.username,\n          this.design.user.email,\n          this.design.user.phone,\n        ].filter(Boolean)\n      }\n      return []\n    },\n  },\n  data() {\n    return {\n      design: {\n        sku: '',\n        files: [],\n      },\n      productNames: {},\n      files: [],\n      preview: [],\n      isFetching: false,\n      isSaving: false,\n      isChange: false,\n      uploadReady: true,\n      uploadedIds: [],\n      isChangeSku: false,\n      changeProductIds: [],\n      designFiles: [],\n      isLoading: false,\n      showBtnSave: false,\n      disableUpload: false,\n    }\n  },\n  mounted() {\n    this.handleBeforeLeave()\n  },\n  methods: {\n    ...mapActions('design', [\n      FETCH_DESIGN,\n      UPDATE_DESIGN,\n      DELETE_DESIGN,\n      UPDATE_DESIGN_SKU,\n      DELETE_DESIGN_FILES,\n      DOWNLOAD_DESIGN,\n    ]),\n    async init() {\n      this.isFetching = true\n      if (this.$route.params.id) {\n        await this.getDesign()\n      }\n      this.isFetching = false\n    },\n    async getDesign() {\n      const id = parseInt(this.$route.params.id, 10)\n      const result = await this.fetchDesign(id)\n      this.isChange = false\n\n      if (!result.success) {\n        this.$toast.open({ type: 'error', message: result.message })\n        return\n      }\n\n      this.design = cloneDeep(this.currentDesign)\n      this.designFiles = cloneDeep(this.currentDesign.design_files)\n      if (this.designFiles.length) {\n        this.showBtnSave = true\n      }\n    },\n\n    async handleSave() {\n      this.isSaving = true\n\n      const payload = {\n        id: this.design.id,\n        body: {\n          design_files: this.changeProductIds,\n        },\n      }\n\n      const result = await this.updateDesign(payload)\n      this.isSaving = false\n\n      if (!result.success) {\n        this.$toast.open({ type: 'error', message: result.message })\n        return\n      }\n\n      this.$toast.open({ type: 'success', message: 'Update design successful' })\n      this.isChange = false\n      this.init()\n    },\n\n    handleDiscard() {},\n\n    beforeUpload() {\n      if (this.designFiles.length >= MAX_DESIGN_FILE) {\n        this.$toast.open({\n          type: 'error',\n          message: `Design can not upload more than ${MAX_DESIGN_FILE} file`,\n        })\n        this.disableUpload = true\n        return false\n      }\n\n      this.isChange = true\n      return true\n    },\n    handleChangeFile(file) {\n      if (this.disableUpload) {\n        return\n      }\n\n      const index = this.files.findIndex(({ uid }) => uid === file.uid)\n      if (index === -1) {\n        this.files.push(file)\n      } else {\n        this.$set(this.files, index, file)\n      }\n    },\n\n    handleSuccess(val, file) {\n      if (val && typeof val.design_file !== 'undefined') {\n        this.designFiles.push(val.design_file)\n      }\n      this.showBtnSave = true\n    },\n\n    showDeleteConfirmation(item) {\n      this.$dialog.confirm({\n        title: `Remove design file?`,\n        message: `Are you sure you want to remove this design file?`,\n        confirmText: 'Remove',\n        onConfirm: () => this.handleDelete(item),\n        type: 'danger',\n      })\n    },\n\n    async handleDelete(item) {\n      this.isSaving = true\n\n      const payload = {\n        id: item.id,\n        design_id: item.design_id,\n      }\n      const result = await this.deleteDesignFile(payload)\n      this.isSaving = false\n\n      if (!result.success) {\n        this.$toast.open({ type: 'error', message: result.message })\n        return\n      }\n\n      this.isChange = true\n      this.$toast.open({\n        type: 'success',\n        message: 'Delete design file successful',\n      })\n      this.designFiles = this.designFiles.filter((x) => x !== item)\n      if (this.designFiles.length === 0) {\n        this.showBtnSave = false\n      }\n    },\n\n    handleBeforeLeave() {\n      window.onbeforeunload = function() {\n        if (this.isChange) {\n          return 'If you leave this page, all unsaved changes will be lost. Are you sure you want to leave this page?'\n        }\n\n        return null\n      }.bind(this)\n    },\n\n    async handlerChangeSku() {\n      this.isSaving = true\n      const payload = {\n        id: this.design.id,\n        sku: this.design.sku,\n      }\n      const result = await this.updateDesignSku(payload)\n      this.isSaving = false\n\n      if (!result.success) {\n        this.$toast.open({ type: 'error', message: result.message })\n        return\n      }\n\n      this.isChangeSku = false\n      this.$toast.open({\n        type: 'success',\n        message: 'Update design sku successful',\n      })\n    },\n\n    async handleDownloadFile(id) {\n      this.isLoading = true\n      const url = `${\n        process.env.VUE_APP_BASE_API_ENDPOINT\n      }/designs/files/${id}/download?access_token=${AuthService.getAccessToken()}`\n      window.open(url, '_self')\n      this.isLoading = false\n    },\n\n    async handleCreateZipDesign() {\n      this.isSaving = true\n      const payload = {\n        id: this.design.id,\n        sku: this.design.sku,\n      }\n      const result = await this.updateDesignSku(payload)\n      this.isSaving = false\n      this.isChange = false\n\n      if (!result.success) {\n        this.$toast.open({ type: 'error', message: 'Update design failed !' })\n        return\n      }\n\n      this.$toast.open({ type: 'success', message: 'Update design success !' })\n      this.isChangeSku = false\n      this.init()\n    },\n\n    async handlerDeleteDesign() {\n      if (this.design.design_files && this.design.design_files.length > 0) {\n        this.$toast.open({\n          type: 'error',\n          message: 'Cant delete design contains the file',\n        })\n        return\n      }\n\n      this.isSaving = true\n      const payload = {\n        id: this.design.id,\n      }\n\n      const result = await this.deleteDesign(payload)\n      this.isSaving = false\n\n      if (result.success) {\n        this.$toast.open('Delete design successful')\n        this.$router.push({ name: 'design-list' })\n        return\n      }\n\n      this.$toast.open({ type: 'error', message: result.message })\n    },\n\n    showConfirmDeleteDesign() {\n      this.$dialog.confirm({\n        title: `Delete design?`,\n        message: `Are you sure you want to delete this design?`,\n        confirmText: 'Delete',\n        onConfirm: () => this.handlerDeleteDesign(),\n        type: 'danger',\n      })\n    },\n\n    handlerCancelChangeSku() {\n      this.isChangeSku = false\n      this.design.sku = this.currentDesign.sku\n    },\n  },\n  watch: {\n    '$route.params.id': {\n      handler: function() {\n        this.init()\n      },\n      immediate: true,\n    },\n  },\n  beforeRouteLeave(to, from, next) {\n    if (this.isChange) {\n      if (\n        !window.confirm(\n          'If you leave this page, all unsaved changes will be lost. Are you sure you want to leave this page?'\n        )\n      ) {\n        return\n      }\n    }\n\n    next()\n  },\n}\n",null]}