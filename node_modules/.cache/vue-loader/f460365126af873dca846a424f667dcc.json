{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/DetectQuantityForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/DetectQuantityForm.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions, mapState, mapMutations } from 'vuex'\nimport { cloneDeep, isObjectDiff, asyncFilter } from '@core/utils'\nimport ConditionItem from './components/ConditionItem'\nimport { types } from '../constant'\nimport { FETCH_ORDER_MAPPINGS } from '../store'\nexport default {\n  name: 'SettingDetectQuantity',\n  components: {\n    ConditionItem,\n  },\n  data() {\n    return {\n      form: {\n        disjunctive: true,\n        product_type_id: 0,\n        type: types.quantity,\n        rules: [\n          {\n            column: 'title',\n            relation: 'match',\n            condition: '',\n          },\n        ],\n      },\n      initialForm: {},\n      isShowUnsavedBar: false,\n      isFetching: false,\n      isSaving: false,\n    }\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      quantityMappingState: (state) => state.orderMapping,\n      quantityMappingListState: (state) => state.orderMappingsList,\n    }),\n  },\n  watch: {\n    form: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.initialForm)\n      },\n      deep: true,\n    },\n    initialForm: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.form)\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      fetchOrderMapping: 'fetchOrderMapping',\n      fetchOrderMappingList: 'fetchOrderMappingList',\n      createOrUpdateOrderMapping: 'createOrUpdateOrderMapping',\n    }),\n    ...mapMutations('orderMapping', {\n      updateStateOrderMappings: FETCH_ORDER_MAPPINGS,\n    }),\n    async fetch() {\n      this.isFetching = true\n      let result = await this.fetchOrderMappingList({\n        type: types.quantity,\n      })\n      if (\n        result &&\n        result.success &&\n        this.quantityMappingListState.length > 0\n      ) {\n        result = await this.fetchOrderMapping({\n          type: types.quantity,\n          id: this.quantityMappingListState[0].id,\n        })\n        if (result && result.success) {\n          this.form = cloneDeep(this.quantityMappingState)\n        }\n      }\n      this.initialForm = cloneDeep(this.form)\n      this.isFetching = false\n    },\n    removeCondition(index) {\n      this.form.rules.splice(index, 1)\n    },\n    changeCondition(index, event) {\n      this.$set(this.form.rules, index, event)\n    },\n    addCondition() {\n      const rules = this.form.rules\n      rules.push({\n        ...rules[rules.length - 1],\n        condition: '',\n      })\n    },\n    discard() {\n      this.form = cloneDeep(this.initialForm)\n    },\n    async save() {\n      if (this.$refs.conditions && this.$refs.conditions.length) {\n        const filtered = await asyncFilter(this.$refs.conditions, async (c) => {\n          const isValid = await c.$validator.validateAll()\n          return isValid\n        })\n        const isConditionsValid =\n          filtered.length === this.$refs.conditions.length\n        if (!isConditionsValid) {\n          return\n        }\n      }\n      this.isSaving = true\n      const result = await this.createOrUpdateOrderMapping({\n        type: types.quantity,\n        payload: cloneDeep(this.form),\n      })\n\n      if (result && result.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Saved successfully',\n        })\n        await this.fetch()\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            result.message || 'Something went wrong. Please try again later',\n        })\n      }\n      this.isSaving = false\n    },\n  },\n  beforeRouteLeave(to, from, next) {\n    this.updateStateOrderMappings([])\n    next()\n  },\n  created() {\n    this.fetch()\n  },\n}\n",null]}