{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/multiselect/Multiselect.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/multiselect/Multiselect.vue","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport multiselectMixin from './multiselectMixin'\nimport pointerMixin from './pointerMixin'\n\nexport default {\n  name: 'multiselect',\n  mixins: [multiselectMixin, pointerMixin],\n  props: {\n    /**\n     * name attribute to match optional label element\n     * @default ''\n     * @type {String}\n     */\n    name: {\n      type: String,\n      default: '',\n    },\n    /**\n     * String to show when pointing to an option\n     * @default 'Press enter to select'\n     * @type {String}\n     */\n    selectLabel: {\n      type: String,\n      default: 'Press enter to select',\n    },\n    /**\n     * String to show when pointing to an option\n     * @default 'Press enter to select'\n     * @type {String}\n     */\n    selectGroupLabel: {\n      type: String,\n      default: 'Press enter to select group',\n    },\n    /**\n     * String to show next to selected option\n     * @default 'Selected'\n     * @type {String}\n     */\n    selectedLabel: {\n      type: String,\n      default: 'Selected',\n    },\n    /**\n     * String to show when pointing to an already selected option\n     * @default 'Press enter to remove'\n     * @type {String}\n     */\n    deselectLabel: {\n      type: String,\n      default: 'Press enter to remove',\n    },\n    /**\n     * String to show when pointing to an already selected option\n     * @default 'Press enter to remove'\n     * @type {String}\n     */\n    deselectGroupLabel: {\n      type: String,\n      default: 'Press enter to deselect group',\n    },\n    /**\n     * Decide whether to show pointer labels\n     * @default true\n     * @type {Boolean}\n     */\n    showLabels: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * Limit the display of selected options. The rest will be hidden within the limitText string.\n     * @default 99999\n     * @type {Integer}\n     */\n    limit: {\n      type: Number,\n      default: 99999,\n    },\n    /**\n     * Sets maxHeight style value of the dropdown\n     * @default 300\n     * @type {Integer}\n     */\n    maxHeight: {\n      type: Number,\n      default: 300,\n    },\n    /**\n     * Function that process the message shown when selected\n     * elements pass the defined limit.\n     * @default 'and * more'\n     * @param {Int} count Number of elements more than limit\n     * @type {Function}\n     */\n    limitText: {\n      type: Function,\n      default: (count) => `and ${count} more`,\n    },\n    /**\n     * Set true to trigger the loading spinner.\n     * @default False\n     * @type {Boolean}\n     */\n    loading: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * Disables the multiselect if true.\n     * @default false\n     * @type {Boolean}\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * Fixed opening direction\n     * @default ''\n     * @type {String}\n     */\n    openDirection: {\n      type: String,\n      default: '',\n    },\n    /**\n     * Shows slot with message about empty options\n     * @default true\n     * @type {Boolean}\n     */\n    showNoOptions: {\n      type: Boolean,\n      default: true,\n    },\n    showNoResults: {\n      type: Boolean,\n      default: true,\n    },\n    tabindex: {\n      type: Number,\n      default: 0,\n    },\n  },\n  computed: {\n    isSingleLabelVisible() {\n      return (\n        (this.singleValue || this.singleValue === 0) &&\n        (!this.isOpen || !this.searchable) &&\n        !this.visibleValues.length\n      )\n    },\n    isPlaceholderVisible() {\n      return !this.internalValue.length && (!this.searchable || !this.isOpen)\n    },\n    visibleValues() {\n      return this.multiple ? this.internalValue.slice(0, this.limit) : []\n    },\n    singleValue() {\n      return this.internalValue[0]\n    },\n    deselectLabelText() {\n      return this.showLabels ? this.deselectLabel : ''\n    },\n    deselectGroupLabelText() {\n      return this.showLabels ? this.deselectGroupLabel : ''\n    },\n    selectLabelText() {\n      return this.showLabels ? this.selectLabel : ''\n    },\n    selectGroupLabelText() {\n      return this.showLabels ? this.selectGroupLabel : ''\n    },\n    selectedLabelText() {\n      return this.showLabels ? this.selectedLabel : ''\n    },\n    inputStyle() {\n      if (\n        this.searchable ||\n        (this.multiple && this.value && this.value.length)\n      ) {\n        // Hide input by setting the width to 0 allowing it to receive focus\n        return this.isOpen\n          ? { width: '100%' }\n          : { width: '0', position: 'absolute', padding: '0' }\n      }\n      return null\n    },\n    contentStyle() {\n      return this.options.length\n        ? { display: 'inline-block' }\n        : { display: 'block' }\n    },\n    isAbove() {\n      if (this.openDirection === 'above' || this.openDirection === 'top') {\n        return true\n      } else if (\n        this.openDirection === 'below' ||\n        this.openDirection === 'bottom'\n      ) {\n        return false\n      } else {\n        return this.preferredOpenDirection === 'above'\n      }\n    },\n    showSearchInput() {\n      return (\n        this.searchable &&\n        (this.hasSingleSelectedSlot &&\n        (this.visibleSingleValue || this.visibleSingleValue === 0)\n          ? this.isOpen\n          : true)\n      )\n    },\n  },\n}\n",null]}