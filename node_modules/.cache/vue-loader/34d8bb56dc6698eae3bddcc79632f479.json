{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/OrderView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/OrderView.vue","mtime":1603898990380},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapActions } from 'vuex'\nimport { cloneDeep } from '@core/utils'\nimport { FETCH_ORDER, UPDATE_ORDER } from '@/packages/container/store/types'\nimport mixinFulfillment from '../mixins/fulfillment'\nimport mixinUpdateOrder from '../mixins/update-order'\nimport OrderItems from './components/OrderItems'\nimport ModalUpdateOrder from './components/ModalUpdateOrder'\nimport {\n  FETCH_PRODUCT_TYPES,\n  FETCH_PROVIDERS,\n  FETCH_COUNTRIES,\n} from '@/packages/shared/store'\nimport { ORDER_STATUS_CANCELED } from '@core/constants'\n\nexport default {\n  name: 'OrderView',\n  mixins: [mixinUpdateOrder, mixinFulfillment],\n  components: {\n    OrderItems,\n    ModalUpdateOrder,\n  },\n  computed: {\n    ...mapState('container', {\n      order: (state) => state.order,\n    }),\n    ...mapState('shared', {\n      productTypes: (state) => state.productTypes,\n      providers: (state) => state.providers,\n      countries: (state) => state.countries,\n    }),\n    ...mapState('design', {\n      designs: (state) => state.designs,\n    }),\n    shopId() {\n      return this.order ? this.order.shop_id : 0\n    },\n    orderId() {\n      return parseInt(this.$route.params.id, 10)\n    },\n  },\n  data() {\n    return {\n      editing: false,\n      isFetching: false,\n      isUpdating: false,\n      orderItems: [],\n      resultFetch: {},\n      resultUpdate: {},\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    ...mapActions('container', [FETCH_ORDER, UPDATE_ORDER, 'getLogs']),\n    ...mapActions('shared', [\n      FETCH_PRODUCT_TYPES,\n      FETCH_PROVIDERS,\n      FETCH_COUNTRIES,\n    ]),\n    ...mapActions('design', ['fetchDesigns']),\n\n    async init() {\n      const id = parseInt(this.$route.params.id, 10)\n\n      if (id < 1) {\n        return this.$router.push({ name: 'order-list' })\n      }\n\n      this.isFetching = true\n\n      const { r1 } = await Promise.all([this.fetchOrder(id)])\n\n      this.resultFetch = r1\n      this.isFetching = false\n    },\n\n    async handleUpdateOrder(order) {\n      this.isUpdating = true\n      this.resultUpdate = await this.updateOrder(\n        Object.assign({}, order || this.order, { order_items: this.orderItems })\n      )\n\n      if (this.resultUpdate && this.resultUpdate.success) {\n        this.$set(this, 'orderItems', cloneDeep(this.order.order_items))\n        this.editing = false\n        this.isVisibleEditOrder = false\n        this.init()\n        this.$toast.open({\n          type: 'success',\n          message: 'Cập nhập order item thành công',\n        })\n      } else {\n        this.$toast.open({ type: 'error', message: this.resultUpdate.message })\n      }\n\n      this.isUpdating = false\n    },\n\n    handleSelectedDesign({ url, item, design }) {\n      this.handleUpdateOrderItem(item, {\n        design,\n        design_id: design.id,\n        image: url,\n      })\n    },\n\n    handleSelectedProductType({ item, product }) {\n      this.handleUpdateOrderItem(item, {\n        product_type_id: product.id,\n        product_type: product,\n      })\n    },\n    handleUpdateOrderItem(item, newVal) {\n      const index = this.orderItems.findIndex(({ id }) => id === item.id)\n\n      if (index !== -1) {\n        this.editing = true\n        this.$set(this.orderItems, index, Object.assign({}, item, newVal))\n      }\n    },\n    toggleEditOrder() {\n      if (this.editing) {\n        this.$set(this, 'orderItems', cloneDeep(this.order.order_items))\n        this.editing = false\n      } else {\n        this.editing = true\n      }\n    },\n\n    confirmUpdateOrder(action) {\n      this.$dialog.confirm({\n        message: 'Are you sure you want to do this?',\n        onConfirm: () => this.onUpdateOrderActionConfirm(action),\n      })\n    },\n\n    async onUpdateOrderActionConfirm(action) {\n      const order = Object.assign({}, this.order)\n      switch (action) {\n        case 'canceled':\n          order.status = ORDER_STATUS_CANCELED\n          break\n      }\n\n      this.handleUpdateOrder(order)\n    },\n  },\n  watch: {\n    'order.order_items': function(val) {\n      this.$set(this, 'orderItems', cloneDeep(val))\n    },\n  },\n  filters: {\n    displayname: (order) => {\n      return order.full_name || `${order.first_name} ${order.last_name}`\n    },\n  },\n}\n",{"version":3,"sources":["OrderView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"OrderView.vue","sourceRoot":"src/packages/container/views","sourcesContent":["<template>\n  <PageDetailLoading v-if=\"isFetching\"></PageDetailLoading>\n  <div class=\"order-view-page page\" v-else>\n    <div class=\"page-header\">\n      <div class=\"container-fluid\">\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <p-button icon=\"chevron-left\" class=\"btn-pure pl-0\">\n              <router-link :to=\"{ name: 'order-list' }\">Đơn hàng</router-link>\n            </p-button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"page-content\">\n      <div class=\"container-fluid\">\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <div\n              class=\"d-flex align-items-center justify-content-between flex-wrap\"\n            >\n              <div class=\"order-metadata d-flex align-items-center\">\n                <h4 class=\"order-number\">{{ order.ref_id }}</h4>\n                <span class=\"order-date ml-10 mr-10\">{{\n                  order.created_at | datetime\n                }}</span>\n                <span v-status:status=\"order.status\"></span>\n              </div>\n              <div class=\"order-metadata d-flex align-items-center\">\n                <p-button\n                  @click=\"confirmUpdateOrder('canceled')\"\n                  class=\"ml-10\"\n                  type=\"danger\"\n                  v-if=\"isAllowCancel\"\n                  >Cancel</p-button\n                >\n              </div>\n            </div>\n            <div class=\"row mt-15\">\n              <div class=\"col-12 col-md-8\">\n                <section class=\"card section-order-items\">\n                  <div class=\"card-block\">\n                    <div\n                      class=\"card-title d-flex align-items-center justify-content-between\"\n                    >\n                      <h4>Danh sách sản phẩm</h4>\n                      <p-tooltip\n                        label=\"Sửa sản phẩm\"\n                        position=\"top\"\n                        type=\"dark\"\n                      >\n                        <p-button\n                          icon=\"pencil\"\n                          type=\"default\"\n                          name=\"pencil\"\n                          @click=\"toggleEditOrder\"\n                          v-if=\"isAllowUpdateOrder(order)\"\n                          size=\"sm\"\n                        ></p-button>\n                      </p-tooltip>\n                    </div>\n                    <order-items\n                      :order=\"order\"\n                      :items=\"orderItems\"\n                      :editing=\"editing\"\n                      :designs=\"designs\"\n                      :fetch-designs=\"fetchDesigns\"\n                      :product-types=\"productTypes\"\n                      :shop-id=\"order.shop_id\"\n                      @selectedProduct=\"handleSelectedProductType\"\n                      @selectedDesign=\"handleSelectedDesign\"\n                      :is-allow-update=\"isAllowUpdateOrder(order)\"\n                    />\n                    <div class=\"text-right mt-15\" v-if=\"editing\">\n                      <p-button\n                        @click=\"handleUpdateOrder(null)\"\n                        :disabled=\"isUpdating\"\n                        >Update order</p-button\n                      >\n                    </div>\n                  </div>\n                </section>\n              </div>\n              <div class=\"col-12 col-md-4\">\n                <section class=\"card section-order-shipping\">\n                  <div class=\"card-block\">\n                    <div\n                      class=\"card-title d-flex align-items-center justify-content-between\"\n                    >\n                      <h4>Thông tin vận chuyển</h4>\n                      <p-tooltip\n                        label=\"Sửa thông tin\"\n                        position=\"top\"\n                        type=\"dark\"\n                      >\n                        <p-button\n                          icon=\"pencil\"\n                          type=\"default\"\n                          name=\"pencil\"\n                          @click=\"handleVisibleModalUpdateOrder\"\n                          size=\"xs\"\n                        ></p-button>\n                      </p-tooltip>\n                    </div>\n                    <p class=\"card-text\">\n                      <b>Tên:</b> {{ order | displayname }}<br />\n                      <span v-if=\"order.phone\"\n                        ><b>Điện thoại: </b>{{ order.phone }} <br\n                      /></span>\n                      <b>Địa chỉ:</b> {{ order.address }},\n                      <span v-if=\"order.address2\">{{ order.address2 }}</span\n                      >, <span>{{ order.city }} {{ order.postcode }}</span\n                      ><br />\n                      <span v-if=\"order.state_code\">\n                        <b>Mã thành phố:</b> {{ order.state_code }}<br\n                      /></span>\n                      <span><b>Mã quốc gia:</b> {{ order.country_code }}</span>\n                      <br />\n                      <span v-if=\"order.shipping_code\"\n                        ><b>Hình thức vận chuyển: </b\n                        >{{ order.shipping_method }} ({{\n                          order.shipping_code.toUpperCase()\n                        }})</span\n                      >\n                    </p>\n                  </div>\n                </section>\n                <section class=\"card section-order-note\" v-if=\"order.note\">\n                  <div class=\"card-block\">\n                    <h4 class=\"card-title\">Note</h4>\n                    <div class=\"card-text\">{{ order.note }}</div>\n                  </div>\n                </section>\n                <section\n                  class=\"card section-order-tracking\"\n                  v-if=\"order.fulfillments.length > 0\"\n                >\n                  <div class=\"card-block\">\n                    <div\n                      class=\"card-title d-flex align-items-center justify-content-between\"\n                    >\n                      <h4>Fulfillments</h4>\n                    </div>\n                    <div class=\"card-text\">\n                      <div\n                        v-for=\"item in order.fulfillments\"\n                        :key=\"item.id\"\n                        class=\"d-flex align-items-center justify-content-between\"\n                      >\n                        <a :href=\"item.tracking_url\" target=\"_blank\">{{\n                          item.tracking_number\n                        }}</a>\n                        <span class=\"actions\" v-show=\"false\">\n                          <p-tooltip\n                            label=\"Xem chi tiết\"\n                            position=\"top\"\n                            type=\"dark\"\n                          >\n                            <button\n                              class=\"btn--link\"\n                              @click=\"\n                                handleVisibleModalUpdateOrderTracking(item)\n                              \"\n                            >\n                              Xem\n                            </button>\n                          </p-tooltip>\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </section>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <modal-update-order\n      :visible.sync=\"isVisibleEditOrder\"\n      :current=\"order\"\n      :countries=\"countries\"\n      :loading=\"isOrderUpdating\"\n      @save=\"handleUpdateOrder\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport { cloneDeep } from '@core/utils'\nimport { FETCH_ORDER, UPDATE_ORDER } from '@/packages/container/store/types'\nimport mixinFulfillment from '../mixins/fulfillment'\nimport mixinUpdateOrder from '../mixins/update-order'\nimport OrderItems from './components/OrderItems'\nimport ModalUpdateOrder from './components/ModalUpdateOrder'\nimport {\n  FETCH_PRODUCT_TYPES,\n  FETCH_PROVIDERS,\n  FETCH_COUNTRIES,\n} from '@/packages/shared/store'\nimport { ORDER_STATUS_CANCELED } from '@core/constants'\n\nexport default {\n  name: 'OrderView',\n  mixins: [mixinUpdateOrder, mixinFulfillment],\n  components: {\n    OrderItems,\n    ModalUpdateOrder,\n  },\n  computed: {\n    ...mapState('container', {\n      order: (state) => state.order,\n    }),\n    ...mapState('shared', {\n      productTypes: (state) => state.productTypes,\n      providers: (state) => state.providers,\n      countries: (state) => state.countries,\n    }),\n    ...mapState('design', {\n      designs: (state) => state.designs,\n    }),\n    shopId() {\n      return this.order ? this.order.shop_id : 0\n    },\n    orderId() {\n      return parseInt(this.$route.params.id, 10)\n    },\n  },\n  data() {\n    return {\n      editing: false,\n      isFetching: false,\n      isUpdating: false,\n      orderItems: [],\n      resultFetch: {},\n      resultUpdate: {},\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    ...mapActions('container', [FETCH_ORDER, UPDATE_ORDER, 'getLogs']),\n    ...mapActions('shared', [\n      FETCH_PRODUCT_TYPES,\n      FETCH_PROVIDERS,\n      FETCH_COUNTRIES,\n    ]),\n    ...mapActions('design', ['fetchDesigns']),\n\n    async init() {\n      const id = parseInt(this.$route.params.id, 10)\n\n      if (id < 1) {\n        return this.$router.push({ name: 'order-list' })\n      }\n\n      this.isFetching = true\n\n      const { r1 } = await Promise.all([this.fetchOrder(id)])\n\n      this.resultFetch = r1\n      this.isFetching = false\n    },\n\n    async handleUpdateOrder(order) {\n      this.isUpdating = true\n      this.resultUpdate = await this.updateOrder(\n        Object.assign({}, order || this.order, { order_items: this.orderItems })\n      )\n\n      if (this.resultUpdate && this.resultUpdate.success) {\n        this.$set(this, 'orderItems', cloneDeep(this.order.order_items))\n        this.editing = false\n        this.isVisibleEditOrder = false\n        this.init()\n        this.$toast.open({\n          type: 'success',\n          message: 'Cập nhập order item thành công',\n        })\n      } else {\n        this.$toast.open({ type: 'error', message: this.resultUpdate.message })\n      }\n\n      this.isUpdating = false\n    },\n\n    handleSelectedDesign({ url, item, design }) {\n      this.handleUpdateOrderItem(item, {\n        design,\n        design_id: design.id,\n        image: url,\n      })\n    },\n\n    handleSelectedProductType({ item, product }) {\n      this.handleUpdateOrderItem(item, {\n        product_type_id: product.id,\n        product_type: product,\n      })\n    },\n    handleUpdateOrderItem(item, newVal) {\n      const index = this.orderItems.findIndex(({ id }) => id === item.id)\n\n      if (index !== -1) {\n        this.editing = true\n        this.$set(this.orderItems, index, Object.assign({}, item, newVal))\n      }\n    },\n    toggleEditOrder() {\n      if (this.editing) {\n        this.$set(this, 'orderItems', cloneDeep(this.order.order_items))\n        this.editing = false\n      } else {\n        this.editing = true\n      }\n    },\n\n    confirmUpdateOrder(action) {\n      this.$dialog.confirm({\n        message: 'Are you sure you want to do this?',\n        onConfirm: () => this.onUpdateOrderActionConfirm(action),\n      })\n    },\n\n    async onUpdateOrderActionConfirm(action) {\n      const order = Object.assign({}, this.order)\n      switch (action) {\n        case 'canceled':\n          order.status = ORDER_STATUS_CANCELED\n          break\n      }\n\n      this.handleUpdateOrder(order)\n    },\n  },\n  watch: {\n    'order.order_items': function(val) {\n      this.$set(this, 'orderItems', cloneDeep(val))\n    },\n  },\n  filters: {\n    displayname: (order) => {\n      return order.full_name || `${order.first_name} ${order.last_name}`\n    },\n  },\n}\n</script>\n"]}]}