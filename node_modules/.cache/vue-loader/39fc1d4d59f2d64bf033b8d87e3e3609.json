{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/Upload/Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/Upload/Upload.vue","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["\nimport ajax from './ajax'\nimport UploadDragger from './UploadDragger'\n\nexport default {\n  inject: ['uploader'],\n  components: {\n    UploadDragger,\n  },\n  props: {\n    type: String,\n    action: {\n      type: String,\n      required: true,\n    },\n    name: {\n      type: String,\n      default: 'file',\n    },\n    data: Object,\n    headers: Object,\n    withCredentials: Boolean,\n    multiple: Boolean,\n    accept: String,\n    onStart: Function,\n    onProgress: Function,\n    onSuccess: Function,\n    onError: Function,\n    beforeUpload: Function,\n    drag: Boolean,\n    onPreview: {\n      type: Function,\n      default: function() {},\n    },\n    onRemove: {\n      type: Function,\n      default: function() {},\n    },\n    fileList: Array,\n    autoUpload: Boolean,\n    listType: String,\n    httpRequest: {\n      type: Function,\n      default: ajax,\n    },\n    disabled: Boolean,\n    limit: Number,\n    onExceed: Function,\n    maxFileSize: {\n      type: Number,\n      default: 500000,\n    },\n  },\n\n  data() {\n    return {\n      mouseover: false,\n      reqs: {},\n    }\n  },\n\n  methods: {\n    isImage(str) {\n      return str.indexOf('image') !== -1\n    },\n    handleChange(ev) {\n      const files = ev.target.files\n\n      if (!files) return\n      this.uploadFiles(files)\n    },\n    uploadFiles(files) {\n      if (this.limit && this.fileList.length + files.length > this.limit) {\n        this.onExceed && this.onExceed(files, this.fileList)\n        return\n      }\n\n      let postFiles = Array.prototype.slice.call(files)\n\n      postFiles = postFiles.filter(({ size }) => {\n        return size <= this.maxFileSize\n      })\n\n      if (!this.multiple) {\n        postFiles = postFiles.slice(0, 1)\n      }\n\n      if (postFiles.length === 0) {\n        return\n      }\n\n      postFiles.forEach((rawFile) => {\n        this.onStart(rawFile)\n        if (this.autoUpload) this.upload(rawFile)\n      })\n    },\n    upload(rawFile) {\n      this.$refs.input.value = null\n\n      if (!this.beforeUpload) {\n        return this.post(rawFile)\n      }\n\n      const before = this.beforeUpload(rawFile)\n      if (before && before.then) {\n        before.then(\n          (processedFile) => {\n            const fileType = Object.prototype.toString.call(processedFile)\n\n            if (fileType === '[object File]' || fileType === '[object Blob]') {\n              if (fileType === '[object Blob]') {\n                processedFile = new File([processedFile], rawFile.name, {\n                  type: rawFile.type,\n                })\n              }\n              for (const p in rawFile) {\n                if (rawFile.hasOwnProperty(p)) {\n                  processedFile[p] = rawFile[p]\n                }\n              }\n              this.post(processedFile)\n            } else {\n              this.post(rawFile)\n            }\n          },\n          () => {\n            this.onRemove(null, rawFile)\n          }\n        )\n      } else if (before !== false) {\n        this.post(rawFile)\n      } else {\n        this.onRemove(null, rawFile)\n      }\n    },\n    abort(file) {\n      const { reqs } = this\n      if (file) {\n        let uid = file\n        if (file.uid) uid = file.uid\n        if (reqs[uid]) {\n          reqs[uid].abort()\n        }\n      } else {\n        Object.keys(reqs).forEach((uid) => {\n          if (reqs[uid]) reqs[uid].abort()\n          delete reqs[uid]\n        })\n      }\n    },\n    post(rawFile) {\n      const { uid } = rawFile\n      const options = {\n        headers: this.headers,\n        withCredentials: this.withCredentials,\n        file: rawFile,\n        data: this.data,\n        filename: this.name,\n        action: this.action,\n        onProgress: (e) => {\n          this.onProgress(e, rawFile)\n        },\n        onSuccess: (res) => {\n          this.onSuccess(res, rawFile)\n          delete this.reqs[uid]\n        },\n        onError: (err) => {\n          this.onError(err, rawFile)\n          delete this.reqs[uid]\n        },\n      }\n      const req = this.httpRequest(options)\n      this.reqs[uid] = req\n      if (req && req.then) {\n        req.then(options.onSuccess, options.onError)\n      }\n    },\n    handleClick() {\n      if (!this.disabled) {\n        this.$refs.input.value = null\n        this.$refs.input.click()\n      }\n    },\n    handleKeydown(e) {\n      if (e.target !== e.currentTarget) return\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick()\n      }\n    },\n  },\n\n  render() {\n    let {\n      handleClick,\n      drag,\n      name,\n      handleChange,\n      multiple,\n      accept,\n      listType,\n      uploadFiles,\n      disabled,\n      handleKeydown,\n    } = this\n    const data = {\n      class: {\n        'el-upload': true,\n      },\n      on: {\n        click: handleClick,\n        keydown: handleKeydown,\n      },\n    }\n    data.class[`el-upload--${listType}`] = true\n    return (\n      <div {...data} tabindex=\"0\">\n        {drag ? (\n          <upload-dragger disabled={disabled} on-file={uploadFiles}>\n            {this.$slots.default}\n          </upload-dragger>\n        ) : (\n          this.$slots.default\n        )}\n        <input\n          class=\"el-upload__input\"\n          type=\"file\"\n          ref=\"input\"\n          name={name}\n          on-change={handleChange}\n          multiple={multiple}\n          accept={accept}\n        />\n      </div>\n    )\n  },\n}\n",{"version":3,"sources":["Upload.vue"],"names":[],"mappingsfile":"Upload.vue","sourceRoot":"src/kit/Upload","sourcesContent":["<script>\nimport ajax from './ajax'\nimport UploadDragger from './UploadDragger'\n\nexport default {\n  inject: ['uploader'],\n  components: {\n    UploadDragger,\n  },\n  props: {\n    type: String,\n    action: {\n      type: String,\n      required: true,\n    },\n    name: {\n      type: String,\n      default: 'file',\n    },\n    data: Object,\n    headers: Object,\n    withCredentials: Boolean,\n    multiple: Boolean,\n    accept: String,\n    onStart: Function,\n    onProgress: Function,\n    onSuccess: Function,\n    onError: Function,\n    beforeUpload: Function,\n    drag: Boolean,\n    onPreview: {\n      type: Function,\n      default: function() {},\n    },\n    onRemove: {\n      type: Function,\n      default: function() {},\n    },\n    fileList: Array,\n    autoUpload: Boolean,\n    listType: String,\n    httpRequest: {\n      type: Function,\n      default: ajax,\n    },\n    disabled: Boolean,\n    limit: Number,\n    onExceed: Function,\n    maxFileSize: {\n      type: Number,\n      default: 500000,\n    },\n  },\n\n  data() {\n    return {\n      mouseover: false,\n      reqs: {},\n    }\n  },\n\n  methods: {\n    isImage(str) {\n      return str.indexOf('image') !== -1\n    },\n    handleChange(ev) {\n      const files = ev.target.files\n\n      if (!files) return\n      this.uploadFiles(files)\n    },\n    uploadFiles(files) {\n      if (this.limit && this.fileList.length + files.length > this.limit) {\n        this.onExceed && this.onExceed(files, this.fileList)\n        return\n      }\n\n      let postFiles = Array.prototype.slice.call(files)\n\n      postFiles = postFiles.filter(({ size }) => {\n        return size <= this.maxFileSize\n      })\n\n      if (!this.multiple) {\n        postFiles = postFiles.slice(0, 1)\n      }\n\n      if (postFiles.length === 0) {\n        return\n      }\n\n      postFiles.forEach((rawFile) => {\n        this.onStart(rawFile)\n        if (this.autoUpload) this.upload(rawFile)\n      })\n    },\n    upload(rawFile) {\n      this.$refs.input.value = null\n\n      if (!this.beforeUpload) {\n        return this.post(rawFile)\n      }\n\n      const before = this.beforeUpload(rawFile)\n      if (before && before.then) {\n        before.then(\n          (processedFile) => {\n            const fileType = Object.prototype.toString.call(processedFile)\n\n            if (fileType === '[object File]' || fileType === '[object Blob]') {\n              if (fileType === '[object Blob]') {\n                processedFile = new File([processedFile], rawFile.name, {\n                  type: rawFile.type,\n                })\n              }\n              for (const p in rawFile) {\n                if (rawFile.hasOwnProperty(p)) {\n                  processedFile[p] = rawFile[p]\n                }\n              }\n              this.post(processedFile)\n            } else {\n              this.post(rawFile)\n            }\n          },\n          () => {\n            this.onRemove(null, rawFile)\n          }\n        )\n      } else if (before !== false) {\n        this.post(rawFile)\n      } else {\n        this.onRemove(null, rawFile)\n      }\n    },\n    abort(file) {\n      const { reqs } = this\n      if (file) {\n        let uid = file\n        if (file.uid) uid = file.uid\n        if (reqs[uid]) {\n          reqs[uid].abort()\n        }\n      } else {\n        Object.keys(reqs).forEach((uid) => {\n          if (reqs[uid]) reqs[uid].abort()\n          delete reqs[uid]\n        })\n      }\n    },\n    post(rawFile) {\n      const { uid } = rawFile\n      const options = {\n        headers: this.headers,\n        withCredentials: this.withCredentials,\n        file: rawFile,\n        data: this.data,\n        filename: this.name,\n        action: this.action,\n        onProgress: (e) => {\n          this.onProgress(e, rawFile)\n        },\n        onSuccess: (res) => {\n          this.onSuccess(res, rawFile)\n          delete this.reqs[uid]\n        },\n        onError: (err) => {\n          this.onError(err, rawFile)\n          delete this.reqs[uid]\n        },\n      }\n      const req = this.httpRequest(options)\n      this.reqs[uid] = req\n      if (req && req.then) {\n        req.then(options.onSuccess, options.onError)\n      }\n    },\n    handleClick() {\n      if (!this.disabled) {\n        this.$refs.input.value = null\n        this.$refs.input.click()\n      }\n    },\n    handleKeydown(e) {\n      if (e.target !== e.currentTarget) return\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick()\n      }\n    },\n  },\n\n  render() {\n    let {\n      handleClick,\n      drag,\n      name,\n      handleChange,\n      multiple,\n      accept,\n      listType,\n      uploadFiles,\n      disabled,\n      handleKeydown,\n    } = this\n    const data = {\n      class: {\n        'el-upload': true,\n      },\n      on: {\n        click: handleClick,\n        keydown: handleKeydown,\n      },\n    }\n    data.class[`el-upload--${listType}`] = true\n    return (\n      <div {...data} tabindex=\"0\">\n        {drag ? (\n          <upload-dragger disabled={disabled} on-file={uploadFiles}>\n            {this.$slots.default}\n          </upload-dragger>\n        ) : (\n          this.$slots.default\n        )}\n        <input\n          class=\"el-upload__input\"\n          type=\"file\"\n          ref=\"input\"\n          name={name}\n          on-change={handleChange}\n          multiple={multiple}\n          accept={accept}\n        />\n      </div>\n    )\n  },\n}\n</script>\n"]}]}