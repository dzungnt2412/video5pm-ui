{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/input/Input.vue?vue&type=style&index=0&id=5a7456a7&scoped=true&lang=css&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/input/Input.vue","mtime":1604203859953},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/css-loader/index.js","mtime":1601450297541},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1597736282333},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/postcss-loader/src/index.js","mtime":1597736281462},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.invalid-error {\n  width: 100%;\n  margin-top: 10px;\n  font-size: 12px;\n  color: #db1802;\n}\n\n.check-list {\n  width: 100%;\n  margin-top: 10px;\n  font-size: 14px;\n  color: #37393e;\n  margin-left: 20px;\n}\n\n.success {\n  color: #0554f2;\n}\n\n.input-invalid {\n  border-color: #db1802;\n}\n\n.input-invalid.focus,\n.input-invalid:focus {\n  border-color: #db1802;\n}\n",{"version":3,"sources":["Input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Input.vue","sourceRoot":"uikit/components/input","sourcesContent":["<template>\n  <div :class=\"wrapperClasses\">\n    <template v-if=\"type !== 'textarea' && type !== 'password'\">\n      <div class=\"input-group-prepend\" v-if=\"$slots.prepend\">\n        <slot name=\"prepend\"></slot>\n      </div>\n\n      <i\n        class=\"form-control-icon\"\n        v-if=\"prefixIcon\"\n        :class=\"`wb-${prefixIcon}`\"\n      >\n      </i>\n\n      <i\n        class=\"form-control-icon form-control-icon-right\"\n        v-if=\"suffixIcon\"\n        :class=\"`wb-${suffixIcon}`\"\n      ></i>\n\n      <i\n        class=\"form-control-icon form-control-icon-right wb-close\"\n        v-else-if=\"isShowClear\"\n        @click=\"clear\"\n      >\n      </i>\n\n      <input\n        :class=\"formControlClasses\"\n        v-bind=\"$attrs\"\n        :value=\"nativeInputValue\"\n        :disabled=\"disabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        @change=\"handleChange\"\n        v-on=\"listeners\"\n        v-model=\"input\"\n        :type=\"type\"\n        ref=\"input\"\n      />\n\n      <div class=\"input-group-append\" v-if=\"$slots.append\">\n        <slot name=\"append\"></slot>\n      </div>\n    </template>\n\n    <template v-if=\"type == 'password'\">\n      <div class=\"input-group-prepend\" v-if=\"$slots.prepend\">\n        <slot name=\"prepend\"></slot>\n      </div>\n      <a\n        class=\"form-control-icon form-control-icon-right\"\n        @click.prevent=\"togglePasswordVisibelity()\"\n      >\n        <i class=\"wb-eye\"></i>\n      </a>\n\n      <input\n        :class=\"formControlClasses\"\n        v-bind=\"$attrs\"\n        :value=\"nativeInputValue\"\n        :disabled=\"disabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        @change=\"handleChange\"\n        v-on=\"listeners\"\n        v-model=\"input\"\n        :type=\"typeInputPassword\"\n        name=\"password\"\n        ref=\"input\"\n      />\n      <div class=\"input-group-append\" v-if=\"$slots.append\">\n        <slot name=\"append\"></slot>\n      </div>\n    </template>\n\n    <template v-if=\"type == 'textarea'\">\n      <textarea\n        :class=\"formControlClasses\"\n        v-bind=\"$attrs\"\n        :value=\"value\"\n        :disabled=\"disabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        @change=\"handleChange\"\n        ref=\"textarea\"\n      >\n      </textarea>\n    </template>\n\n    <span\n      class=\"invalid-error\"\n      v-if=\"!validateField.valid && type != 'username'\"\n    >\n      {{ validateField.errors[0] }}\n    </span>\n\n    <span\n      v-if=\"type == 'username' && input != '' && validate == 'on'\"\n      class=\"check-list\"\n    >\n      <div class=\"hints\">\n        <p\n          v-for=\"(item, index) in validateUsername\"\n          :key=\"index\"\n          class=\"checkList\"\n        >\n          <i class=\"wb-check\" :class=\"{ success: checkValidate(item.message) }\">\n          </i>\n          {{ item.message }}</p\n        >\n      </div>\n    </span>\n  </div>\n</template>\n\n<style scoped>\n.invalid-error {\n  width: 100%;\n  margin-top: 10px;\n  font-size: 12px;\n  color: #db1802;\n}\n\n.check-list {\n  width: 100%;\n  margin-top: 10px;\n  font-size: 14px;\n  color: #37393e;\n  margin-left: 20px;\n}\n\n.success {\n  color: #0554f2;\n}\n\n.input-invalid {\n  border-color: #db1802;\n}\n\n.input-invalid.focus,\n.input-invalid:focus {\n  border-color: #db1802;\n}\n</style>\n\n<script>\nimport FormElementMixin from '../../mixins/FormElement'\nexport default {\n  name: 'PInput',\n  inheritAttrs: false,\n  mixins: [FormElementMixin],\n  props: {\n    value: {\n      type: [String, Number],\n    },\n    validate: {\n      type: String,\n      default: 'off',\n    },\n    size: {\n      type: String,\n      default: '',\n      validator(value) {\n        return ['', 'lg', 'sm'].indexOf(value) > -1\n      },\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    type: {\n      type: String,\n      default: 'text',\n    },\n    autosize: {\n      type: [Boolean, Object],\n      default: false,\n    },\n    autocomplete: {\n      type: String,\n      default: 'off',\n    },\n    suffixIcon: {\n      type: String,\n      default: '',\n    },\n    prefixIcon: {\n      type: String,\n      default: '',\n    },\n    label: {\n      type: String,\n      default: '',\n    },\n    clearable: {\n      type: Boolean,\n      default: false,\n    },\n    rounded: {\n      type: Boolean,\n      default: false,\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      typeInputPassword: 'password',\n      input: '',\n      validatePassword: [\n        {\n          message: 'Phải có tối thiểu một ký tự viết hoa.',\n          regex: /[A-Z]+/,\n          result: true,\n        },\n        {\n          message: 'Phải có tối thiểu một chữ số.',\n          regex: /[0-9]+/,\n          result: true,\n        },\n        {\n          message: 'Phải có tối thiểu sáu ký tự.',\n          regex: /.{6,}/,\n          result: true,\n        },\n        {\n          message: 'Tối đa năm mươi ký tự.',\n          regex: /^[\\w]{0,50}$/,\n          result: true,\n        },\n        {\n          message: 'Không được có ký tự đặc biệt.',\n          regex: /[^\\w]/,\n          result: false,\n        },\n      ],\n      validateEmail: [\n        {\n          message: 'Chưa đúng định dạng email.(Ví dụ : abc@gmail.com)',\n          regex: /^[\\w-\\\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\n          result: true,\n        },\n      ],\n      validateUsername: [\n        {\n          message: 'Không được có ký tự đặc biệt.',\n          regex: /[^\\w]/,\n          result: false,\n        },\n        {\n          message: 'Phải có tối thiểu sáu ký tự.',\n          regex: /.{6,}/,\n          result: true,\n        },\n        {\n          message: 'Tối đa năm mươi ký tự.',\n          regex: /^[\\w]{0,50}$/,\n          result: true,\n        },\n      ],\n    }\n  },\n  computed: {\n    wrapperClasses() {\n      return [\n        'p-input-group',\n        'input-group',\n        this.size ? `input-group-${this.size}` : '',\n        {\n          'form-icons': this.prefixIcon || this.suffixIcon || this.isShowClear,\n        },\n        this.type === 'file' ? 'input-group-file' : '',\n      ]\n    },\n    formControlClasses() {\n      return [\n        'p-input',\n        'form-control',\n        {\n          rounded: this.rounded,\n        },\n        this.type == 'password' && !this.validateField.valid\n          ? 'input-invalid'\n          : '',\n        this.type == 'email' && !this.validateField.valid\n          ? 'input-invalid'\n          : '',\n      ]\n    },\n    isShowClear() {\n      return (\n        this.clearable &&\n        !this.disabled &&\n        !this.readonly &&\n        this.nativeInputValue\n      )\n    },\n    nativeInputValue() {\n      return this.value === null || typeof this.value === undefined\n        ? ''\n        : this.value\n    },\n    listeners() {\n      return {\n        ...this.$listeners,\n        input: this.onInput,\n        focus: this.onFocus,\n        keypress: this.keypress,\n      }\n    },\n    validateField() {\n      let errors = []\n      if (this.input == '') return { valid: true, errors }\n      if (this.validate == 'off') return { valid: true, errors }\n      if (this.type == 'password') {\n        for (let condition of this.validatePassword) {\n          if (!condition.regex.test(this.input) == condition.result) {\n            errors.push(condition.message)\n          }\n        }\n        if (errors.length === 0) {\n          return { valid: true, errors }\n        } else {\n          return { valid: false, errors }\n        }\n      } else if (this.type == 'email') {\n        for (let condition of this.validateEmail) {\n          if (!condition.regex.test(this.input) == condition.result) {\n            errors.push(condition.message)\n          }\n        }\n        if (errors.length === 0) {\n          return { valid: true, errors }\n        } else {\n          return { valid: false, errors }\n        }\n      } else if (this.type == 'username') {\n        for (let condition of this.validateUsername) {\n          if (!condition.regex.test(this.input) == condition.result) {\n            errors.push(condition.message)\n          }\n        }\n        if (errors.length === 0) {\n          return { valid: true, errors }\n        } else {\n          return { valid: false, errors }\n        }\n      } else {\n        return { valid: true, errors }\n      }\n    },\n  },\n  methods: {\n    checkValidate(item) {\n      return !this.validateField.errors.includes(item)\n    },\n    onInput(event) {\n      if (event.target.value !== this.value) {\n        this.$emit('input', event.target.value)\n        this.input = event.target.value\n      }\n    },\n    keypress(evt) {\n      if (this.type !== 'number') return true\n      evt = evt ? evt : window.event\n      const charCode = evt.which ? evt.which : evt.keyCode\n      if (\n        charCode > 31 &&\n        (charCode < 48 || charCode > 57) &&\n        charCode !== 46 &&\n        charCode !== 45\n      ) {\n        evt.preventDefault()\n      } else {\n        return true\n      }\n    },\n    handleChange(e) {\n      this.$emit('input', e.target.value)\n    },\n\n    togglePasswordVisibelity() {\n      this.typeInputPassword =\n        this.typeInputPassword == 'password' ? 'text' : 'password'\n    },\n\n    clear() {\n      this.$emit('input', '')\n    },\n  },\n}\n</script>\n"]}]}