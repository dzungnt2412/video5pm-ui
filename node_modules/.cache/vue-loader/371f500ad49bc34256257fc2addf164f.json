{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/input/Input.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/input/Input.vue","mtime":1605110384405},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FormElementMixin from '../../mixins/FormElement'\nexport default {\n  name: 'PInput',\n  inheritAttrs: false,\n  mixins: [FormElementMixin],\n  props: {\n    value: {\n      type: [String, Number],\n    },\n    validate: {\n      type: String,\n      default: 'off',\n    },\n    size: {\n      type: String,\n      default: '',\n      validator(value) {\n        return ['', 'lg', 'sm'].indexOf(value) > -1\n      },\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    type: {\n      type: String,\n      default: 'text',\n    },\n    autosize: {\n      type: [Boolean, Object],\n      default: false,\n    },\n    autocomplete: {\n      type: String,\n      default: 'off',\n    },\n    suffixIcon: {\n      type: String,\n      default: '',\n    },\n    prefixIcon: {\n      type: String,\n      default: '',\n    },\n    label: {\n      type: String,\n      default: '',\n    },\n    clearable: {\n      type: Boolean,\n      default: false,\n    },\n    rounded: {\n      type: Boolean,\n      default: false,\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n    },\n    hiddenPass: {\n      type: String,\n      default: 'off',\n    },\n    required: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      focusUsername: false,\n      typeInputPassword: 'password',\n      input: '',\n      validatePassword: [\n        {\n          message: 'Not contain special characters.',\n          regex: /[^A-Za-z\\d@$!%*#?& ]/,\n          result: false,\n        },\n        {\n          message: \"Your password can't start or end with a blank space\",\n          regex: /^[ ].*|[ ]$/,\n          result: false,\n        },\n        {\n          message: 'Be between 6-50 characters.',\n          regex: /^.{6,50}$/,\n          result: true,\n        },\n      ],\n      validateEmail: [\n        {\n          message:\n            'Email must be in a valid email format (e.g., you@example.com).',\n          regex: /^[a-z0-9A-Z_\\\\.]{1,32}@[a-z0-9]{2,}(\\.[a-z0-9]{2,4}){1,2}$/,\n          result: true,\n        },\n      ],\n      validateUsername: [\n        {\n          message: 'Not contain special characters.',\n          regex: /[^\\w]/,\n          result: false,\n        },\n        {\n          message: 'Be between 5-50 characters.',\n          regex: /^.{5,50}$/,\n          result: true,\n        },\n      ],\n      validatePhonenumber: [\n        {\n          message: 'Phonenumber is too long (maximum is 20 characters).',\n          regex: /^.{1,20}$/,\n          result: true,\n        },\n        {\n          message:\n            'Phone must be in a valid phone number  (e.g., 123 456-789).',\n          regex: /^[-\\\\s {2}\\\\./0-9]*$/,\n          result: true,\n        },\n        {\n          message: \"Your phonenumber can't end with a blank space\",\n          regex: /.*[ ]$/,\n          result: false,\n        },\n      ],\n      validateShopName: [\n        {\n          message: 'Be between 1-100 characters.',\n          regex: /^.{1,100}$/,\n          result: true,\n        },\n        {\n          message: 'Shop name must be in a valid shop name format.',\n          regex: /<[^>]*>$/,\n          result: false,\n        },\n      ],\n    }\n  },\n  computed: {\n    wrapperClasses() {\n      return [\n        'p-input-group',\n        'input-group',\n        this.size ? `input-group-${this.size}` : '',\n        {\n          'form-icons':\n            this.prefixIcon ||\n            this.suffixIcon ||\n            this.isShowClear ||\n            this.hiddenPass,\n        },\n        this.type === 'file' ? 'input-group-file' : '',\n      ]\n    },\n    formControlClasses() {\n      return [\n        'p-input',\n        'form-control',\n        {\n          rounded: this.rounded,\n        },\n        this.type == 'password' &&\n        !this.validateField.valid &&\n        this.validate == 'on'\n          ? 'input-invalid'\n          : '',\n        this.type == 'email' &&\n        !this.validateField.valid &&\n        this.validate == 'on'\n          ? 'input-invalid'\n          : '',\n        this.type == 'username' &&\n        !this.validateField.valid &&\n        this.validate == 'on'\n          ? 'input-invalid'\n          : '',\n        this.type == 'shopname' &&\n        !this.validateField.valid &&\n        this.validate == 'on'\n          ? 'input-invalid'\n          : '',\n        this.type == 'phonenumber' &&\n        !this.validateField.valid &&\n        this.validate == 'on'\n          ? 'input-invalid'\n          : '',\n        this.required == true ? 'input-invalid' : '',\n      ]\n    },\n    isShowClear() {\n      return (\n        this.clearable &&\n        !this.disabled &&\n        !this.readonly &&\n        this.nativeInputValue\n      )\n    },\n    nativeInputValue() {\n      return this.value === null || typeof this.value === undefined\n        ? ''\n        : this.value\n    },\n    listeners() {\n      return {\n        ...this.$listeners,\n        input: this.onInput,\n        focus: this.onFocus,\n        keypress: this.keypress,\n      }\n    },\n    validateField() {\n      let errors = []\n      if (this.input == '') return { valid: true, errors }\n      if (this.type == 'password') {\n        for (let condition of this.validatePassword) {\n          if (!condition.regex.test(this.input) == condition.result) {\n            errors.push(condition.message)\n          }\n        }\n        if (errors.length == 0) {\n          return { valid: true, errors }\n        } else {\n          return { valid: false, errors }\n        }\n      } else if (this.type == 'email') {\n        for (let condition of this.validateEmail) {\n          if (!condition.regex.test(this.input) == condition.result) {\n            errors.push(condition.message)\n          }\n        }\n        if (errors.length == 0) {\n          return { valid: true, errors }\n        } else {\n          return { valid: false, errors }\n        }\n      } else if (this.type == 'username') {\n        for (let condition of this.validateUsername) {\n          if (!condition.regex.test(this.input) == condition.result) {\n            errors.push(condition.message)\n          }\n        }\n        if (errors.length == 0) {\n          return { valid: true, errors }\n        } else {\n          return { valid: false, errors }\n        }\n      } else if (this.type == 'phonenumber') {\n        for (let condition of this.validatePhonenumber) {\n          if (!condition.regex.test(this.input) == condition.result) {\n            errors.push(condition.message)\n          }\n        }\n        if (errors.length == 0) {\n          return { valid: true, errors }\n        } else {\n          return { valid: false, errors }\n        }\n      } else if (this.type == 'shopname') {\n        for (let condition of this.validateShopName) {\n          if (!condition.regex.test(this.input) == condition.result) {\n            errors.push(condition.message)\n          }\n        }\n        if (errors.length == 0) {\n          return { valid: true, errors }\n        } else {\n          return { valid: false, errors }\n        }\n      } else {\n        return { valid: true, errors }\n      }\n    },\n  },\n  methods: {\n    checkValidate(item) {\n      return !this.validateField.errors.includes(item)\n    },\n    onInput(event) {\n      if (event.target.value !== this.value) {\n        this.$emit('input', event.target.value)\n        this.input = event.target.value\n      }\n    },\n    keypress(evt) {\n      if (this.type !== 'number') return true\n      evt = evt ? evt : window.event\n      const charCode = evt.which ? evt.which : evt.keyCode\n      if (\n        charCode > 31 &&\n        (charCode < 48 || charCode > 57) &&\n        charCode !== 46 &&\n        charCode !== 45\n      ) {\n        evt.preventDefault()\n      } else {\n        return true\n      }\n    },\n    handleChange(e) {\n      this.$emit('input', e.target.value)\n    },\n\n    togglePasswordVisibelity() {\n      this.typeInputPassword =\n        this.typeInputPassword == 'password' ? 'text' : 'password'\n    },\n\n    clear() {\n      this.$emit('input', '')\n    },\n  },\n  watch: {\n    input: {\n      handler() {\n        this.$emit('status', this.validateField.valid)\n      },\n      deep: true,\n    },\n  },\n}\n",null]}