{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/container/views/OrderList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/container/views/OrderList.vue","mtime":1604203852925},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { truncate } from '@core/utils/string'\nimport { VclTable } from 'vue-content-loading'\nimport { mapState, mapActions } from 'vuex'\nimport { ORDER_STATUS_PENDING } from '@core/constants'\nimport Browser from '@core/helpers/browser'\nimport mixinRoute from '@core/mixins/route'\nimport mixinTable from '@core/mixins/table'\nimport mixinExportOrder from '@/packages/container/mixins/export-file'\nimport {\n  CREATE_CONTAINER,\n  FETCH_ORDERS,\n  IMPORT_ORDERS,\n  PREVIEW_IMPORT_ORDERS,\n  FETCH_CONTAINERS,\n  EXPORT_ORDERS,\n} from '../store/types'\nimport { ORDER_STATUS } from '../constants'\nimport EmptySearchResult from '@components/shared/EmptySearchResult'\nimport Thumbnail from '@components/shared/Thumbnail'\nimport ModalImport from '@components/shared/modal/ModalImport'\nimport StatusTab from '@components/shared/StatusTab'\nimport ModalCreateOrAppendContainer from './components/ModalCreateOrAppendContainer'\nimport ModalPreviewImportOrder from './components/ModalPreviewImportOrder'\nimport shippings from '@/packages/shared/data/shippings'\nimport { ORDER_EXPORT_BUCKET } from '@core/constants/storage'\n\nexport default {\n  name: 'OrderList',\n  mixins: [mixinRoute, mixinTable, mixinExportOrder],\n  components: {\n    Thumbnail,\n    ModalImport,\n    ModalCreateOrAppendContainer,\n    ModalPreviewImportOrder,\n    StatusTab,\n    VclTable,\n    EmptySearchResult,\n  },\n  filters: {\n    shippingName(value) {\n      if (value) {\n        return shippings[value] || ''\n      }\n      return ''\n    },\n    trackingNumbers(value) {\n      if (!value) {\n        return\n      }\n\n      const items = value.map((item) => {\n        return item.tracking_number\n      })\n\n      return items.toString()\n    },\n  },\n  computed: {\n    ...mapState('container', {\n      count: (state) => state.orderCount,\n      orders: (state) => state.orders,\n      containers: (state) => state.containers,\n    }),\n    orderStatus() {\n      return ORDER_STATUS\n    },\n    availableCreateContainerOrders() {\n      if (!this.action.selected || !this.action.selected.length) {\n        return []\n      }\n\n      let orders = this.action.selected\n      return orders.filter(\n        ({ status, container_id }) =>\n          container_id < 1 && status === ORDER_STATUS_PENDING\n      )\n    },\n    items() {\n      return this.orders\n    },\n    imagePlaceholder() {\n      return require('@assets/img/image-placeholder.png')\n    },\n  },\n  data() {\n    return {\n      isFetching: true,\n      result: {},\n      actions: {\n        delete: {\n          title: 'Delete',\n          isNeedConfirm: false,\n        },\n        process: {\n          title: 'Process',\n        },\n        cancel: {\n          title: 'Cancel',\n          isNeedConfirm: true,\n        },\n      },\n      filter: {\n        search: '',\n        limit: 20,\n        status: '',\n      },\n      isVisibleImport: false,\n      isUploading: false,\n      isImporting: false,\n      orderItems: [],\n      file: null,\n      isVisiblePreview: false,\n      resultImport: {},\n      isVisibleCreateOrderAppendContainer: false,\n      isContainerCreating: false,\n      importOrder: {\n        create_container: true,\n        file: null,\n      },\n      importOrderErrors: {},\n      createContainerErrors: {},\n    }\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n  },\n  methods: {\n    truncate,\n    ...mapActions('container', [\n      FETCH_ORDERS,\n      IMPORT_ORDERS,\n      PREVIEW_IMPORT_ORDERS,\n      CREATE_CONTAINER,\n      FETCH_CONTAINERS,\n      EXPORT_ORDERS,\n    ]),\n\n    async init() {\n      this.isFetching = true\n      const { container_id: id } = this.$route.query\n\n      if (id) {\n        this.$set(this.filter, 'container_id', parseInt(id, 10))\n      }\n\n      this.handleUpdateRouteQuery()\n      this.result = await this.fetchOrders(this.filter)\n      this.isFetching = false\n    },\n\n    async handleActionItem() {\n      if (this.action.current === 'process') {\n        this.isVisibleCreateOrderAppendContainer = true\n        return\n      }\n\n      if (this.action.current === 'cancel') {\n        this.handleRejectOrders(this.action.item, 'canceled')\n      }\n    },\n\n    async handleCreateContainer({ ids, containerId }) {\n      this.createContainerErrors.shop = ''\n      this.isContainerCreating = true\n      const payload = { order_ids: ids }\n\n      if (containerId) {\n        payload.container_id = containerId\n      }\n\n      const result = await this.createContainer(payload)\n      this.isContainerCreating = false\n\n      if (!result.success) {\n        this.$toast.open({ type: 'error', message: result.message })\n        return\n      }\n\n      if (containerId) {\n        await this.init()\n        this.$toast.open({\n          type: 'success',\n          message: `Thêm đơn hàng vào delivery order ${containerId} thành công`,\n        })\n        this.isVisibleCreateOrderAppendContainer = false\n        return\n      }\n\n      this.$toast.open({\n        type: 'success',\n        message: 'Delivery order đã được tạo thành công',\n      })\n      this.$router.push({ name: 'container-view', params: { id: result.id } })\n    },\n\n    async handleImportOrder(file) {\n      this.importOrder.file = file\n\n      if (!this.validateImportOrder()) {\n        return\n      }\n\n      this.importOrder.file = file\n      this.isUploading = true\n      this.resultImport = await this.importOrders({\n        file: this.importOrder.file,\n        shop_id: this.importOrder.shop_id,\n      })\n\n      this.isVisibleImport = false\n      this.isVisiblePreview = true\n\n      if (this.resultImport && this.resultImport.success) {\n        this.isUploading = false\n        return\n      }\n\n      this.$toast.open({\n        type: 'error',\n        message: this.resultImport.message || 'File không đúng định dạng',\n      })\n      this.isUploading = false\n    },\n\n    async handleImportFile() {\n      const payload = {\n        file_url: this.resultPreview.file_url,\n        total_order: this.resultPreview.total_order,\n        create_container: this.importOrder.create_container,\n      }\n\n      this.isImporting = true\n      this.resultImport = await this.importOrders(payload)\n\n      if (this.resultImport && this.resultImport.success) {\n        if (this.resultImport.container_id) {\n          this.$toast.open({\n            type: 'success',\n            message: 'Thêm đơn hàng thành công',\n          })\n          this.$router.push({\n            name: 'container-view',\n            params: { id: this.resultImport.container_id },\n          })\n          return\n        }\n\n        this.handleResetImportFile()\n        this.isVisiblePreview = false\n        this.isImporting = false\n        this.$dialog.alert({\n          title: 'Import orders',\n          message:\n            'Chúng tôi hiện đang import lên hệ thống. Điều này sẽ mất ít thời gian. Một email sẽ được gửi cho bạn sau khi quá trình import hoàn tất.',\n        })\n        return\n      }\n\n      this.$toast.open({\n        type: 'error',\n        message: this.resultImport.message,\n      })\n    },\n\n    handleResetImportFile() {\n      this.$set(this, 'resultPreview', {})\n      this.file = null\n      this.isVisiblePreview = false\n    },\n\n    handleCloseImportFile() {\n      this.file = null\n      this.isVisibleImport = false\n    },\n\n    visibleImportModal() {\n      this.isVisibleImport = true\n    },\n\n    importTrackingSuccessful() {\n      return this.init()\n    },\n\n    validateImportOrder() {\n      this.$set(\n        this.importOrderErrors,\n        'file',\n        !this.importOrder.file ? '*Chưa có file' : ''\n      )\n\n      return !Object.values(this.importOrderErrors).filter(Boolean).length\n    },\n\n    async handleExportOrders() {\n      const result = await this.exportOrders(this.selectedIds)\n      this.exportFile(result, `orders.csv`, ORDER_EXPORT_BUCKET)\n    },\n\n    getSKU(order) {\n      if (order && order.order_items) {\n        return order.order_items\n          .map(({ sku }) => sku)\n          .filter((sku) => sku)\n          .join(', ')\n      }\n    },\n  },\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n",{"version":3,"sources":["OrderList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"OrderList.vue","sourceRoot":"src/packages/container/views","sourcesContent":["<template>\n  <div class=\"order-list-page page\">\n    <div class=\"page-header\">\n      <div class=\"page-header-group ml-0\">\n        <div class=\"page-header-group-actions__left\">\n          <a\n            href=\"#\"\n            class=\"btn btn-primary\"\n            @click.prevent=\"visibleImportModal\"\n          >\n            <p-icon name=\"upload\"></p-icon>\n            <span class=\"ml-5\">Thêm đơn hàng</span>\n          </a>\n          <a\n            href=\"#\"\n            class=\"ml-10 btn btn-primary\"\n            v-if=\"selectedIds && selectedIds.length\"\n            @click.prevent=\"handleExportOrders\"\n          >\n            <p-icon name=\"download\" icon-pack=\"md\"></p-icon>\n            <span class=\"ml-5\">Tải đơn đã chọn</span>\n          </a>\n        </div>\n      </div>\n    </div>\n    <div class=\"page-content container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-xl-12\">\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <status-tab v-model=\"filter.status\" :status=\"orderStatus\" />\n              <p-input\n                placeholder=\"Tìm kiếm đơn hàng (theo mã đơn | tên khách | phương thức vận chuyển)\"\n                prefixIcon=\"search\"\n                class=\"mb-2\"\n                type=\"password\"\n                :value=\"filter.search\"\n                @keyup.enter=\"handleSearch\"\n              >\n                <template slot=\"append\">\n                  <p-button\n                    type=\"default\"\n                    icon=\"close\"\n                    v-if=\"filter.search\"\n                    @click=\"clearSearch\"\n                  ></p-button>\n                </template>\n              </p-input>\n              <VclTable class=\"my-20\" v-if=\"isFetching\"></VclTable>\n              <template v-else-if=\"orders.length\">\n                <div class=\"table-responsive\">\n                  <table class=\"table table-hover\">\n                    <thead>\n                      <tr>\n                        <th\n                          width=\"40\"\n                          class=\"order-select\"\n                          :colspan=\"totalSelected > 0 ? 9 : 1\"\n                        >\n                          <p-checkbox\n                            class=\"order-select-checkbox\"\n                            :style=\"totalSelected > 0 && { width: 0 }\"\n                            :value=\"isAllChecked\"\n                            @change.native=\"toggleSelectAll\"\n                            :indeterminate=\"isIndeterminate\"\n                          ></p-checkbox>\n                          <div\n                            class=\"bulk-actions d-flex align-items-center\"\n                            v-if=\"totalSelected > 0\"\n                          >\n                            <div class=\"bulk-actions__main-bar\">\n                              <span class=\"bulk-actions__selection-count\">{{\n                                selectionCountText\n                              }}</span>\n                              <p-button\n                                class=\"bulk-actions__actions\"\n                                type=\"primary\"\n                                @click=\"handleAction('process')\"\n                                v-if=\"\n                                  availableCreateContainerOrders &&\n                                    availableCreateContainerOrders.length\n                                \"\n                                >Tạo deliver Order</p-button\n                              >\n                            </div>\n                            <span class=\"bulk-select-all\" v-if=\"isAllChecked\"\n                              >Tất cả các đơn trên trang này được chọn.</span\n                            >\n                          </div>\n                        </th>\n                        <template v-if=\"totalSelected === 0\">\n                          <th>Mã</th>\n                          <th>Design</th>\n                          <th>Tracking Number</th>\n                          <th>Số đơn hàng</th>\n                          <th>Tên khách hàng</th>\n                          <th :style=\"{ 'max-width': '150px' }\">SKU</th>\n                          <th>Quốc gia</th>\n                          <th>Ngày</th>\n                          <th title=\"Phương thức vận chuyển\">PT vận chuyển</th>\n                          <th>Trạng thái</th>\n                          <th class=\"text-right\">Chức năng</th>\n                        </template>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr v-for=\"(item, i) in orders\" :key=\"i\">\n                        <td width=\"30\" class=\"ml-0 text-center\">\n                          <p-checkbox\n                            v-model=\"action.selected\"\n                            :native-value=\"item\"\n                          ></p-checkbox>\n                        </td>\n                        <td width=\"40\">\n                          <router-link\n                            :style=\"{ textDecoration: 'none' }\"\n                            :to=\"{\n                              name: 'order-view',\n                              params: { id: item.id },\n                            }\"\n                            >{{ item.id }}</router-link\n                          ></td\n                        >\n                        <td>\n                          <template>\n                            <div class=\"order-thumbnail\">\n                              <thumbnail\n                                class=\"order-image\"\n                                v-if=\"\n                                  item.order_items &&\n                                    item.order_items.length &&\n                                    item.order_items[0].image\n                                \"\n                                :src=\"item.order_items[0].image\"\n                              />\n                              <img\n                                class=\"order-image order-image-placeholder\"\n                                :src=\"imagePlaceholder\"\n                                v-else\n                                alt\n                              />\n                            </div>\n                          </template>\n                        </td>\n                        <td>\n                          <span>{{ item.fulfillments | trackingNumbers }}</span>\n                        </td>\n                        <td>{{ item.ref_id }}</td>\n                        <td>\n                          {{\n                            item.full_name\n                              ? item.full_name\n                              : item.first_name + ' ' + item.last_name\n                          }}\n                        </td>\n                        <td :style=\"{ 'max-width': '150px' }\">\n                          <p-tooltip\n                            :label=\"getSKU(item)\"\n                            position=\"top\"\n                            type=\"dark\"\n                            :active=\"getSKU(item).length > 30\"\n                            >{{ truncate(getSKU(item), 30) }}</p-tooltip\n                          >\n                        </td>\n                        <td>{{ item.country_code }}</td>\n                        <td>{{ item.created_at | date('dd/MM/yyyy') }}</td>\n                        <td>\n                          <p-tooltip\n                            :label=\"item.shipping_method\"\n                            position=\"top\"\n                            type=\"dark\"\n                            >{{ item.shipping_code | shippingName }}</p-tooltip\n                          >\n                        </td>\n                        <td>\n                          <span v-status:status=\"item.status\"></span>\n                        </td>\n                        <td class=\"text-right\">\n                          <p-popover\n                            class=\"mx-10\"\n                            placement=\"top\"\n                            trigger=\"hover\"\n                            type=\"dark\"\n                            content=\"Xem chi tiết\"\n                            compact\n                          >\n                            <router-link\n                              slot=\"reference\"\n                              :to=\"{\n                                name: 'order-view',\n                                params: { id: item.id },\n                              }\"\n                            >\n                              <p-icon name=\"eye\" iconPack=\"md\"></p-icon>\n                            </router-link>\n                          </p-popover>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div class=\"d-flex justify-content-between align-items-center\">\n                  <span>{{ paginationLabel }}</span>\n                  <p-pagination\n                    :total=\"count\"\n                    :perPage=\"filter.limit\"\n                    :current.sync=\"filter.page\"\n                    size=\"sm\"\n                  ></p-pagination>\n                </div>\n              </template>\n              <EmptySearchResult\n                v-else\n                title=\"Không tìm thấy đơn hàng\"\n              ></EmptySearchResult>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <modal-import\n      :visible.sync=\"isVisibleImport\"\n      :uploading=\"isUploading\"\n      :error=\"importOrderErrors.file\"\n      accept=\".csv\"\n      title=\"Thêm đơn hàng từ file *.CSV\"\n      @close=\"handleCloseImportFile\"\n      @selected=\"handleImportOrder\"\n      v-if=\"isVisibleImport\"\n    >\n      <p class=\"font-weight-700\">\n        Yêu cầu: Upload file *.CSV theo\n        <a\n          href=\"https://static.lionnix.net/file-templates/lionnix-template-fulfill.csv\"\n          target=\"_blank\"\n        >\n          <u>mẫu của hệ thống</u>\n        </a>\n      </p>\n    </modal-import>\n\n    <modal-preview-import-order\n      :visible.sync=\"isVisiblePreview\"\n      :order=\"resultImport.order\"\n      :order-errors=\"resultImport.import_errors\"\n      :total=\"resultImport.total_order\"\n      :importing=\"isImporting\"\n      @import=\"handleImportFile\"\n      v-if=\"isVisiblePreview\"\n    ></modal-preview-import-order>\n\n    <modal-create-or-append-container\n      :visible.sync=\"isVisibleCreateOrderAppendContainer\"\n      :loading=\"isContainerCreating\"\n      :orders=\"availableCreateContainerOrders\"\n      :containers=\"containers\"\n      :fetch-containers=\"fetchContainers\"\n      @save=\"handleCreateContainer\"\n      v-if=\"isVisibleCreateOrderAppendContainer\"\n    ></modal-create-or-append-container>\n  </div>\n</template>\n\n<script>\nimport { truncate } from '@core/utils/string'\nimport { VclTable } from 'vue-content-loading'\nimport { mapState, mapActions } from 'vuex'\nimport { ORDER_STATUS_PENDING } from '@core/constants'\nimport Browser from '@core/helpers/browser'\nimport mixinRoute from '@core/mixins/route'\nimport mixinTable from '@core/mixins/table'\nimport mixinExportOrder from '@/packages/container/mixins/export-file'\nimport {\n  CREATE_CONTAINER,\n  FETCH_ORDERS,\n  IMPORT_ORDERS,\n  PREVIEW_IMPORT_ORDERS,\n  FETCH_CONTAINERS,\n  EXPORT_ORDERS,\n} from '../store/types'\nimport { ORDER_STATUS } from '../constants'\nimport EmptySearchResult from '@components/shared/EmptySearchResult'\nimport Thumbnail from '@components/shared/Thumbnail'\nimport ModalImport from '@components/shared/modal/ModalImport'\nimport StatusTab from '@components/shared/StatusTab'\nimport ModalCreateOrAppendContainer from './components/ModalCreateOrAppendContainer'\nimport ModalPreviewImportOrder from './components/ModalPreviewImportOrder'\nimport shippings from '@/packages/shared/data/shippings'\nimport { ORDER_EXPORT_BUCKET } from '@core/constants/storage'\n\nexport default {\n  name: 'OrderList',\n  mixins: [mixinRoute, mixinTable, mixinExportOrder],\n  components: {\n    Thumbnail,\n    ModalImport,\n    ModalCreateOrAppendContainer,\n    ModalPreviewImportOrder,\n    StatusTab,\n    VclTable,\n    EmptySearchResult,\n  },\n  filters: {\n    shippingName(value) {\n      if (value) {\n        return shippings[value] || ''\n      }\n      return ''\n    },\n    trackingNumbers(value) {\n      if (!value) {\n        return\n      }\n\n      const items = value.map((item) => {\n        return item.tracking_number\n      })\n\n      return items.toString()\n    },\n  },\n  computed: {\n    ...mapState('container', {\n      count: (state) => state.orderCount,\n      orders: (state) => state.orders,\n      containers: (state) => state.containers,\n    }),\n    orderStatus() {\n      return ORDER_STATUS\n    },\n    availableCreateContainerOrders() {\n      if (!this.action.selected || !this.action.selected.length) {\n        return []\n      }\n\n      let orders = this.action.selected\n      return orders.filter(\n        ({ status, container_id }) =>\n          container_id < 1 && status === ORDER_STATUS_PENDING\n      )\n    },\n    items() {\n      return this.orders\n    },\n    imagePlaceholder() {\n      return require('@assets/img/image-placeholder.png')\n    },\n  },\n  data() {\n    return {\n      isFetching: true,\n      result: {},\n      actions: {\n        delete: {\n          title: 'Delete',\n          isNeedConfirm: false,\n        },\n        process: {\n          title: 'Process',\n        },\n        cancel: {\n          title: 'Cancel',\n          isNeedConfirm: true,\n        },\n      },\n      filter: {\n        search: '',\n        limit: 20,\n        status: '',\n      },\n      isVisibleImport: false,\n      isUploading: false,\n      isImporting: false,\n      orderItems: [],\n      file: null,\n      isVisiblePreview: false,\n      resultImport: {},\n      isVisibleCreateOrderAppendContainer: false,\n      isContainerCreating: false,\n      importOrder: {\n        create_container: true,\n        file: null,\n      },\n      importOrderErrors: {},\n      createContainerErrors: {},\n    }\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n  },\n  methods: {\n    truncate,\n    ...mapActions('container', [\n      FETCH_ORDERS,\n      IMPORT_ORDERS,\n      PREVIEW_IMPORT_ORDERS,\n      CREATE_CONTAINER,\n      FETCH_CONTAINERS,\n      EXPORT_ORDERS,\n    ]),\n\n    async init() {\n      this.isFetching = true\n      const { container_id: id } = this.$route.query\n\n      if (id) {\n        this.$set(this.filter, 'container_id', parseInt(id, 10))\n      }\n\n      this.handleUpdateRouteQuery()\n      this.result = await this.fetchOrders(this.filter)\n      this.isFetching = false\n    },\n\n    async handleActionItem() {\n      if (this.action.current === 'process') {\n        this.isVisibleCreateOrderAppendContainer = true\n        return\n      }\n\n      if (this.action.current === 'cancel') {\n        this.handleRejectOrders(this.action.item, 'canceled')\n      }\n    },\n\n    async handleCreateContainer({ ids, containerId }) {\n      this.createContainerErrors.shop = ''\n      this.isContainerCreating = true\n      const payload = { order_ids: ids }\n\n      if (containerId) {\n        payload.container_id = containerId\n      }\n\n      const result = await this.createContainer(payload)\n      this.isContainerCreating = false\n\n      if (!result.success) {\n        this.$toast.open({ type: 'error', message: result.message })\n        return\n      }\n\n      if (containerId) {\n        await this.init()\n        this.$toast.open({\n          type: 'success',\n          message: `Thêm đơn hàng vào delivery order ${containerId} thành công`,\n        })\n        this.isVisibleCreateOrderAppendContainer = false\n        return\n      }\n\n      this.$toast.open({\n        type: 'success',\n        message: 'Delivery order đã được tạo thành công',\n      })\n      this.$router.push({ name: 'container-view', params: { id: result.id } })\n    },\n\n    async handleImportOrder(file) {\n      this.importOrder.file = file\n\n      if (!this.validateImportOrder()) {\n        return\n      }\n\n      this.importOrder.file = file\n      this.isUploading = true\n      this.resultImport = await this.importOrders({\n        file: this.importOrder.file,\n        shop_id: this.importOrder.shop_id,\n      })\n\n      this.isVisibleImport = false\n      this.isVisiblePreview = true\n\n      if (this.resultImport && this.resultImport.success) {\n        this.isUploading = false\n        return\n      }\n\n      this.$toast.open({\n        type: 'error',\n        message: this.resultImport.message || 'File không đúng định dạng',\n      })\n      this.isUploading = false\n    },\n\n    async handleImportFile() {\n      const payload = {\n        file_url: this.resultPreview.file_url,\n        total_order: this.resultPreview.total_order,\n        create_container: this.importOrder.create_container,\n      }\n\n      this.isImporting = true\n      this.resultImport = await this.importOrders(payload)\n\n      if (this.resultImport && this.resultImport.success) {\n        if (this.resultImport.container_id) {\n          this.$toast.open({\n            type: 'success',\n            message: 'Thêm đơn hàng thành công',\n          })\n          this.$router.push({\n            name: 'container-view',\n            params: { id: this.resultImport.container_id },\n          })\n          return\n        }\n\n        this.handleResetImportFile()\n        this.isVisiblePreview = false\n        this.isImporting = false\n        this.$dialog.alert({\n          title: 'Import orders',\n          message:\n            'Chúng tôi hiện đang import lên hệ thống. Điều này sẽ mất ít thời gian. Một email sẽ được gửi cho bạn sau khi quá trình import hoàn tất.',\n        })\n        return\n      }\n\n      this.$toast.open({\n        type: 'error',\n        message: this.resultImport.message,\n      })\n    },\n\n    handleResetImportFile() {\n      this.$set(this, 'resultPreview', {})\n      this.file = null\n      this.isVisiblePreview = false\n    },\n\n    handleCloseImportFile() {\n      this.file = null\n      this.isVisibleImport = false\n    },\n\n    visibleImportModal() {\n      this.isVisibleImport = true\n    },\n\n    importTrackingSuccessful() {\n      return this.init()\n    },\n\n    validateImportOrder() {\n      this.$set(\n        this.importOrderErrors,\n        'file',\n        !this.importOrder.file ? '*Chưa có file' : ''\n      )\n\n      return !Object.values(this.importOrderErrors).filter(Boolean).length\n    },\n\n    async handleExportOrders() {\n      const result = await this.exportOrders(this.selectedIds)\n      this.exportFile(result, `orders.csv`, ORDER_EXPORT_BUCKET)\n    },\n\n    getSKU(order) {\n      if (order && order.order_items) {\n        return order.order_items\n          .map(({ sku }) => sku)\n          .filter((sku) => sku)\n          .join(', ')\n      }\n    },\n  },\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n</script>\n"]}]}