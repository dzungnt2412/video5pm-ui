{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/uikit/components/popover/Popover.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/uikit/components/popover/Popover.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  generateId,\n  domOff,\n  domOn,\n  addClass,\n  removeClass,\n} from '../../utils/dom'\nimport Popper from '../../mixins/Popper'\n\nexport default {\n  name: 'PPopover',\n  mixins: [Popper],\n  props: {\n    trigger: {\n      type: String,\n      default: 'click',\n      validator: (value) =>\n        ['click', 'focus', 'hover', 'manual'].indexOf(value) > -1,\n    },\n    openDelay: {\n      type: Number,\n      default: 0,\n    },\n    title: String,\n    disabled: Boolean,\n    content: String,\n    reference: {},\n    popperClass: String,\n    width: {},\n    visibleArrow: {\n      default: true,\n    },\n    arrowOffset: {\n      type: Number,\n      default: 0,\n    },\n    transition: {\n      type: String,\n      default: 'fade-in-linear',\n    },\n    useCustomClass: {\n      type: Boolean,\n      default: false,\n    },\n    type: {\n      default: '',\n    },\n    compact: {\n      default: false,\n      type: Boolean,\n    },\n  },\n  computed: {\n    wrapperClasses() {\n      const classes = [\n        this.popperClass,\n        this.content && !this.compact ? 'p-popover--plain' : '',\n        this.content && this.compact ? 'p-popover--compact' : '',\n        this.type ? `is-${this.type}` : '',\n      ]\n      if (this.showPopper) {\n        classes.push('popover-activated')\n      }\n\n      if (!this.useCustomClass) {\n        classes.push('p-popover')\n      }\n      return classes\n    },\n\n    tooltipId() {\n      return `p-popover-${generateId()}`\n    },\n  },\n  mounted() {\n    let reference = (this.referenceElm = this.reference || this.$refs.reference)\n    const popper = this.popper || this.$refs.popper\n\n    if (!reference && this.$slots.reference && this.$slots.reference[0]) {\n      reference = this.referenceElm = this.$slots.reference[0].elm\n    }\n\n    if (reference) {\n      addClass(reference, 'p-popover__reference')\n      reference.setAttribute('aria-describedby', this.tooltipId)\n      reference.setAttribute('tabindex', 0) // tab序列\n      popper.setAttribute('tabindex', 0)\n\n      if (this.trigger !== 'click') {\n        domOn(reference, 'focusin', () => {\n          this.handleFocus()\n          const instance = reference.__vue__\n          if (instance && typeof instance.focus === 'function') {\n            instance.focus()\n          }\n        })\n        domOn(popper, 'focusin', this.handleFocus)\n        domOn(reference, 'focusout', this.handleBlur)\n        domOn(popper, 'focusout', this.handleBlur)\n      }\n\n      domOn(reference, 'keydown', this.handleKeydown)\n      domOn(reference, 'click', this.handleClick)\n    }\n    if (this.trigger === 'click') {\n      domOn(reference, 'click', this.doToggle)\n      domOn(document, 'click', this.handleDocumentClick)\n    } else if (this.trigger === 'hover') {\n      domOn(reference, 'mouseenter', this.handleMouseEnter)\n      domOn(popper, 'mouseenter', this.handleMouseEnter)\n      domOn(reference, 'mouseleave', this.handleMouseLeave)\n      domOn(popper, 'mouseleave', this.handleMouseLeave)\n    } else if (this.trigger === 'focus') {\n      if (reference.querySelector('input, textarea')) {\n        domOn(reference, 'focusin', this.doShow)\n        domOn(reference, 'focusout', this.doClose)\n      } else {\n        domOn(reference, 'mousedown', this.doShow)\n        domOn(reference, 'mouseup', this.doClose)\n      }\n    }\n  },\n  methods: {\n    doToggle() {\n      this.showPopper = !this.showPopper\n    },\n    doShow() {\n      this.showPopper = true\n    },\n    doClose() {\n      this.showPopper = false\n    },\n    handleFocus() {\n      addClass(this.referenceElm, 'focusing')\n      if (this.trigger === 'click' || this.trigger === 'focus') {\n        this.showPopper = true\n      }\n    },\n    handleClick() {\n      removeClass(this.referenceElm, 'focusing')\n    },\n    handleBlur() {\n      removeClass(this.referenceElm, 'focusing')\n      if (this.trigger === 'click' || this.trigger === 'focus')\n        this.showPopper = false\n    },\n    handleMouseEnter() {\n      clearTimeout(this._timer)\n      if (this.openDelay) {\n        this._timer = setTimeout(() => {\n          this.showPopper = true\n        }, this.openDelay)\n      } else {\n        this.showPopper = true\n      }\n    },\n    handleKeydown(ev) {\n      if (ev.keyCode === 27 && this.trigger !== 'manual') {\n        this.doClose()\n      }\n    },\n    handleMouseLeave() {\n      clearTimeout(this._timer)\n      this._timer = setTimeout(() => {\n        this.showPopper = false\n      }, 200)\n    },\n    handleDocumentClick(e) {\n      let reference = this.reference || this.$refs.reference\n      const popper = this.popper || this.$refs.popper\n\n      if (!reference && this.$slots.reference && this.$slots.reference[0]) {\n        reference = this.referenceElm = this.$slots.reference[0].elm\n      }\n\n      if (\n        !this.$el ||\n        !reference ||\n        this.$el.contains(e.target) ||\n        reference.contains(e.target) ||\n        !popper ||\n        popper.contains(e.target)\n      ) {\n        return\n      }\n\n      this.showPopper = false\n    },\n    handleAfterEnter() {\n      this.$emit('after-enter')\n    },\n    handleAfterLeave() {\n      this.$emit('after-leave')\n      this.doDestroy()\n    },\n    cleanup() {\n      if (this.openDelay) {\n        clearTimeout(this._timer)\n      }\n    },\n  },\n  watch: {\n    showPopper(val) {\n      if (this.disabled) {\n        return\n      }\n\n      val ? this.$emit('show') : this.$emit('hide')\n    },\n  },\n\n  beforeDestroy() {\n    this.cleanup()\n  },\n\n  deactivated() {\n    this.cleanup()\n  },\n\n  destroyed() {\n    const reference = this.reference\n\n    domOff(reference, 'click', this.doToggle)\n    domOff(reference, 'mouseup', this.doClose)\n    domOff(reference, 'mousedown', this.doShow)\n    domOff(reference, 'focusin', this.doShow)\n    domOff(reference, 'focusout', this.doClose)\n    domOff(reference, 'mousedown', this.doShow)\n    domOff(reference, 'mouseup', this.doClose)\n    domOff(reference, 'mouseleave', this.handleMouseLeave)\n    domOff(reference, 'mouseenter', this.handleMouseEnter)\n    domOff(document, 'click', this.handleDocumentClick)\n  },\n}\n",{"version":3,"sources":["Popover.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Popover.vue","sourceRoot":"uikit/components/popover","sourcesContent":["<template>\n  <span>\n    <transition\n      :name=\"transition\"\n      @after-enter=\"handleAfterEnter\"\n      @after-leave=\"handleAfterLeave\"\n    >\n      <div\n        class=\"p-popper\"\n        :class=\"wrapperClasses\"\n        ref=\"popper\"\n        v-show=\"!disabled && showPopper\"\n        :style=\"width ? { width: width + 'px' } : { width: 'auto' }\"\n        role=\"tooltip\"\n        :id=\"tooltipId\"\n        :aria-hidden=\"disabled || !showPopper ? 'true' : 'false'\"\n      >\n        <div class=\"p-popover__title\" v-if=\"title\" v-text=\"title\"></div>\n        <slot>{{ content }}</slot>\n        <slot name=\"custom-content\"></slot>\n      </div>\n    </transition>\n    <slot name=\"reference\"></slot>\n  </span>\n</template>\n\n<script>\nimport {\n  generateId,\n  domOff,\n  domOn,\n  addClass,\n  removeClass,\n} from '../../utils/dom'\nimport Popper from '../../mixins/Popper'\n\nexport default {\n  name: 'PPopover',\n  mixins: [Popper],\n  props: {\n    trigger: {\n      type: String,\n      default: 'click',\n      validator: (value) =>\n        ['click', 'focus', 'hover', 'manual'].indexOf(value) > -1,\n    },\n    openDelay: {\n      type: Number,\n      default: 0,\n    },\n    title: String,\n    disabled: Boolean,\n    content: String,\n    reference: {},\n    popperClass: String,\n    width: {},\n    visibleArrow: {\n      default: true,\n    },\n    arrowOffset: {\n      type: Number,\n      default: 0,\n    },\n    transition: {\n      type: String,\n      default: 'fade-in-linear',\n    },\n    useCustomClass: {\n      type: Boolean,\n      default: false,\n    },\n    type: {\n      default: '',\n    },\n    compact: {\n      default: false,\n      type: Boolean,\n    },\n  },\n  computed: {\n    wrapperClasses() {\n      const classes = [\n        this.popperClass,\n        this.content && !this.compact ? 'p-popover--plain' : '',\n        this.content && this.compact ? 'p-popover--compact' : '',\n        this.type ? `is-${this.type}` : '',\n      ]\n      if (this.showPopper) {\n        classes.push('popover-activated')\n      }\n\n      if (!this.useCustomClass) {\n        classes.push('p-popover')\n      }\n      return classes\n    },\n\n    tooltipId() {\n      return `p-popover-${generateId()}`\n    },\n  },\n  mounted() {\n    let reference = (this.referenceElm = this.reference || this.$refs.reference)\n    const popper = this.popper || this.$refs.popper\n\n    if (!reference && this.$slots.reference && this.$slots.reference[0]) {\n      reference = this.referenceElm = this.$slots.reference[0].elm\n    }\n\n    if (reference) {\n      addClass(reference, 'p-popover__reference')\n      reference.setAttribute('aria-describedby', this.tooltipId)\n      reference.setAttribute('tabindex', 0) // tab序列\n      popper.setAttribute('tabindex', 0)\n\n      if (this.trigger !== 'click') {\n        domOn(reference, 'focusin', () => {\n          this.handleFocus()\n          const instance = reference.__vue__\n          if (instance && typeof instance.focus === 'function') {\n            instance.focus()\n          }\n        })\n        domOn(popper, 'focusin', this.handleFocus)\n        domOn(reference, 'focusout', this.handleBlur)\n        domOn(popper, 'focusout', this.handleBlur)\n      }\n\n      domOn(reference, 'keydown', this.handleKeydown)\n      domOn(reference, 'click', this.handleClick)\n    }\n    if (this.trigger === 'click') {\n      domOn(reference, 'click', this.doToggle)\n      domOn(document, 'click', this.handleDocumentClick)\n    } else if (this.trigger === 'hover') {\n      domOn(reference, 'mouseenter', this.handleMouseEnter)\n      domOn(popper, 'mouseenter', this.handleMouseEnter)\n      domOn(reference, 'mouseleave', this.handleMouseLeave)\n      domOn(popper, 'mouseleave', this.handleMouseLeave)\n    } else if (this.trigger === 'focus') {\n      if (reference.querySelector('input, textarea')) {\n        domOn(reference, 'focusin', this.doShow)\n        domOn(reference, 'focusout', this.doClose)\n      } else {\n        domOn(reference, 'mousedown', this.doShow)\n        domOn(reference, 'mouseup', this.doClose)\n      }\n    }\n  },\n  methods: {\n    doToggle() {\n      this.showPopper = !this.showPopper\n    },\n    doShow() {\n      this.showPopper = true\n    },\n    doClose() {\n      this.showPopper = false\n    },\n    handleFocus() {\n      addClass(this.referenceElm, 'focusing')\n      if (this.trigger === 'click' || this.trigger === 'focus') {\n        this.showPopper = true\n      }\n    },\n    handleClick() {\n      removeClass(this.referenceElm, 'focusing')\n    },\n    handleBlur() {\n      removeClass(this.referenceElm, 'focusing')\n      if (this.trigger === 'click' || this.trigger === 'focus')\n        this.showPopper = false\n    },\n    handleMouseEnter() {\n      clearTimeout(this._timer)\n      if (this.openDelay) {\n        this._timer = setTimeout(() => {\n          this.showPopper = true\n        }, this.openDelay)\n      } else {\n        this.showPopper = true\n      }\n    },\n    handleKeydown(ev) {\n      if (ev.keyCode === 27 && this.trigger !== 'manual') {\n        this.doClose()\n      }\n    },\n    handleMouseLeave() {\n      clearTimeout(this._timer)\n      this._timer = setTimeout(() => {\n        this.showPopper = false\n      }, 200)\n    },\n    handleDocumentClick(e) {\n      let reference = this.reference || this.$refs.reference\n      const popper = this.popper || this.$refs.popper\n\n      if (!reference && this.$slots.reference && this.$slots.reference[0]) {\n        reference = this.referenceElm = this.$slots.reference[0].elm\n      }\n\n      if (\n        !this.$el ||\n        !reference ||\n        this.$el.contains(e.target) ||\n        reference.contains(e.target) ||\n        !popper ||\n        popper.contains(e.target)\n      ) {\n        return\n      }\n\n      this.showPopper = false\n    },\n    handleAfterEnter() {\n      this.$emit('after-enter')\n    },\n    handleAfterLeave() {\n      this.$emit('after-leave')\n      this.doDestroy()\n    },\n    cleanup() {\n      if (this.openDelay) {\n        clearTimeout(this._timer)\n      }\n    },\n  },\n  watch: {\n    showPopper(val) {\n      if (this.disabled) {\n        return\n      }\n\n      val ? this.$emit('show') : this.$emit('hide')\n    },\n  },\n\n  beforeDestroy() {\n    this.cleanup()\n  },\n\n  deactivated() {\n    this.cleanup()\n  },\n\n  destroyed() {\n    const reference = this.reference\n\n    domOff(reference, 'click', this.doToggle)\n    domOff(reference, 'mouseup', this.doClose)\n    domOff(reference, 'mousedown', this.doShow)\n    domOff(reference, 'focusin', this.doShow)\n    domOff(reference, 'focusout', this.doClose)\n    domOff(reference, 'mousedown', this.doShow)\n    domOff(reference, 'mouseup', this.doClose)\n    domOff(reference, 'mouseleave', this.handleMouseLeave)\n    domOff(reference, 'mouseenter', this.handleMouseEnter)\n    domOff(document, 'click', this.handleDocumentClick)\n  },\n}\n</script>\n"]}]}