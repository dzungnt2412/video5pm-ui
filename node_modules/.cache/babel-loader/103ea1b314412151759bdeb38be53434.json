{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/Upload/Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/Upload/Upload.vue","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["import _mergeJSXProps from \"@vue/babel-helper-vue-jsx-merge-props\";\nimport ajax from './ajax';\nimport UploadDragger from './UploadDragger';\nexport default {\n  inject: ['uploader'],\n  components: {\n    UploadDragger: UploadDragger\n  },\n  props: {\n    type: String,\n    action: {\n      type: String,\n      required: true\n    },\n    name: {\n      type: String,\n      default: 'file'\n    },\n    data: Object,\n    headers: Object,\n    withCredentials: Boolean,\n    multiple: Boolean,\n    accept: String,\n    onStart: Function,\n    onProgress: Function,\n    onSuccess: Function,\n    onError: Function,\n    beforeUpload: Function,\n    drag: Boolean,\n    onPreview: {\n      type: Function,\n      default: function _default() {}\n    },\n    onRemove: {\n      type: Function,\n      default: function _default() {}\n    },\n    fileList: Array,\n    autoUpload: Boolean,\n    listType: String,\n    httpRequest: {\n      type: Function,\n      default: ajax\n    },\n    disabled: Boolean,\n    limit: Number,\n    onExceed: Function,\n    maxFileSize: {\n      type: Number,\n      default: 500000\n    }\n  },\n  data: function data() {\n    return {\n      mouseover: false,\n      reqs: {}\n    };\n  },\n  methods: {\n    isImage: function isImage(str) {\n      return str.indexOf('image') !== -1;\n    },\n    handleChange: function handleChange(ev) {\n      var files = ev.target.files;\n      if (!files) return;\n      this.uploadFiles(files);\n    },\n    uploadFiles: function uploadFiles(files) {\n      var _this = this;\n\n      if (this.limit && this.fileList.length + files.length > this.limit) {\n        this.onExceed && this.onExceed(files, this.fileList);\n        return;\n      }\n\n      var postFiles = Array.prototype.slice.call(files);\n      postFiles = postFiles.filter(function (_ref) {\n        var size = _ref.size;\n        return size <= _this.maxFileSize;\n      });\n\n      if (!this.multiple) {\n        postFiles = postFiles.slice(0, 1);\n      }\n\n      if (postFiles.length === 0) {\n        return;\n      }\n\n      postFiles.forEach(function (rawFile) {\n        _this.onStart(rawFile);\n\n        if (_this.autoUpload) _this.upload(rawFile);\n      });\n    },\n    upload: function upload(rawFile) {\n      var _this2 = this;\n\n      this.$refs.input.value = null;\n\n      if (!this.beforeUpload) {\n        return this.post(rawFile);\n      }\n\n      var before = this.beforeUpload(rawFile);\n\n      if (before && before.then) {\n        before.then(function (processedFile) {\n          var fileType = Object.prototype.toString.call(processedFile);\n\n          if (fileType === '[object File]' || fileType === '[object Blob]') {\n            if (fileType === '[object Blob]') {\n              processedFile = new File([processedFile], rawFile.name, {\n                type: rawFile.type\n              });\n            }\n\n            for (var p in rawFile) {\n              if (rawFile.hasOwnProperty(p)) {\n                processedFile[p] = rawFile[p];\n              }\n            }\n\n            _this2.post(processedFile);\n          } else {\n            _this2.post(rawFile);\n          }\n        }, function () {\n          _this2.onRemove(null, rawFile);\n        });\n      } else if (before !== false) {\n        this.post(rawFile);\n      } else {\n        this.onRemove(null, rawFile);\n      }\n    },\n    abort: function abort(file) {\n      var reqs = this.reqs;\n\n      if (file) {\n        var uid = file;\n        if (file.uid) uid = file.uid;\n\n        if (reqs[uid]) {\n          reqs[uid].abort();\n        }\n      } else {\n        Object.keys(reqs).forEach(function (uid) {\n          if (reqs[uid]) reqs[uid].abort();\n          delete reqs[uid];\n        });\n      }\n    },\n    post: function post(rawFile) {\n      var _this3 = this;\n\n      var uid = rawFile.uid;\n      var options = {\n        headers: this.headers,\n        withCredentials: this.withCredentials,\n        file: rawFile,\n        data: this.data,\n        filename: this.name,\n        action: this.action,\n        onProgress: function onProgress(e) {\n          _this3.onProgress(e, rawFile);\n        },\n        onSuccess: function onSuccess(res) {\n          _this3.onSuccess(res, rawFile);\n\n          delete _this3.reqs[uid];\n        },\n        onError: function onError(err) {\n          _this3.onError(err, rawFile);\n\n          delete _this3.reqs[uid];\n        }\n      };\n      var req = this.httpRequest(options);\n      this.reqs[uid] = req;\n\n      if (req && req.then) {\n        req.then(options.onSuccess, options.onError);\n      }\n    },\n    handleClick: function handleClick() {\n      if (!this.disabled) {\n        this.$refs.input.value = null;\n        this.$refs.input.click();\n      }\n    },\n    handleKeydown: function handleKeydown(e) {\n      if (e.target !== e.currentTarget) return;\n\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick();\n      }\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    var handleClick = this.handleClick,\n        drag = this.drag,\n        name = this.name,\n        handleChange = this.handleChange,\n        multiple = this.multiple,\n        accept = this.accept,\n        listType = this.listType,\n        uploadFiles = this.uploadFiles,\n        disabled = this.disabled,\n        handleKeydown = this.handleKeydown;\n    var data = {\n      class: {\n        'el-upload': true\n      },\n      on: {\n        click: handleClick,\n        keydown: handleKeydown\n      }\n    };\n    data.class[\"el-upload--\".concat(listType)] = true;\n    return h(\"div\", _mergeJSXProps([{}, data, {\n      \"attrs\": {\n        \"tabindex\": \"0\"\n      }\n    }]), [drag ? h(\"upload-dragger\", {\n      \"attrs\": {\n        \"disabled\": disabled\n      },\n      \"on\": {\n        \"file\": uploadFiles\n      }\n    }, [this.$slots.default]) : this.$slots.default, h(\"input\", {\n      \"class\": \"el-upload__input\",\n      \"attrs\": {\n        \"type\": \"file\",\n        \"name\": name,\n        \"multiple\": multiple,\n        \"accept\": accept\n      },\n      \"ref\": \"input\",\n      \"on\": {\n        \"change\": handleChange\n      }\n    })]);\n  }\n};",null]}