{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/order-mapping/store/index.js","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/order-mapping/store/index.js","mtime":1603898990380},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1597736267502}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/@babel/runtime/regenerator\";\n\nvar _mutations;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport api from '../api';\nimport ShopService from '@core/services/shop';\nimport AuthService from '@core/services/auth';\nexport var FETCH_PRODUCT_TYPES = 'fetchProductTypes';\nexport var FETCH_PRODUCT_TYPE = 'fetchProductType';\nexport var UPDATE_PRODUCT_TYPE = 'updateProductType';\nexport var CREATE_PRODUCT_TYPE = 'createProductType';\nexport var UPDATE_PRODUCT_TYPES_STATUS = 'updateProductTypesStatus';\nexport var FETCH_PACKAGES = 'fetchPackages';\nexport var FETCH_PACKAGE = 'fetchPackage';\nexport var UPDATE_PACKAGE = 'updatePackage';\nexport var CREATE_PACKAGE = 'createPackage';\nexport var FETCH_ORDER_MAPPINGS = 'fetchOrderMappings';\nexport var FETCH_ORDER_MAPPINGS_COUNT = 'fetchOrderMappingsCount';\nexport var FETCH_ORDER_MAPPING = 'fetchOrderMapping';\nexport var FETCH_PRODUCT_OPTIONS = 'fetchProductOptions';\nexport var FETCH_ORDER_MAPPING_FAILS = 'fetchOrderMappingFails';\nexport var FETCH_ORDER_MAPPING_FAILS_COUNT = 'fetchOrderMappingFailsCount';\n/**\n * State\n */\n\nexport var state = {\n  productType: {},\n  productTypes: [],\n  packages: [],\n  package: {},\n  orderMappingsList: [],\n  orderMappingsCount: 0,\n  orderMapping: {},\n  options: [],\n  optionSets: [],\n  orderMappingFails: [],\n  orderMappingFailsCount: 0\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, FETCH_PRODUCT_TYPE, function (state, payload) {\n  state.productType = payload;\n}), _defineProperty(_mutations, FETCH_PRODUCT_TYPES, function (state, payload) {\n  state.productTypes = payload;\n}), _defineProperty(_mutations, CREATE_PRODUCT_TYPE, function (state, payload) {\n  state.productTypes.unshift(payload);\n}), _defineProperty(_mutations, FETCH_PACKAGES, function (state, payload) {\n  state.packages = payload;\n}), _defineProperty(_mutations, FETCH_PACKAGE, function (state, payload) {\n  state.package = payload;\n}), _defineProperty(_mutations, CREATE_PACKAGE, function (state, payload) {\n  state.packages.push(payload);\n}), _defineProperty(_mutations, FETCH_ORDER_MAPPINGS, function (state, payload) {\n  state.orderMappingsList = payload;\n}), _defineProperty(_mutations, FETCH_ORDER_MAPPINGS_COUNT, function (state, payload) {\n  state.orderMappingsCount = payload;\n}), _defineProperty(_mutations, FETCH_ORDER_MAPPING, function (state, payload) {\n  state.orderMapping = payload;\n}), _defineProperty(_mutations, FETCH_PRODUCT_OPTIONS, function (state, payload) {\n  state.options = payload.options;\n  state.optionSets = payload.option_sets;\n}), _defineProperty(_mutations, FETCH_ORDER_MAPPING_FAILS, function (state, payload) {\n  state.orderMappingFails = payload;\n}), _defineProperty(_mutations, FETCH_ORDER_MAPPING_FAILS_COUNT, function (state, payload) {\n  state.orderMappingFailsCount = payload;\n}), _mutations);\n/**\n * Actions\n */\n\nexport var actions = {\n  /**\n   * Init\n   * @param commit\n   */\n  init: function init(_ref) {\n    var commit = _ref.commit;\n    ShopService.init();\n\n    if (ShopService.getId()) {\n      handleSelected(commit, {\n        shop: ShopService.shop\n      });\n    }\n  },\n\n  /**\n   * Fetch product types\n   * @param commit\n   * @return {Promise<{success: boolean, message: (*|string)}|{success: boolean}>}\n   */\n  fetchProductTypes: function () {\n    var _fetchProductTypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref2.commit;\n              result = {\n                success: true\n              };\n              _context.next = 4;\n              return api.fetchProductTypes(payload);\n\n            case 4:\n              response = _context.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  product_types: []\n                };\n              }\n\n              commit(FETCH_PRODUCT_TYPES, response.product_types);\n              return _context.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function fetchProductTypes(_x, _x2) {\n      return _fetchProductTypes.apply(this, arguments);\n    }\n\n    return fetchProductTypes;\n  }(),\n  fetchProductType: function () {\n    var _fetchProductType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref3.commit;\n              result = {\n                success: true\n              };\n              _context2.next = 4;\n              return api.fetchProductType(payload);\n\n            case 4:\n              response = _context2.sent;\n\n              if (response && !response.product_type) {\n                result = {\n                  success: true,\n                  message: response.errorMessage\n                };\n                response = {\n                  product_type: {}\n                };\n              }\n\n              commit(FETCH_PRODUCT_TYPE, response.product_type);\n              return _context2.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function fetchProductType(_x3, _x4) {\n      return _fetchProductType.apply(this, arguments);\n    }\n\n    return fetchProductType;\n  }(),\n\n  /**\n   * Add product type\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean, message: *}|{success: boolean}>}\n   */\n  createProductType: function () {\n    var _createProductType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4, payload) {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref4.commit;\n              _context3.next = 3;\n              return api.addProductType(payload);\n\n            case 3:\n              response = _context3.sent;\n\n              if (!(response && response.product_type && response.product_type.id)) {\n                _context3.next = 7;\n                break;\n              }\n\n              commit(CREATE_PRODUCT_TYPE, response.product_type);\n              return _context3.abrupt(\"return\", {\n                success: true,\n                id: response.product_type.id\n              });\n\n            case 7:\n              return _context3.abrupt(\"return\", {\n                success: false,\n                message: response.message || response.error\n              });\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function createProductType(_x5, _x6) {\n      return _createProductType.apply(this, arguments);\n    }\n\n    return createProductType;\n  }(),\n\n  /**\n   * Update product type\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  // eslint-disable-next-line\n  updateProductType: function () {\n    var _updateProductType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref5, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref5.commit;\n              result = {\n                success: true\n              };\n              _context4.next = 4;\n              return api.updateProductType(payload);\n\n            case 4:\n              response = _context4.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  product_type: {}\n                };\n              }\n\n              commit(FETCH_PRODUCT_TYPE, response.product_type);\n              return _context4.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function updateProductType(_x7, _x8) {\n      return _updateProductType.apply(this, arguments);\n    }\n\n    return updateProductType;\n  }(),\n  //eslint-disable-next-line\n  updateProductTypesStatus: function () {\n    var _updateProductTypesStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref6, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref6.commit;\n              result = {\n                success: true\n              };\n              _context5.next = 4;\n              return api.updateProductTypesStatus(payload);\n\n            case 4:\n              response = _context5.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              return _context5.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function updateProductTypesStatus(_x9, _x10) {\n      return _updateProductTypesStatus.apply(this, arguments);\n    }\n\n    return updateProductTypesStatus;\n  }(),\n  fetchPackages: function () {\n    var _fetchPackages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref7, params) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref7.commit;\n              result = {\n                success: true\n              };\n              _context6.next = 4;\n              return api.fetchPackages(params);\n\n            case 4:\n              response = _context6.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  packages: {}\n                };\n              }\n\n              commit(FETCH_PACKAGES, response.packages);\n              return _context6.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function fetchPackages(_x11, _x12) {\n      return _fetchPackages.apply(this, arguments);\n    }\n\n    return fetchPackages;\n  }(),\n  fetchPackage: function () {\n    var _fetchPackage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref8, params) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              commit = _ref8.commit;\n              result = {\n                success: true\n              };\n              _context7.next = 4;\n              return api.fetchPackages(params);\n\n            case 4:\n              response = _context7.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  package: {}\n                };\n              }\n\n              commit(FETCH_PACKAGE, response.package);\n              return _context7.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    function fetchPackage(_x13, _x14) {\n      return _fetchPackage.apply(this, arguments);\n    }\n\n    return fetchPackage;\n  }(),\n\n  /**\n   * Fetch order mapping list\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  fetchOrderMappingList: function () {\n    var _fetchOrderMappingList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_ref9, _ref10) {\n      var commit, type, payload, result, list;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              commit = _ref9.commit;\n              type = _ref10.type, payload = _ref10.payload;\n              result = {\n                success: true\n              };\n              _context8.next = 5;\n              return api.fetchOrderMappings(type, payload);\n\n            case 5:\n              list = _context8.sent;\n\n              if (!list.order_mappings) {\n                list.order_mappings = [];\n                list.count = 0;\n                result = {\n                  success: false,\n                  message: list.errorMessage || ''\n                };\n              }\n\n              commit(FETCH_ORDER_MAPPINGS, list.order_mappings);\n              commit(FETCH_ORDER_MAPPINGS_COUNT, list.count);\n              return _context8.abrupt(\"return\", result);\n\n            case 10:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function fetchOrderMappingList(_x15, _x16) {\n      return _fetchOrderMappingList.apply(this, arguments);\n    }\n\n    return fetchOrderMappingList;\n  }(),\n\n  /**\n   * Fetch order mapping\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  fetchOrderMapping: function () {\n    var _fetchOrderMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref11, _ref12) {\n      var commit, type, id, result, response;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              commit = _ref11.commit;\n              type = _ref12.type, id = _ref12.id;\n              result = {\n                success: true\n              };\n              _context9.next = 5;\n              return api.fetchOrderMapping(type, id);\n\n            case 5:\n              response = _context9.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  order_mapping: {}\n                };\n              }\n\n              commit(FETCH_ORDER_MAPPING, response.order_mapping);\n              return _context9.abrupt(\"return\", result);\n\n            case 9:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    function fetchOrderMapping(_x17, _x18) {\n      return _fetchOrderMapping.apply(this, arguments);\n    }\n\n    return fetchOrderMapping;\n  }(),\n\n  /**\n   * Create or update order mapping\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  createOrUpdateOrderMapping: function () {\n    var _createOrUpdateOrderMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_, _ref13) {\n      var type, payload, response;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              type = _ref13.type, payload = _ref13.payload;\n              _context10.next = 3;\n              return api.createOrUpdateOrderMapping(type, payload);\n\n            case 3:\n              response = _context10.sent;\n\n              if (!(response && response.errorMessage)) {\n                _context10.next = 6;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage\n              });\n\n            case 6:\n              return _context10.abrupt(\"return\", {\n                success: true,\n                id: response.id\n              });\n\n            case 7:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    function createOrUpdateOrderMapping(_x19, _x20) {\n      return _createOrUpdateOrderMapping.apply(this, arguments);\n    }\n\n    return createOrUpdateOrderMapping;\n  }(),\n\n  /**\n   * Delete order mapping\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  deleteOrderMapping: function () {\n    var _deleteOrderMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(_, _ref14) {\n      var type, id, response;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              type = _ref14.type, id = _ref14.id;\n              _context11.next = 3;\n              return api.deleteOrderMapping(type, id);\n\n            case 3:\n              response = _context11.sent;\n\n              if (!(response && response.errorMessage)) {\n                _context11.next = 6;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage\n              });\n\n            case 6:\n              return _context11.abrupt(\"return\", {\n                success: true\n              });\n\n            case 7:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    function deleteOrderMapping(_x21, _x22) {\n      return _deleteOrderMapping.apply(this, arguments);\n    }\n\n    return deleteOrderMapping;\n  }(),\n  fetchOptionsByProductId: function () {\n    var _fetchOptionsByProductId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_ref15, id) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              commit = _ref15.commit;\n              result = {\n                success: true\n              };\n              _context12.next = 4;\n              return api.getOptionsByProductId(id);\n\n            case 4:\n              response = _context12.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  options: [],\n                  option_sets: []\n                };\n              }\n\n              commit(FETCH_PRODUCT_OPTIONS, response);\n              return _context12.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    function fetchOptionsByProductId(_x23, _x24) {\n      return _fetchOptionsByProductId.apply(this, arguments);\n    }\n\n    return fetchOptionsByProductId;\n  }(),\n\n  /**\n   * Fetch order mapping fails\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  fetchOrderMappingFails: function () {\n    var _fetchOrderMappingFails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(_ref16, payload) {\n      var commit, result, list;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              commit = _ref16.commit;\n              result = {\n                success: true\n              };\n              _context13.next = 4;\n              return api.fetchOrderMappingFails(payload);\n\n            case 4:\n              list = _context13.sent;\n\n              if (!list.order_map_fails) {\n                list.order_map_fails = [];\n                list.count = 0;\n                result = {\n                  success: false,\n                  message: list.errorMessage || ''\n                };\n              }\n\n              commit(FETCH_ORDER_MAPPING_FAILS, list.order_map_fails);\n              commit(FETCH_ORDER_MAPPING_FAILS_COUNT, list.count);\n              return _context13.abrupt(\"return\", result);\n\n            case 9:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    function fetchOrderMappingFails(_x25, _x26) {\n      return _fetchOrderMappingFails.apply(this, arguments);\n    }\n\n    return fetchOrderMappingFails;\n  }(),\n\n  /**\n   * Retry order mapping fails\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  retryOrderMappingFails: function () {\n    var _retryOrderMappingFails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(_, payload) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return api.retryOrderMappingFails(payload);\n\n            case 2:\n              response = _context14.sent;\n\n              if (!(response && response.errorMessage)) {\n                _context14.next = 5;\n                break;\n              }\n\n              return _context14.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage\n              });\n\n            case 5:\n              return _context14.abrupt(\"return\", {\n                success: true\n              });\n\n            case 6:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    function retryOrderMappingFails(_x27, _x28) {\n      return _retryOrderMappingFails.apply(this, arguments);\n    }\n\n    return retryOrderMappingFails;\n  }()\n};\n/**\n * Handle selected shop\n * @param commit\n * @param shop\n * @param accessToken\n */\n\nvar handleSelected = function handleSelected(commit, _ref17) {\n  var shop = _ref17.shop,\n      accessToken = _ref17.accessToken;\n  commit(FETCH_PRODUCT_TYPE, shop);\n  ShopService.set(shop);\n  var storage = {\n    id: shop.id,\n    domain: shop.domain,\n    name: shop.name,\n    logo: shop.logo,\n    platform: shop.platform\n  };\n  ShopService.storage(storage);\n\n  if (accessToken) {\n    AuthService.storageAccessToken(accessToken);\n  }\n};",{"version":3,"sources":["/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/order-mapping/store/index.js"],"names":["api","ShopService","AuthService","FETCH_PRODUCT_TYPES","FETCH_PRODUCT_TYPE","UPDATE_PRODUCT_TYPE","CREATE_PRODUCT_TYPE","UPDATE_PRODUCT_TYPES_STATUS","FETCH_PACKAGES","FETCH_PACKAGE","UPDATE_PACKAGE","CREATE_PACKAGE","FETCH_ORDER_MAPPINGS","FETCH_ORDER_MAPPINGS_COUNT","FETCH_ORDER_MAPPING","FETCH_PRODUCT_OPTIONS","FETCH_ORDER_MAPPING_FAILS","FETCH_ORDER_MAPPING_FAILS_COUNT","state","productType","productTypes","packages","package","orderMappingsList","orderMappingsCount","orderMapping","options","optionSets","orderMappingFails","orderMappingFailsCount","mutations","payload","unshift","push","option_sets","actions","init","commit","getId","handleSelected","shop","fetchProductTypes","result","success","response","errorMessage","message","product_types","fetchProductType","product_type","createProductType","addProductType","id","error","updateProductType","updateProductTypesStatus","fetchPackages","params","fetchPackage","fetchOrderMappingList","type","fetchOrderMappings","list","order_mappings","count","fetchOrderMapping","order_mapping","createOrUpdateOrderMapping","_","deleteOrderMapping","fetchOptionsByProductId","getOptionsByProductId","fetchOrderMappingFails","order_map_fails","retryOrderMappingFails","accessToken","set","storage","domain","name","logo","platform","storageAccessToken"],"mappings":"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","sourcesContent":["import api from '../api'\nimport ShopService from '@core/services/shop'\nimport AuthService from '@core/services/auth'\n\nexport const FETCH_PRODUCT_TYPES = 'fetchProductTypes'\nexport const FETCH_PRODUCT_TYPE = 'fetchProductType'\nexport const UPDATE_PRODUCT_TYPE = 'updateProductType'\nexport const CREATE_PRODUCT_TYPE = 'createProductType'\nexport const UPDATE_PRODUCT_TYPES_STATUS = 'updateProductTypesStatus'\n\nexport const FETCH_PACKAGES = 'fetchPackages'\nexport const FETCH_PACKAGE = 'fetchPackage'\nexport const UPDATE_PACKAGE = 'updatePackage'\nexport const CREATE_PACKAGE = 'createPackage'\n\nexport const FETCH_ORDER_MAPPINGS = 'fetchOrderMappings'\nexport const FETCH_ORDER_MAPPINGS_COUNT = 'fetchOrderMappingsCount'\nexport const FETCH_ORDER_MAPPING = 'fetchOrderMapping'\n\nexport const FETCH_PRODUCT_OPTIONS = 'fetchProductOptions'\n\nexport const FETCH_ORDER_MAPPING_FAILS = 'fetchOrderMappingFails'\nexport const FETCH_ORDER_MAPPING_FAILS_COUNT = 'fetchOrderMappingFailsCount'\n/**\n * State\n */\nexport const state = {\n  productType: {},\n  productTypes: [],\n  packages: [],\n  package: {},\n  orderMappingsList: [],\n  orderMappingsCount: 0,\n  orderMapping: {},\n  options: [],\n  optionSets: [],\n  orderMappingFails: [],\n  orderMappingFailsCount: 0,\n}\n\nexport const mutations = {\n  /**\n   * Fetch a product type\n   * @param state\n   * @param payload\n   */\n  [FETCH_PRODUCT_TYPE]: (state, payload) => {\n    state.productType = payload\n  },\n\n  /**\n   * Fetch product types\n   * @param state\n   * @param payload\n   */\n  [FETCH_PRODUCT_TYPES]: (state, payload) => {\n    state.productTypes = payload\n  },\n\n  /**\n   * Add _new product type\n   * @param state\n   * @param payload\n   */\n  [CREATE_PRODUCT_TYPE]: (state, payload) => {\n    state.productTypes.unshift(payload)\n  },\n\n  /**\n   * fetch packages\n   * @param state\n   * @param payload\n   */\n  [FETCH_PACKAGES]: (state, payload) => {\n    state.packages = payload\n  },\n\n  [FETCH_PACKAGE]: (state, payload) => {\n    state.package = payload\n  },\n\n  [CREATE_PACKAGE]: (state, payload) => {\n    state.packages.push(payload)\n  },\n  [FETCH_ORDER_MAPPINGS]: (state, payload) => {\n    state.orderMappingsList = payload\n  },\n  [FETCH_ORDER_MAPPINGS_COUNT]: (state, payload) => {\n    state.orderMappingsCount = payload\n  },\n  [FETCH_ORDER_MAPPING]: (state, payload) => {\n    state.orderMapping = payload\n  },\n  [FETCH_PRODUCT_OPTIONS]: (state, payload) => {\n    state.options = payload.options\n    state.optionSets = payload.option_sets\n  },\n  [FETCH_ORDER_MAPPING_FAILS]: (state, payload) => {\n    state.orderMappingFails = payload\n  },\n  [FETCH_ORDER_MAPPING_FAILS_COUNT]: (state, payload) => {\n    state.orderMappingFailsCount = payload\n  },\n}\n\n/**\n * Actions\n */\nexport const actions = {\n  /**\n   * Init\n   * @param commit\n   */\n  init({ commit }) {\n    ShopService.init()\n\n    if (ShopService.getId()) {\n      handleSelected(commit, { shop: ShopService.shop })\n    }\n  },\n\n  /**\n   * Fetch product types\n   * @param commit\n   * @return {Promise<{success: boolean, message: (*|string)}|{success: boolean}>}\n   */\n  async fetchProductTypes({ commit }, payload) {\n    let result = { success: true }\n    let response = await api.fetchProductTypes(payload)\n\n    if (response && response.errorMessage) {\n      result = { success: false, message: response.errorMessage }\n      response = { product_types: [] }\n    }\n\n    commit(FETCH_PRODUCT_TYPES, response.product_types)\n    return result\n  },\n\n  async fetchProductType({ commit }, payload) {\n    let result = { success: true }\n    let response = await api.fetchProductType(payload)\n\n    if (response && !response.product_type) {\n      result = { success: true, message: response.errorMessage }\n      response = { product_type: {} }\n    }\n\n    commit(FETCH_PRODUCT_TYPE, response.product_type)\n\n    return result\n  },\n\n  /**\n   * Add product type\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean, message: *}|{success: boolean}>}\n   */\n  async createProductType({ commit }, payload) {\n    const response = await api.addProductType(payload)\n\n    if (response && response.product_type && response.product_type.id) {\n      commit(CREATE_PRODUCT_TYPE, response.product_type)\n      return { success: true, id: response.product_type.id }\n    }\n\n    return { success: false, message: response.message || response.error }\n  },\n\n  /**\n   * Update product type\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  // eslint-disable-next-line\n  async updateProductType({ commit }, payload) {\n    let result = { success: true }\n    let response = await api.updateProductType(payload)\n\n    if (response && response.errorMessage) {\n      result = { success: false, message: response.errorMessage }\n      response = { product_type: {} }\n    }\n\n    commit(FETCH_PRODUCT_TYPE, response.product_type)\n\n    return result\n  },\n\n  //eslint-disable-next-line\n  async updateProductTypesStatus({ commit }, payload) {\n    let result = { success: true }\n    let response = await api.updateProductTypesStatus(payload)\n\n    if (response && response.errorMessage) {\n      result = { success: false, message: response.errorMessage }\n    }\n\n    return result\n  },\n\n  async fetchPackages({ commit }, params) {\n    let result = { success: true }\n    let response = await api.fetchPackages(params)\n\n    if (response && response.errorMessage) {\n      result = { success: false, message: response.errorMessage }\n      response = { packages: {} }\n    }\n\n    commit(FETCH_PACKAGES, response.packages)\n\n    return result\n  },\n\n  async fetchPackage({ commit }, params) {\n    let result = { success: true }\n    let response = await api.fetchPackages(params)\n\n    if (response && response.errorMessage) {\n      result = { success: false, message: response.errorMessage }\n      response = { package: {} }\n    }\n\n    commit(FETCH_PACKAGE, response.package)\n\n    return result\n  },\n\n  /**\n   * Fetch order mapping list\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  async fetchOrderMappingList({ commit }, { type, payload }) {\n    let result = { success: true }\n    let list = await api.fetchOrderMappings(type, payload)\n    if (!list.order_mappings) {\n      list.order_mappings = []\n      list.count = 0\n      result = {\n        success: false,\n        message: list.errorMessage || '',\n      }\n    }\n\n    commit(FETCH_ORDER_MAPPINGS, list.order_mappings)\n    commit(FETCH_ORDER_MAPPINGS_COUNT, list.count)\n\n    return result\n  },\n\n  /**\n   * Fetch order mapping\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  async fetchOrderMapping({ commit }, { type, id }) {\n    let result = { success: true }\n    let response = await api.fetchOrderMapping(type, id)\n\n    if (response && response.errorMessage) {\n      result = { success: false, message: response.errorMessage }\n      response = { order_mapping: {} }\n    }\n\n    commit(FETCH_ORDER_MAPPING, response.order_mapping)\n    return result\n  },\n  /**\n   * Create or update order mapping\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  async createOrUpdateOrderMapping(_, { type, payload }) {\n    let response = await api.createOrUpdateOrderMapping(type, payload)\n\n    if (response && response.errorMessage) {\n      return { success: false, message: response.errorMessage }\n    }\n\n    return { success: true, id: response.id }\n  },\n\n  /**\n   * Delete order mapping\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  async deleteOrderMapping(_, { type, id }) {\n    let response = await api.deleteOrderMapping(type, id)\n\n    if (response && response.errorMessage) {\n      return { success: false, message: response.errorMessage }\n    }\n\n    return { success: true }\n  },\n\n  async fetchOptionsByProductId({ commit }, id) {\n    let result = { success: true }\n    let response = await api.getOptionsByProductId(id)\n\n    if (response && response.errorMessage) {\n      result = { success: false, message: response.errorMessage }\n      response = { options: [], option_sets: [] }\n    }\n\n    commit(FETCH_PRODUCT_OPTIONS, response)\n    return result\n  },\n\n  /**\n   * Fetch order mapping fails\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  async fetchOrderMappingFails({ commit }, payload) {\n    let result = { success: true }\n    let list = await api.fetchOrderMappingFails(payload)\n    if (!list.order_map_fails) {\n      list.order_map_fails = []\n      list.count = 0\n      result = {\n        success: false,\n        message: list.errorMessage || '',\n      }\n    }\n\n    commit(FETCH_ORDER_MAPPING_FAILS, list.order_map_fails)\n    commit(FETCH_ORDER_MAPPING_FAILS_COUNT, list.count)\n\n    return result\n  },\n\n  /**\n   * Retry order mapping fails\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  async retryOrderMappingFails(_, payload) {\n    let response = await api.retryOrderMappingFails(payload)\n\n    if (response && response.errorMessage) {\n      return { success: false, message: response.errorMessage }\n    }\n\n    return { success: true }\n  },\n}\n\n/**\n * Handle selected shop\n * @param commit\n * @param shop\n * @param accessToken\n */\nconst handleSelected = (commit, { shop, accessToken }) => {\n  commit(FETCH_PRODUCT_TYPE, shop)\n  ShopService.set(shop)\n  const storage = {\n    id: shop.id,\n    domain: shop.domain,\n    name: shop.name,\n    logo: shop.logo,\n    platform: shop.platform,\n  }\n  ShopService.storage(storage)\n\n  if (accessToken) {\n    AuthService.storageAccessToken(accessToken)\n  }\n}\n"]}]}