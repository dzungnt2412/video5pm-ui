{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/Upload/upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/Upload/upload.vue","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FormElementMixin from '../../mixins/FormElement';\nimport { File } from '../../utils/ssr';\nexport default {\n  name: 'PUpload',\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: {\n      type: [Object, Function, File, Array]\n    },\n    multiple: Boolean,\n    disabled: Boolean,\n    accept: String,\n    dragDrop: Boolean,\n    type: {\n      type: String,\n      default: 'is-primary'\n    },\n    native: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      newValue: this.value,\n      dragDropFocus: false,\n      // eslint-disable-next-line\n      _elementRef: 'input'\n    };\n  },\n  watch: {\n    /**\n     * When v-model is changed:\n     *   1. Set internal value.\n     *   2. Reset input value if array is empty\n     *   3. If it's invalid, validate again.\n     */\n    value: function value(_value) {\n      this.newValue = _value;\n\n      if (!this.newValue || Array.isArray(this.newValue) && this.newValue.length === 0) {\n        this.$refs.input.value = null;\n      }\n\n      !this.isValid && !this.dragDrop && this.checkHtml5Validity();\n    }\n  },\n  methods: {\n    /**\n     * Listen change event on input type 'file',\n     * emit 'input' event and validate\n     */\n    onFileChange: function onFileChange(event) {\n      if (this.disabled || this.loading) return;\n\n      if (this.dragDrop) {\n        this.updateDragDropFocus(false);\n      }\n\n      var value = event.target.files || event.dataTransfer.files;\n\n      if (value) {\n        if (value.length === 0) {\n          this.newValue = null;\n        } else if (!this.multiple) {\n          // only one element in case drag drop mode and isn't multiple\n          if (this.dragDrop && value.length !== 1) return false;else {\n            var file = value[0];\n\n            if (this.checkType(file)) {\n              this.newValue = file;\n            }\n          }\n        } else {\n          // always _new values if native or undefined local\n          if (this.native || !this.newValue) {\n            this.newValue = [];\n          }\n\n          for (var i = 0; i < value.length; i++) {\n            var _file = value[i];\n\n            if (this.checkType(_file)) {\n              this.newValue.push(_file);\n            }\n          }\n        }\n      }\n\n      this.$emit('input', this.newValue);\n      !this.dragDrop && this.checkHtml5Validity();\n    },\n\n    /**\n     * Listen drag-drop to update internal variable\n     */\n    updateDragDropFocus: function updateDragDropFocus(focus) {\n      if (!this.disabled && !this.loading) {\n        this.dragDropFocus = focus;\n      }\n    },\n\n    /**\n     * Check mime type of file\n     */\n    checkType: function checkType(file) {\n      if (!this.accept) return true;\n      var types = this.accept.split(',');\n      if (types.length === 0) return true;\n      var valid = false;\n\n      for (var i = 0; i < types.length && !valid; i++) {\n        var type = types[i].trim();\n\n        if (type) {\n          if (type.substring(0, 1) === '.') {\n            // check extension\n            var extIndex = file.name.lastIndexOf('.');\n\n            if (extIndex >= 0 && file.name.substring(extIndex) === type) {\n              valid = true;\n            }\n          } else {\n            // check mime type\n            if (file.type.match(type)) {\n              valid = true;\n            }\n          }\n        }\n      }\n\n      return valid;\n    }\n  }\n};",null]}