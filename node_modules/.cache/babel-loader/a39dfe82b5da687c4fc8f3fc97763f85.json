{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/OrderView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/OrderView.vue","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapActions } from 'vuex';\nimport { cloneDeep } from '@core/utils';\nimport { FETCH_ORDER, UPDATE_ORDER } from '@/packages/container/store/types';\nimport mixinFulfillment from '../mixins/fulfillment';\nimport mixinUpdateOrder from '../mixins/update-order';\nimport OrderItems from './components/OrderItems';\nimport ModalUpdateOrder from './components/ModalUpdateOrder';\nimport { FETCH_PRODUCT_TYPES, FETCH_PROVIDERS, FETCH_COUNTRIES } from '@/packages/shared/store';\nimport { ORDER_STATUS_CANCELED } from '@core/constants';\nexport default {\n  name: 'OrderView',\n  mixins: [mixinUpdateOrder, mixinFulfillment],\n  components: {\n    OrderItems: OrderItems,\n    ModalUpdateOrder: ModalUpdateOrder\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapState('container', {\n    order: function order(state) {\n      return state.order;\n    }\n  })), mapState('shared', {\n    productTypes: function productTypes(state) {\n      return state.productTypes;\n    },\n    providers: function providers(state) {\n      return state.providers;\n    },\n    countries: function countries(state) {\n      return state.countries;\n    }\n  })), mapState('design', {\n    designs: function designs(state) {\n      return state.designs;\n    }\n  })), {}, {\n    shopId: function shopId() {\n      return this.order ? this.order.shop_id : 0;\n    },\n    orderId: function orderId() {\n      return parseInt(this.$route.params.id, 10);\n    }\n  }),\n  data: function data() {\n    return {\n      editing: false,\n      isFetching: false,\n      isUpdating: false,\n      orderItems: [],\n      resultFetch: {},\n      resultUpdate: {}\n    };\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  methods: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapActions('container', [FETCH_ORDER, UPDATE_ORDER, 'getLogs'])), mapActions('shared', [FETCH_PRODUCT_TYPES, FETCH_PROVIDERS, FETCH_COUNTRIES])), mapActions('design', ['fetchDesigns'])), {}, {\n    init: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var id, _yield$Promise$all, r1;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = parseInt(this.$route.params.id, 10);\n\n                if (!(id < 1)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.$router.push({\n                  name: 'order-list'\n                }));\n\n              case 3:\n                this.isFetching = true;\n                _context.next = 6;\n                return Promise.all([this.fetchOrder(id)]);\n\n              case 6:\n                _yield$Promise$all = _context.sent;\n                r1 = _yield$Promise$all.r1;\n                this.resultFetch = r1;\n                this.isFetching = false;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }(),\n    handleUpdateOrder: function () {\n      var _handleUpdateOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(order) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.isUpdating = true;\n                _context2.next = 3;\n                return this.updateOrder(Object.assign({}, order || this.order, {\n                  order_items: this.orderItems\n                }));\n\n              case 3:\n                this.resultUpdate = _context2.sent;\n\n                if (this.resultUpdate && this.resultUpdate.success) {\n                  this.$set(this, 'orderItems', cloneDeep(this.order.order_items));\n                  this.editing = false;\n                  this.isVisibleEditOrder = false;\n                  this.init();\n                  this.$toast.open({\n                    type: 'success',\n                    message: 'Cập nhập order item thành công'\n                  });\n                } else {\n                  this.$toast.open({\n                    type: 'error',\n                    message: this.resultUpdate.message\n                  });\n                }\n\n                this.isUpdating = false;\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleUpdateOrder(_x) {\n        return _handleUpdateOrder.apply(this, arguments);\n      }\n\n      return handleUpdateOrder;\n    }(),\n    handleSelectedDesign: function handleSelectedDesign(_ref) {\n      var url = _ref.url,\n          item = _ref.item,\n          design = _ref.design;\n      this.handleUpdateOrderItem(item, {\n        design: design,\n        design_id: design.id,\n        image: url\n      });\n    },\n    handleSelectedProductType: function handleSelectedProductType(_ref2) {\n      var item = _ref2.item,\n          product = _ref2.product;\n      this.handleUpdateOrderItem(item, {\n        product_type_id: product.id,\n        product_type: product\n      });\n    },\n    handleUpdateOrderItem: function handleUpdateOrderItem(item, newVal) {\n      var index = this.orderItems.findIndex(function (_ref3) {\n        var id = _ref3.id;\n        return id === item.id;\n      });\n\n      if (index !== -1) {\n        this.editing = true;\n        this.$set(this.orderItems, index, Object.assign({}, item, newVal));\n      }\n    },\n    toggleEditOrder: function toggleEditOrder() {\n      if (this.editing) {\n        this.$set(this, 'orderItems', cloneDeep(this.order.order_items));\n        this.editing = false;\n      } else {\n        this.editing = true;\n      }\n    },\n    confirmUpdateOrder: function confirmUpdateOrder(action) {\n      var _this = this;\n\n      this.$dialog.confirm({\n        message: 'Are you sure you want to do this?',\n        onConfirm: function onConfirm() {\n          return _this.onUpdateOrderActionConfirm(action);\n        }\n      });\n    },\n    onUpdateOrderActionConfirm: function () {\n      var _onUpdateOrderActionConfirm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(action) {\n        var order;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                order = Object.assign({}, this.order);\n                _context3.t0 = action;\n                _context3.next = _context3.t0 === 'canceled' ? 4 : 6;\n                break;\n\n              case 4:\n                order.status = ORDER_STATUS_CANCELED;\n                return _context3.abrupt(\"break\", 6);\n\n              case 6:\n                this.handleUpdateOrder(order);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function onUpdateOrderActionConfirm(_x2) {\n        return _onUpdateOrderActionConfirm.apply(this, arguments);\n      }\n\n      return onUpdateOrderActionConfirm;\n    }()\n  }),\n  watch: {\n    'order.order_items': function orderOrder_items(val) {\n      this.$set(this, 'orderItems', cloneDeep(val));\n    }\n  },\n  filters: {\n    displayname: function displayname(order) {\n      return order.full_name || \"\".concat(order.first_name, \" \").concat(order.last_name);\n    }\n  }\n};",{"version":3,"sources":["OrderView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <PageDetailLoading v-if=\"isFetching\"></PageDetailLoading>\n  <div class=\"order-view-page page\" v-else>\n    <div class=\"page-header\">\n      <div class=\"container-fluid\">\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <p-button icon=\"chevron-left\" class=\"btn-pure pl-0\">\n              <router-link :to=\"{ name: 'order-list' }\">Đơn hàng</router-link>\n            </p-button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"page-content\">\n      <div class=\"container-fluid\">\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <div\n              class=\"d-flex align-items-center justify-content-between flex-wrap\"\n            >\n              <div class=\"order-metadata d-flex align-items-center\">\n                <h4 class=\"order-number\">{{ order.ref_id }}</h4>\n                <span class=\"order-date ml-10 mr-10\">{{\n                  order.created_at | datetime\n                }}</span>\n                <span v-status:status=\"order.status\"></span>\n              </div>\n              <div class=\"order-metadata d-flex align-items-center\">\n                <p-button\n                  @click=\"confirmUpdateOrder('canceled')\"\n                  class=\"ml-10\"\n                  type=\"danger\"\n                  v-if=\"isAllowCancel\"\n                  >Cancel</p-button\n                >\n              </div>\n            </div>\n            <div class=\"row mt-15\">\n              <div class=\"col-12 col-md-8\">\n                <section class=\"card section-order-items\">\n                  <div class=\"card-block\">\n                    <div\n                      class=\"card-title d-flex align-items-center justify-content-between\"\n                    >\n                      <h4>Danh sách sản phẩm</h4>\n                      <p-tooltip\n                        label=\"Sửa sản phẩm\"\n                        position=\"top\"\n                        type=\"dark\"\n                      >\n                        <p-button\n                          icon=\"pencil\"\n                          type=\"default\"\n                          name=\"pencil\"\n                          @click=\"toggleEditOrder\"\n                          v-if=\"isAllowUpdateOrder(order)\"\n                          size=\"sm\"\n                        ></p-button>\n                      </p-tooltip>\n                    </div>\n                    <order-items\n                      :order=\"order\"\n                      :items=\"orderItems\"\n                      :editing=\"editing\"\n                      :designs=\"designs\"\n                      :fetch-designs=\"fetchDesigns\"\n                      :product-types=\"productTypes\"\n                      :shop-id=\"order.shop_id\"\n                      @selectedProduct=\"handleSelectedProductType\"\n                      @selectedDesign=\"handleSelectedDesign\"\n                      :is-allow-update=\"isAllowUpdateOrder(order)\"\n                    />\n                    <div class=\"text-right mt-15\" v-if=\"editing\">\n                      <p-button\n                        @click=\"handleUpdateOrder(null)\"\n                        :disabled=\"isUpdating\"\n                        >Update order</p-button\n                      >\n                    </div>\n                  </div>\n                </section>\n              </div>\n              <div class=\"col-12 col-md-4\">\n                <section class=\"card section-order-shipping\">\n                  <div class=\"card-block\">\n                    <div\n                      class=\"card-title d-flex align-items-center justify-content-between\"\n                    >\n                      <h4>Thông tin vận chuyển</h4>\n                      <p-tooltip\n                        label=\"Sửa thông tin\"\n                        position=\"top\"\n                        type=\"dark\"\n                      >\n                        <p-button\n                          icon=\"pencil\"\n                          type=\"default\"\n                          name=\"pencil\"\n                          @click=\"handleVisibleModalUpdateOrder\"\n                          size=\"xs\"\n                        ></p-button>\n                      </p-tooltip>\n                    </div>\n                    <p class=\"card-text\">\n                      <b>Tên:</b> {{ order | displayname }}<br />\n                      <span v-if=\"order.phone\"\n                        ><b>Điện thoại: </b>{{ order.phone }} <br\n                      /></span>\n                      <b>Địa chỉ:</b> {{ order.address }},\n                      <span v-if=\"order.address2\">{{ order.address2 }}</span\n                      >, <span>{{ order.city }} {{ order.postcode }}</span\n                      ><br />\n                      <span v-if=\"order.state_code\">\n                        <b>Mã thành phố:</b> {{ order.state_code }}<br\n                      /></span>\n                      <span><b>Mã quốc gia:</b> {{ order.country_code }}</span>\n                      <br />\n                      <span v-if=\"order.shipping_code\"\n                        ><b>Hình thức vận chuyển: </b\n                        >{{ order.shipping_method }} ({{\n                          order.shipping_code.toUpperCase()\n                        }})</span\n                      >\n                    </p>\n                  </div>\n                </section>\n                <section class=\"card section-order-note\" v-if=\"order.note\">\n                  <div class=\"card-block\">\n                    <h4 class=\"card-title\">Note</h4>\n                    <div class=\"card-text\">{{ order.note }}</div>\n                  </div>\n                </section>\n                <section\n                  class=\"card section-order-tracking\"\n                  v-if=\"order.fulfillments.length > 0\"\n                >\n                  <div class=\"card-block\">\n                    <div\n                      class=\"card-title d-flex align-items-center justify-content-between\"\n                    >\n                      <h4>Fulfillments</h4>\n                    </div>\n                    <div class=\"card-text\">\n                      <div\n                        v-for=\"item in order.fulfillments\"\n                        :key=\"item.id\"\n                        class=\"d-flex align-items-center justify-content-between\"\n                      >\n                        <a :href=\"item.tracking_url\" target=\"_blank\">{{\n                          item.tracking_number\n                        }}</a>\n                        <span class=\"actions\" v-show=\"false\">\n                          <p-tooltip\n                            label=\"Xem chi tiết\"\n                            position=\"top\"\n                            type=\"dark\"\n                          >\n                            <button\n                              class=\"btn--link\"\n                              @click=\"\n                                handleVisibleModalUpdateOrderTracking(item)\n                              \"\n                            >\n                              Xem\n                            </button>\n                          </p-tooltip>\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </section>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <modal-update-order\n      :visible.sync=\"isVisibleEditOrder\"\n      :current=\"order\"\n      :countries=\"countries\"\n      :loading=\"isOrderUpdating\"\n      @save=\"handleUpdateOrder\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport { cloneDeep } from '@core/utils'\nimport { FETCH_ORDER, UPDATE_ORDER } from '@/packages/container/store/types'\nimport mixinFulfillment from '../mixins/fulfillment'\nimport mixinUpdateOrder from '../mixins/update-order'\nimport OrderItems from './components/OrderItems'\nimport ModalUpdateOrder from './components/ModalUpdateOrder'\nimport {\n  FETCH_PRODUCT_TYPES,\n  FETCH_PROVIDERS,\n  FETCH_COUNTRIES,\n} from '@/packages/shared/store'\nimport { ORDER_STATUS_CANCELED } from '@core/constants'\n\nexport default {\n  name: 'OrderView',\n  mixins: [mixinUpdateOrder, mixinFulfillment],\n  components: {\n    OrderItems,\n    ModalUpdateOrder,\n  },\n  computed: {\n    ...mapState('container', {\n      order: (state) => state.order,\n    }),\n    ...mapState('shared', {\n      productTypes: (state) => state.productTypes,\n      providers: (state) => state.providers,\n      countries: (state) => state.countries,\n    }),\n    ...mapState('design', {\n      designs: (state) => state.designs,\n    }),\n    shopId() {\n      return this.order ? this.order.shop_id : 0\n    },\n    orderId() {\n      return parseInt(this.$route.params.id, 10)\n    },\n  },\n  data() {\n    return {\n      editing: false,\n      isFetching: false,\n      isUpdating: false,\n      orderItems: [],\n      resultFetch: {},\n      resultUpdate: {},\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    ...mapActions('container', [FETCH_ORDER, UPDATE_ORDER, 'getLogs']),\n    ...mapActions('shared', [\n      FETCH_PRODUCT_TYPES,\n      FETCH_PROVIDERS,\n      FETCH_COUNTRIES,\n    ]),\n    ...mapActions('design', ['fetchDesigns']),\n\n    async init() {\n      const id = parseInt(this.$route.params.id, 10)\n\n      if (id < 1) {\n        return this.$router.push({ name: 'order-list' })\n      }\n\n      this.isFetching = true\n\n      const { r1 } = await Promise.all([this.fetchOrder(id)])\n\n      this.resultFetch = r1\n      this.isFetching = false\n    },\n\n    async handleUpdateOrder(order) {\n      this.isUpdating = true\n      this.resultUpdate = await this.updateOrder(\n        Object.assign({}, order || this.order, { order_items: this.orderItems })\n      )\n\n      if (this.resultUpdate && this.resultUpdate.success) {\n        this.$set(this, 'orderItems', cloneDeep(this.order.order_items))\n        this.editing = false\n        this.isVisibleEditOrder = false\n        this.init()\n        this.$toast.open({\n          type: 'success',\n          message: 'Cập nhập order item thành công',\n        })\n      } else {\n        this.$toast.open({ type: 'error', message: this.resultUpdate.message })\n      }\n\n      this.isUpdating = false\n    },\n\n    handleSelectedDesign({ url, item, design }) {\n      this.handleUpdateOrderItem(item, {\n        design,\n        design_id: design.id,\n        image: url,\n      })\n    },\n\n    handleSelectedProductType({ item, product }) {\n      this.handleUpdateOrderItem(item, {\n        product_type_id: product.id,\n        product_type: product,\n      })\n    },\n    handleUpdateOrderItem(item, newVal) {\n      const index = this.orderItems.findIndex(({ id }) => id === item.id)\n\n      if (index !== -1) {\n        this.editing = true\n        this.$set(this.orderItems, index, Object.assign({}, item, newVal))\n      }\n    },\n    toggleEditOrder() {\n      if (this.editing) {\n        this.$set(this, 'orderItems', cloneDeep(this.order.order_items))\n        this.editing = false\n      } else {\n        this.editing = true\n      }\n    },\n\n    confirmUpdateOrder(action) {\n      this.$dialog.confirm({\n        message: 'Are you sure you want to do this?',\n        onConfirm: () => this.onUpdateOrderActionConfirm(action),\n      })\n    },\n\n    async onUpdateOrderActionConfirm(action) {\n      const order = Object.assign({}, this.order)\n      switch (action) {\n        case 'canceled':\n          order.status = ORDER_STATUS_CANCELED\n          break\n      }\n\n      this.handleUpdateOrder(order)\n    },\n  },\n  watch: {\n    'order.order_items': function(val) {\n      this.$set(this, 'orderItems', cloneDeep(val))\n    },\n  },\n  filters: {\n    displayname: (order) => {\n      return order.full_name || `${order.first_name} ${order.last_name}`\n    },\n  },\n}\n</script>\n"],"sourceRoot":"src/packages/container/views"}]}