{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/multiselect/pointerMixin.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/multiselect/pointerMixin.js","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["export default {\n  data: function data() {\n    return {\n      pointer: 0,\n      pointerDirty: false\n    };\n  },\n  props: {\n    /**\n     * Enable/disable highlighting of the pointed value.\n     * @type {Boolean}\n     * @default true\n     */\n    showPointer: {\n      type: Boolean,\n      default: true\n    },\n    optionHeight: {\n      type: Number,\n      default: 40\n    }\n  },\n  computed: {\n    pointerPosition: function pointerPosition() {\n      return this.pointer * this.optionHeight;\n    },\n    visibleElements: function visibleElements() {\n      return this.optimizedHeight / this.optionHeight;\n    }\n  },\n  watch: {\n    filteredOptions: function filteredOptions() {\n      this.pointerAdjust();\n    },\n    isOpen: function isOpen() {\n      this.pointerDirty = false;\n    },\n    pointer: function pointer() {\n      this.$refs.search.setAttribute('aria-activedescendant', this.id + '-' + this.pointer.toString());\n    }\n  },\n  methods: {\n    optionHighlight: function optionHighlight(index, option) {\n      return {\n        'multiselect__option--highlight': index === this.pointer && this.showPointer,\n        'multiselect__option--selected': this.isSelected(option)\n      };\n    },\n    groupHighlight: function groupHighlight(index, selectedGroup) {\n      var _this = this;\n\n      if (!this.groupSelect) {\n        return ['multiselect__option--group', 'multiselect__option--disabled'];\n      }\n\n      var group = this.options.find(function (option) {\n        return option[_this.groupLabel] === selectedGroup.$groupLabel;\n      });\n      return group && !this.wholeGroupDisabled(group) ? ['multiselect__option--group', {\n        'multiselect__option--highlight': index === this.pointer && this.showPointer\n      }, {\n        'multiselect__option--group-selected': this.wholeGroupSelected(group)\n      }] : 'multiselect__option--disabled';\n    },\n    addPointerElement: function addPointerElement() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Enter',\n          key = _ref.key;\n\n      /* istanbul ignore else */\n      if (this.filteredOptions.length > 0) {\n        this.select(this.filteredOptions[this.pointer], key);\n      }\n\n      this.pointerReset();\n    },\n    pointerForward: function pointerForward() {\n      /* istanbul ignore else */\n      if (this.pointer < this.filteredOptions.length - 1) {\n        this.pointer++;\n        /* istanbul ignore next */\n\n        if (this.$refs.list.scrollTop <= this.pointerPosition - (this.visibleElements - 1) * this.optionHeight) {\n          this.$refs.list.scrollTop = this.pointerPosition - (this.visibleElements - 1) * this.optionHeight;\n        }\n        /* istanbul ignore else */\n\n\n        if (this.filteredOptions[this.pointer] && this.filteredOptions[this.pointer].$isLabel && !this.groupSelect) this.pointerForward();\n      }\n\n      this.pointerDirty = true;\n    },\n    pointerBackward: function pointerBackward() {\n      if (this.pointer > 0) {\n        this.pointer--;\n        /* istanbul ignore else */\n\n        if (this.$refs.list.scrollTop >= this.pointerPosition) {\n          this.$refs.list.scrollTop = this.pointerPosition;\n        }\n        /* istanbul ignore else */\n\n\n        if (this.filteredOptions[this.pointer] && this.filteredOptions[this.pointer].$isLabel && !this.groupSelect) this.pointerBackward();\n      } else {\n        /* istanbul ignore else */\n        if (this.filteredOptions[this.pointer] && this.filteredOptions[0].$isLabel && !this.groupSelect) this.pointerForward();\n      }\n\n      this.pointerDirty = true;\n    },\n    pointerReset: function pointerReset() {\n      /* istanbul ignore else */\n      if (!this.closeOnSelect) return;\n      this.pointer = 0;\n      /* istanbul ignore else */\n\n      if (this.$refs.list) {\n        this.$refs.list.scrollTop = 0;\n      }\n    },\n    pointerAdjust: function pointerAdjust() {\n      /* istanbul ignore else */\n      if (this.pointer >= this.filteredOptions.length - 1) {\n        this.pointer = this.filteredOptions.length ? this.filteredOptions.length - 1 : 0;\n      }\n\n      if (this.filteredOptions.length > 0 && this.filteredOptions[this.pointer].$isLabel && !this.groupSelect) {\n        this.pointerForward();\n      }\n    },\n    pointerSet: function pointerSet(index) {\n      this.pointer = index;\n      this.pointerDirty = true;\n    }\n  }\n};",null]}