{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/components/ModalCreateOrAppendContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/components/ModalCreateOrAppendContainer.vue","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ORDER_STATUS_PENDING } from '@core/constants';\nexport default {\n  name: 'ModalCreateOrAppendContainer',\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    orders: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    containers: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    fetchContainers: {\n      type: Function,\n      default: function _default() {}\n    },\n    shopId: {\n      type: Number,\n      default: 0\n    }\n  },\n  computed: {\n    availableOrders: function availableOrders() {\n      return this.orders.filter(function (_ref) {\n        var status = _ref.status;\n        return status === 'pending';\n      });\n    },\n    isHasInvalidOrders: function isHasInvalidOrders() {\n      return this.availableOrders.length < this.orders.length;\n    },\n    buttonText: function buttonText() {\n      return this.selectedContainer ? 'Gán vào delivery order' : 'Create';\n    }\n  },\n  data: function data() {\n    return {\n      isFetching: false,\n      selectedContainer: 0\n    };\n  },\n  mounted: function mounted() {\n    this.handleFetchContainers();\n  },\n  methods: {\n    handleClose: function handleClose() {\n      this.$emit('update:visible', false);\n    },\n    handleFetchContainers: function () {\n      var _handleFetchContainers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var payload, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.isFetching = true;\n                payload = {\n                  status: ORDER_STATUS_PENDING,\n                  limit: 250\n                };\n                _context.next = 4;\n                return this.fetchContainers(payload);\n\n              case 4:\n                result = _context.sent;\n                this.isFetching = false;\n\n                if (!result.success) {\n                  this.$toast.open({\n                    type: 'error',\n                    message: result.message\n                  });\n                }\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleFetchContainers() {\n        return _handleFetchContainers.apply(this, arguments);\n      }\n\n      return handleFetchContainers;\n    }(),\n    handleSave: function handleSave() {\n      var ids = this.availableOrders.map(function (_ref2) {\n        var id = _ref2.id;\n        return id;\n      });\n      this.$emit('save', {\n        ids: ids,\n        containerId: this.selectedContainer\n      });\n    }\n  }\n};",null]}