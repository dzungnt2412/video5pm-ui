{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/ticket/store/index.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/ticket/store/index.js","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nvar _mutations;\n\nfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError(\"Cannot destructure undefined\"); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport api from '../api'; // Constant types\n\nvar FETCH_TICKET = 'fetchTicket';\nvar FETCH_TICKETS = 'fetchTickets';\nvar COUNT_TICKETS = 'countTickets';\nvar FETCH_TICKET_MESSAGES = 'fetchTicketMessages';\nvar COUNT_TICKET_MESSAGES = 'countTicketMessages';\nvar PUSH_TICKET_MESSAGE = 'pushTicketMessage';\nvar UPDATE_MESSAGE_TICKET = 'updateTicketMessage';\nvar FETCH_CATEGORIES = 'fetchCategories';\nvar FETCH_TICKET_STATICTIS = 'fetchTicketStatictis';\nexport var state = {\n  tickets: [],\n  count: 0,\n  messages: [],\n  ticket: {},\n  categories: [],\n  statisticTickets: {}\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, FETCH_TICKETS, function (state, payload) {\n  state.tickets = payload;\n}), _defineProperty(_mutations, FETCH_TICKET, function (state, payload) {\n  state.ticket = payload;\n}), _defineProperty(_mutations, COUNT_TICKETS, function (state, payload) {\n  state.count = payload;\n}), _defineProperty(_mutations, FETCH_TICKET_MESSAGES, function (state, payload) {\n  state.messages = payload;\n}), _defineProperty(_mutations, COUNT_TICKET_MESSAGES, function (state, payload) {\n  state.count = payload;\n}), _defineProperty(_mutations, PUSH_TICKET_MESSAGE, function (state, payload) {\n  state.messages = [payload].concat(_toConsumableArray(state.messages));\n}), _defineProperty(_mutations, FETCH_CATEGORIES, function (state, payload) {\n  state.categories = payload;\n}), _defineProperty(_mutations, FETCH_TICKET_STATICTIS, function (state, payload) {\n  state.statisticTickets = payload;\n}), _defineProperty(_mutations, UPDATE_MESSAGE_TICKET, function (state, payload) {\n  state.messages = payload;\n}), _mutations);\nexport var actions = {\n  // eslint-disable-next-line\n  createTicket: function () {\n    var _createTicket = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, payload) {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return api.createTicket(payload);\n\n            case 3:\n              response = _context.sent;\n\n              if (!(response && response.ticket && response.ticket.id)) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {\n                success: true,\n                id: response.ticket.id\n              });\n\n            case 6:\n              return _context.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage || ''\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function createTicket(_x, _x2) {\n      return _createTicket.apply(this, arguments);\n    }\n\n    return createTicket;\n  }(),\n  fetchTickets: function () {\n    var _fetchTickets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2, payload) {\n      var commit, success, message, _yield$Promise$all, _yield$Promise$all2, list, count;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              success = true;\n              message = '';\n              _context2.next = 5;\n              return Promise.all([api.fetchTickets(payload), api.countTickets(payload)]);\n\n            case 5:\n              _yield$Promise$all = _context2.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              list = _yield$Promise$all2[0];\n              count = _yield$Promise$all2[1];\n\n              if (!list || list.error || !count) {\n                list = {\n                  tickets: []\n                };\n                count = {\n                  count: 0\n                };\n                success = false;\n                message = list.errorMessage || '';\n              }\n\n              commit(FETCH_TICKETS, list.tickets);\n              commit(COUNT_TICKETS, count.count);\n              return _context2.abrupt(\"return\", {\n                success: success,\n                message: message,\n                items: list.tickets\n              });\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function fetchTickets(_x3, _x4) {\n      return _fetchTickets.apply(this, arguments);\n    }\n\n    return fetchTickets;\n  }(),\n  fetchTicket: function () {\n    var _fetchTicket = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref3, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              result = {\n                success: true\n              };\n              _context3.next = 4;\n              return api.fetchTicket(payload);\n\n            case 4:\n              response = _context3.sent;\n\n              if (!response || response.error) {\n                result = {\n                  success: false,\n                  message: response.errorMessage || ''\n                };\n                response = {\n                  ticket: {}\n                };\n              }\n\n              commit(FETCH_TICKET, response.ticket);\n              return _context3.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function fetchTicket(_x5, _x6) {\n      return _fetchTicket.apply(this, arguments);\n    }\n\n    return fetchTicket;\n  }(),\n  // eslint-disable-next-line no-empty-pattern\n  fetchTicketFile: function () {\n    var _fetchTicketFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref4, payload) {\n      var result, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _objectDestructuringEmpty(_ref4);\n\n              result = {\n                success: true\n              };\n              _context4.next = 4;\n              return api.fetchTicketFile(payload);\n\n            case 4:\n              response = _context4.sent;\n\n              if (!response || response.error) {\n                result = {\n                  success: false,\n                  message: response.errorMessage || ''\n                };\n              }\n\n              result.blob = response;\n              return _context4.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function fetchTicketFile(_x7, _x8) {\n      return _fetchTicketFile.apply(this, arguments);\n    }\n\n    return fetchTicketFile;\n  }(),\n  // eslint-disable-next-line\n  closeTicket: function () {\n    var _closeTicket = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref5, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref5.commit;\n              result = {\n                success: true\n              };\n              _context5.next = 4;\n              return api.closeTicket(payload);\n\n            case 4:\n              response = _context5.sent;\n\n              if (!response || response.error) {\n                result = {\n                  success: false,\n                  message: response.errorMessage || ''\n                };\n              }\n\n              return _context5.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function closeTicket(_x9, _x10) {\n      return _closeTicket.apply(this, arguments);\n    }\n\n    return closeTicket;\n  }(),\n  fetchTicketMessages: function () {\n    var _fetchTicketMessages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref6, ticket_id, payload) {\n      var commit, success, message, _yield$Promise$all3, _yield$Promise$all4, list, count;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref6.commit;\n              success = true;\n              message = '';\n              _context6.next = 5;\n              return Promise.all([api.fetchTicketMessages(ticket_id, payload), api.countTicketMessages(ticket_id, payload)]);\n\n            case 5:\n              _yield$Promise$all3 = _context6.sent;\n              _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);\n              list = _yield$Promise$all4[0];\n              count = _yield$Promise$all4[1];\n\n              if (!list || list.error || !count) {\n                list = {\n                  messages: []\n                };\n                count = {\n                  count: 0\n                };\n                success = false;\n                message = list.errorMessage || '';\n              }\n\n              commit(FETCH_TICKET_MESSAGES, list.messages);\n              commit(COUNT_TICKET_MESSAGES, count.count);\n              return _context6.abrupt(\"return\", {\n                success: success,\n                message: message,\n                items: list.messages\n              });\n\n            case 13:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function fetchTicketMessages(_x11, _x12, _x13) {\n      return _fetchTicketMessages.apply(this, arguments);\n    }\n\n    return fetchTicketMessages;\n  }(),\n  // eslint-disable-next-line\n  pushMessage: function () {\n    var _pushMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref7, payload) {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              commit = _ref7.commit;\n              _context7.next = 3;\n              return api.pushMessage(payload);\n\n            case 3:\n              response = _context7.sent;\n\n              if (!(response && response.message && response.message.id)) {\n                _context7.next = 6;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", {\n                success: true,\n                id: response.message.id\n              });\n\n            case 6:\n              return _context7.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage || ''\n              });\n\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    function pushMessage(_x14, _x15) {\n      return _pushMessage.apply(this, arguments);\n    }\n\n    return pushMessage;\n  }(),\n  fetchCategories: function fetchCategories(_ref8) {\n    var commit = _ref8.commit;\n    var categories = ['Thay đổi thông tin đặt hàng', 'Hủy đơn', 'Vấn đề về thời gian sản xuất & tracking', 'Label', 'Vấn đề sau khi phát hàng (thiếu, sai sản phẩm, chất lượng kém,…)', 'Trường hợp khác'];\n    commit(FETCH_CATEGORIES, categories);\n  },\n  // eslint-disable-next-line\n  fetchTicketStatictis: function () {\n    var _fetchTicketStatictis = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_ref9) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              commit = _ref9.commit;\n              result = {\n                success: true\n              };\n              _context8.next = 4;\n              return api.fetchStatisticTicketStatus();\n\n            case 4:\n              response = _context8.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  totals: {}\n                };\n              }\n\n              commit(FETCH_TICKET_STATICTIS, response.totals);\n              return _context8.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function fetchTicketStatictis(_x16) {\n      return _fetchTicketStatictis.apply(this, arguments);\n    }\n\n    return fetchTicketStatictis;\n  }()\n};",null]}