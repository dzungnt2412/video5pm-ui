{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/ContainerView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/ContainerView.vue","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*eslint-disable*/\nimport { mapState, mapActions } from 'vuex';\nimport { VclTable } from 'vue-content-loading';\nimport { cloneDeep } from '@core/utils';\nimport { ORDER_STATUS_CANCELED, ORDER_STATUS_PAID } from '@core/constants';\nimport mixinRoute from '@core/mixins/route';\nimport mixinTable from '@core/mixins/table';\nimport { FETCH_CONTAINER, FETCH_ORDERS, FETCH_ORDER, UPDATE_ORDER } from '@/packages/container/store/types';\nimport mixinUpdateOrder from '../mixins/update-order';\nimport { Pagination } from '@kit';\nimport Accordion from '@kit/Accordion';\nimport AccordionItem from '@kit/AccordionItem';\nimport { formatPrice } from '@core/utils/formatter';\nimport { FETCH_PRODUCT_TYPES, FETCH_USERS_BY_ROLE } from '@/packages/shared/store';\nimport Thumbnail from '@components/shared/Thumbnail';\nimport mixinContainer from '../mixins/container';\nimport { ORDER_STATUS } from '../constants';\nimport StatusTab from '@components/shared/StatusTab';\nimport OrderItems from './components/OrderItems';\nimport ModalUpdateOrdersWrong from './components/ModalUpdateOrdersWrong';\nimport ModalUpdateOrder from './components/ModalUpdateOrder';\nexport default {\n  name: 'ContainerView',\n  mixins: [mixinRoute, mixinTable, mixinContainer, mixinUpdateOrder],\n  components: {\n    StatusTab: StatusTab,\n    Thumbnail: Thumbnail,\n    OrderItems: OrderItems,\n    Accordion: Accordion,\n    AccordionItem: AccordionItem,\n    ModalUpdateOrdersWrong: ModalUpdateOrdersWrong,\n    ModalUpdateOrder: ModalUpdateOrder,\n    Pagination: Pagination,\n    VclTable: VclTable\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapState('container', {\n    container: function container(state) {\n      return state.container;\n    },\n    currentOrders: function currentOrders(state) {\n      return state.orders;\n    },\n    count: function count(state) {\n      return state.orderCount;\n    },\n    order: function order(state) {\n      return state.order;\n    },\n    consignments: function consignments(state) {\n      return state.consignments;\n    }\n  })), mapState('shared', {\n    productTypes: function productTypes(state) {\n      return state.productTypes;\n    },\n    supplierUsers: function supplierUsers(state) {\n      return state.users;\n    }\n  })), mapState('design', {\n    designs: function designs(state) {\n      return state.designs;\n    }\n  })), {}, {\n    containerId: function containerId() {\n      return parseInt(this.$route.params.id, 10);\n    },\n    isVisibleStatisticSection: function isVisibleStatisticSection() {\n      var status = ['pending', 'draft', 'canceled'];\n      return this.statisticsProductBases && this.statisticsProductBases.length && status.indexOf(this.order.status) === -1;\n    },\n    wrongOrders: function wrongOrders() {\n      var _this = this;\n\n      return this.orders.filter(function (_ref) {\n        var id = _ref.id;\n        return _this.wrongOrderIds.indexOf(id) !== -1;\n      });\n    },\n    isVisibleActions: function isVisibleActions() {\n      return this.container && this.container.status !== ORDER_STATUS_CANCELED;\n    },\n    shopId: function shopId() {\n      return this.container && this.container.shop ? this.container.shop.id : 0;\n    },\n    user: function user() {\n      return this.container.shop && this.container.shop.user ? this.container.shop.user : {};\n    },\n    statisticsProductBases: function statisticsProductBases() {\n      return this.container && this.container.product_bases ? this.container.product_bases.filter(function (item) {\n        return item.id;\n      }) : [];\n    },\n    orderStatus: function orderStatus() {\n      return ORDER_STATUS;\n    },\n    statisticTotalShippingFees: function statisticTotalShippingFees() {\n      return this.statisticsProductBases ? this.statisticsProductBases.reduce(function (total, item) {\n        return total + item.shipping_fee * item.qty;\n      }, 0) : 0;\n    },\n    statisticTotalAmount: function statisticTotalAmount() {\n      return this.statisticsProductBases ? this.statisticsProductBases.reduce(function (amount, item) {\n        return amount + item.price * item.qty;\n      }, 0) : 0;\n    },\n    items: function items() {\n      var items = [];\n      this.orders.forEach(function (order) {\n        order.order_items.forEach(function (item) {\n          items.push({\n            id: item.id,\n            order_id: item.order_id,\n            consignment_id: item.consignment_id,\n            name: item.name,\n            image: item.image,\n            sku: item.sku,\n            product_type: item.product_type,\n            price: item.price,\n            quantity: item.quantity,\n            attribute: item.attribute,\n            shipping_method: order.shipping_method,\n            shipping_fee: item.shipping_fee,\n            order_status: item.shipping_fee\n          });\n        });\n      });\n      return items;\n    }\n  }),\n  data: function data() {\n    return {\n      isFetching: true,\n      isOrderFetching: true,\n      isOrdersFetching: true,\n      resultFetchOrder: {},\n      isVisibleSelectSupplier: false,\n      isSupplierAssigning: false,\n      isExpandOrders: false,\n      orders: [],\n      isVisibleUpdateOrder: false,\n      isVisibleUpdateOrdersWrong: false,\n      isOrderUpdating: false,\n      wrongOrderIds: [],\n      updateOrderIds: [],\n      isVisibleAppendConsignment: false,\n      isVisibleUpdateOrderStatus: false,\n      styleTable: 0\n    };\n  },\n  created: function created() {\n    this.filter = this.getRouteQuery();\n    this.init();\n  },\n  methods: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapActions('container', [FETCH_CONTAINER, FETCH_ORDERS, FETCH_ORDER, UPDATE_ORDER])), mapActions('design', ['fetchDesigns'])), mapActions('shared', [FETCH_PRODUCT_TYPES, FETCH_USERS_BY_ROLE])), {}, {\n    formatPrice: formatPrice,\n    init: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Promise.all([this.handleFetchContainer(), this.handleFetchOrders()]);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }(),\n    handleFetchContainer: function () {\n      var _handleFetchContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.isFetching = true;\n                _context2.next = 3;\n                return this.fetchContainer(this.containerId);\n\n              case 3:\n                result = _context2.sent;\n\n                if (!result.success) {\n                  this.$toast.open({\n                    message: result.message,\n                    type: 'error'\n                  });\n                }\n\n                this.isFetching = false;\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleFetchContainer() {\n        return _handleFetchContainer.apply(this, arguments);\n      }\n\n      return handleFetchContainer;\n    }(),\n    handleFetchOrders: function () {\n      var _handleFetchOrders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.isExpandOrders = false;\n                this.isOrdersFetching = true;\n                this.handleUpdateRouteQuery();\n                _context3.next = 5;\n                return this.fetchOrders(Object.assign({\n                  container_id: this.containerId\n                }, this.filter));\n\n              case 5:\n                this.resultFetchOrder = _context3.sent;\n                this.isExpandOrders = true;\n                this.isOrdersFetching = false;\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleFetchOrders() {\n        return _handleFetchOrders.apply(this, arguments);\n      }\n\n      return handleFetchOrders;\n    }(),\n    handleFetchOrder: function () {\n      var _handleFetchOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(orderId) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.isOrderFetching = true;\n                _context4.next = 3;\n                return this.fetchOrder(orderId);\n\n              case 3:\n                result = _context4.sent;\n\n                if (result.success) {\n                  this.handleVisibleModalUpdateOrder();\n                } else {\n                  this.$toast.open({\n                    type: 'error',\n                    message: result.message\n                  });\n                }\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function handleFetchOrder(_x) {\n        return _handleFetchOrder.apply(this, arguments);\n      }\n\n      return handleFetchOrder;\n    }(),\n    handleSelectedDesign: function handleSelectedDesign(_ref2) {\n      var url = _ref2.url,\n          orderId = _ref2.orderId,\n          design = _ref2.design,\n          item = _ref2.item;\n      this.handleUpdateOrderItem(orderId, item, {\n        design_id: design.id,\n        design: design,\n        image: url\n      });\n    },\n    handleUpdateOrderItem: function handleUpdateOrderItem(orderId, item, val) {\n      var index = this.orders.findIndex(function (_ref3) {\n        var id = _ref3.id;\n        return id === orderId;\n      });\n\n      if (index === -1) {\n        return;\n      }\n\n      var orderItems = this.orders[index].order_items;\n      var indexItem = orderItems.findIndex(function (_ref4) {\n        var id = _ref4.id;\n        return id === item.id;\n      });\n\n      if (indexItem !== -1) {\n        var newVal = Object.assign({}, orderItems[indexItem], val);\n        this.$set(this.orders[index].order_items, indexItem, newVal);\n        this.isVisibleUpdateOrder = true;\n        this.updateOrderIds.push(orderId);\n      }\n    },\n\n    /**\n     * Handle update multiple orders\n     * @param exceptSuccess\n     * @return {Promise<void>}\n     */\n    handleUpdateOrders: function () {\n      var _handleUpdateOrders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this2 = this;\n\n        var exceptSuccess,\n            orders,\n            promises,\n            result,\n            wrongOrderIds,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                exceptSuccess = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : false;\n                orders = [];\n                this.orders.forEach(function (order) {\n                  if (_this2.updateOrderIds.indexOf(order.id) !== -1 && (!exceptSuccess || _this2.wrongOrderIds.indexOf(order.id) !== -1)) {\n                    orders.push(order);\n                  }\n                });\n\n                if (orders.length) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 5:\n                promises = [];\n                orders.forEach(function (order) {\n                  promises.push(_this2.updateOrder(order));\n                });\n                this.isOrderUpdating = true;\n                _context5.next = 10;\n                return Promise.all(promises);\n\n              case 10:\n                result = _context5.sent;\n                this.isOrderUpdating = false; // Result\n\n                if (!(result && Array.isArray(result))) {\n                  _context5.next = 27;\n                  break;\n                }\n\n                wrongOrderIds = result.filter(function (_ref5) {\n                  var success = _ref5.success;\n                  return success === false;\n                }).map(function (_ref6) {\n                  var id = _ref6.id;\n                  return id;\n                });\n\n                if (!(wrongOrderIds.length === 0)) {\n                  _context5.next = 25;\n                  break;\n                }\n\n                this.updateOrderIds = [];\n                this.wrongOrderIds = [];\n                this.isVisibleUpdateOrdersWrong = false;\n                this.isVisibleUpdateOrder = false;\n                _context5.next = 21;\n                return this.handleFetchOrders();\n\n              case 21:\n                _context5.next = 23;\n                return this.handleFetchContainer();\n\n              case 23:\n                this.$toast.open({\n                  type: 'success',\n                  message: 'Cập nhập order thành công'\n                });\n                return _context5.abrupt(\"return\");\n\n              case 25:\n                this.isVisibleUpdateOrdersWrong = true;\n                this.wrongOrderIds = wrongOrderIds;\n\n              case 27:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function handleUpdateOrders() {\n        return _handleUpdateOrders.apply(this, arguments);\n      }\n\n      return handleUpdateOrders;\n    }(),\n    handleUpdateOrder: function () {\n      var _handleUpdateOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(order) {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                payload = cloneDeep(order);\n                delete payload.order_items;\n                this.isOrderUpdating = true;\n                _context6.next = 5;\n                return this.updateOrder(payload);\n\n              case 5:\n                this.resultUpdate = _context6.sent;\n\n                if (!(this.resultUpdate && this.resultUpdate.success)) {\n                  _context6.next = 13;\n                  break;\n                }\n\n                this.isOrderUpdating = false;\n                this.isVisibleEditOrder = false;\n                _context6.next = 11;\n                return this.handleFetchContainer();\n\n              case 11:\n                this.$toast.open({\n                  type: 'success',\n                  message: 'Cập nhập order item thành công'\n                });\n                return _context6.abrupt(\"return\");\n\n              case 13:\n                this.$toast.open({\n                  type: 'error',\n                  message: this.resultUpdate.message\n                });\n                this.isOrderUpdating = false;\n\n              case 15:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function handleUpdateOrder(_x2) {\n        return _handleUpdateOrder.apply(this, arguments);\n      }\n\n      return handleUpdateOrder;\n    }(),\n    getOrderTitle: function getOrderTitle(order) {\n      var title = \"| \".concat(order.country_code, \" | \").concat(order.shipping_method);\n\n      if (order.fulfillments.length) {\n        var items = order.fulfillments.map(function (item) {\n          return item.tracking_number;\n        });\n        title += \" | \".concat(items.toString());\n      }\n\n      return title;\n    },\n    toggleOpen: function toggleOpen(action) {\n      this.isExpandOrders = action === 'expand';\n    }\n  }),\n  watch: {\n    currentOrders: {\n      handler: function handler(val) {\n        if (val) {\n          this.orders = cloneDeep(val);\n        }\n      },\n      immediate: true\n    },\n    filter: {\n      handler: function handler() {\n        this.handleFetchOrders();\n      },\n      immediate: true,\n      deep: true\n    }\n  }\n};",null]}