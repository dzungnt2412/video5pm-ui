{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/pagination/Pagination.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/pagination/Pagination.vue","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'PPagination',\n  props: {\n    total: [Number, String],\n    perPage: {\n      type: [Number, String],\n      default: 20\n    },\n    current: {\n      type: [Number, String],\n      default: 1\n    },\n    size: String,\n    simple: Boolean,\n    rounded: Boolean,\n    order: String,\n    iconPack: String,\n    ariaNextLabel: String,\n    ariaPreviousLabel: String,\n    ariaPageLabel: String,\n    ariaCurrentLabel: String\n  },\n  computed: {\n    rootClasses: function rootClasses() {\n      return [this.order, this.size ? \"pagination-\".concat(this.size) : '', {\n        'is-simple': this.simple,\n        'is-rounded': this.rounded\n      }];\n    },\n\n    /**\n     * Total page size (count).\n     */\n    pageCount: function pageCount() {\n      return Math.ceil(this.total / this.perPage);\n    },\n\n    /**\n     * First item of the page (count).\n     */\n    firstItem: function firstItem() {\n      var firstItem = this.current * this.perPage - this.perPage + 1;\n      return firstItem >= 0 ? firstItem : 0;\n    },\n\n    /**\n     * Check if previous button is available.\n     */\n    hasPrev: function hasPrev() {\n      return this.current > 1;\n    },\n\n    /**\n     * Check if first page button should be visible.\n     */\n    hasFirst: function hasFirst() {\n      return this.current >= 3;\n    },\n\n    /**\n     * Check if first ellipsis should be visible.\n     */\n    hasFirstEllipsis: function hasFirstEllipsis() {\n      return this.current >= 5;\n    },\n\n    /**\n     * Check if last page button should be visible.\n     */\n    hasLast: function hasLast() {\n      return this.current <= this.pageCount - 2;\n    },\n\n    /**\n     * Check if last ellipsis should be visible.\n     */\n    hasLastEllipsis: function hasLastEllipsis() {\n      return this.current < this.pageCount - 3;\n    },\n\n    /**\n     * Check if next button is available.\n     */\n    hasNext: function hasNext() {\n      return this.current < this.pageCount;\n    },\n\n    /**\n     * Get near pages, 1 before and 1 after the current.\n     * Also add the click event to the array.\n     */\n    pagesInRange: function pagesInRange() {\n      var _this = this;\n\n      if (this.simple) {\n        return;\n      }\n\n      var left = Math.max(1, this.current - 1);\n\n      if (left - 1 === 2) {\n        left--; // Do not show the ellipsis if there is only one to hide\n      }\n\n      var right = Math.min(this.current + 1, this.pageCount);\n\n      if (this.pageCount - right === 2) {\n        right++; // Do not show the ellipsis if there is only one to hide\n      }\n\n      var pages = [];\n\n      var _loop = function _loop(i) {\n        pages.push({\n          number: i,\n          isCurrent: _this.current === i,\n          click: function click(event) {\n            if (_this.current === i) {\n              return;\n            }\n\n            _this.$emit('change', i);\n\n            _this.$emit('update:current', i); // Set focus on element to keep tab order\n\n\n            _this.$nextTick(function () {\n              return event.target.focus();\n            });\n          }\n        });\n      };\n\n      for (var i = left; i <= right; i++) {\n        _loop(i);\n      }\n\n      return pages;\n    }\n  },\n  watch: {\n    /**\n     * If current page is trying to be greater than page count, set to last.\n     */\n    pageCount: function pageCount(value) {\n      if (this.current > value) {\n        this.last();\n      }\n    }\n  },\n  methods: {\n    /**\n     * Previous button click listener.\n     */\n    prev: function prev() {\n      if (!this.hasPrev) {\n        return;\n      }\n\n      this.$emit('change', this.current - 1);\n      this.$emit('update:current', this.current - 1);\n    },\n\n    /**\n     * First button click listener.\n     */\n    first: function first() {\n      this.$emit('change', 1);\n      this.$emit('update:current', 1);\n    },\n\n    /**\n     * Last button click listener.\n     */\n    last: function last() {\n      this.$emit('change', this.pageCount);\n      this.$emit('update:current', this.pageCount);\n    },\n\n    /**\n     * Next button click listener.\n     */\n    next: function next() {\n      if (!this.hasNext) {\n        return;\n      }\n\n      this.$emit('change', this.current + 1);\n      this.$emit('update:current', this.current + 1);\n    },\n\n    /**\n     * Get text for aria-label according to page number.\n     */\n    getAriaPageLabel: function getAriaPageLabel(pageNumber, isCurrent) {\n      if (this.ariaPageLabel && (!isCurrent || !this.ariaCurrentLabel)) {\n        return this.ariaPageLabel + ' ' + pageNumber + '.';\n      } else if (this.ariaPageLabel && isCurrent && this.ariaCurrentLabel) {\n        return this.ariaCurrentLabel + ', ' + this.ariaPageLabel + ' ' + pageNumber + '.';\n      }\n\n      return null;\n    }\n  }\n};",null]}