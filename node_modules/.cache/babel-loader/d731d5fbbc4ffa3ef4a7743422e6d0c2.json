{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/autocomplete/Autocomplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/autocomplete/Autocomplete.vue","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getValueByPath } from '../../utils/common';\nimport PInput from '../input/Input';\nimport FormElementMixin from '../../mixins/FormElement';\nexport default {\n  name: 'PAutocomplete',\n  components: {\n    PInput: PInput\n  },\n  inheritAttrs: false,\n  mixins: [FormElementMixin],\n  props: {\n    value: [Number, String],\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    field: {\n      type: String,\n      default: 'value'\n    },\n    keepFirst: Boolean,\n    clearOnSelect: Boolean,\n    openOnFocus: Boolean,\n    customFormatter: Function\n  },\n  data: function data() {\n    return {\n      selected: null,\n      hovered: null,\n      isActive: false,\n      internalVal: this.value,\n      internalAutocomplete: this.autocomplete || 'off',\n      isListInViewportVertically: true,\n      hasFocus: false,\n      isAutocomplete: true,\n      elementRef: 'input'\n    };\n  },\n  computed: {\n    /**\n     * White-listed items to not close when clicked.\n     * Add input, dropdown and all children.\n     */\n    whiteList: function whiteList() {\n      var whiteList = [];\n      whiteList.push(this.$refs.input.$el.querySelector('input'));\n      whiteList.push(this.$refs.dropdown); // Add all chidren from dropdown\n\n      if (this.$refs.dropdown !== undefined) {\n        var children = this.$refs.dropdown.querySelectorAll('*');\n\n        var _iterator = _createForOfIteratorHelper(children),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var child = _step.value;\n            whiteList.push(child);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      return whiteList;\n    },\n\n    /**\n     * Check if exists default slot\n     */\n    hasDefaultSlot: function hasDefaultSlot() {\n      return !!this.$scopedSlots.default;\n    },\n\n    /**\n     * Check if exists \"empty\" slot\n     */\n    hasEmptySlot: function hasEmptySlot() {\n      return !!this.$slots.empty;\n    },\n\n    /**\n     * Check if exists \"header\" slot\n     */\n    hasHeaderSlot: function hasHeaderSlot() {\n      return !!this.$slots.header;\n    },\n\n    /**\n     * Check if exists \"footer\" slot\n     */\n    hasFooterSlot: function hasFooterSlot() {\n      return !!this.$slots.footer;\n    }\n  },\n  watch: {\n    /**\n     * When dropdown is toggled, check the visibility to know when\n     * to open upwards.\n     */\n    isActive: function isActive(active) {\n      var _this = this;\n\n      if (active) {\n        this.calcDropdownInViewportVertical();\n      } else {\n        this.$nextTick(function () {\n          return _this.setHovered(null);\n        }); // Timeout to wait for the animation to finish before recalculating\n\n        setTimeout(function () {\n          _this.calcDropdownInViewportVertical();\n        }, 100);\n      }\n    },\n\n    /**\n     * When updating input's value\n     *   1. Emit changes\n     *   2. If value isn't the same as selected, set null\n     *   3. Close dropdown if value is clear or else open it\n     */\n    internalVal: function internalVal(value) {\n      this.$emit('input', value); // Check if selected is invalid\n\n      var currentValue = this.getValue(this.selected);\n\n      if (currentValue && currentValue !== value) {\n        this.setSelected(null, false);\n      } // Close dropdown if input is clear or else open it\n\n\n      if (this.hasFocus && (!this.openOnFocus || value)) {\n        this.isActive = !!value;\n      }\n    },\n\n    /**\n     * When v-model is changed:\n     *   1. Update internal value.\n     *   2. If it's invalid, validate again.\n     */\n    value: function value(_value) {\n      this.internalVal = _value;\n    },\n\n    /**\n     * Select first option if \"keep-first\n     */\n    data: function data(value) {\n      // Keep first option always pre-selected\n      if (this.keepFirst) {\n        this.selectFirstOption(value);\n      }\n    }\n  },\n  methods: {\n    /**\n     * Set which option is currently hovered.\n     */\n    setHovered: function setHovered(option) {\n      if (option === undefined) {\n        return;\n      }\n\n      this.hovered = option;\n    },\n\n    /**\n     * Set which option is currently selected, update v-model,\n     * update input value and close dropdown.\n     */\n    setSelected: function setSelected(option) {\n      var _this2 = this;\n\n      var closeDropdown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (option === undefined) {\n        return;\n      }\n\n      this.selected = option;\n      this.$emit('select', this.selected);\n\n      if (this.selected !== null) {\n        this.internalVal = this.clearOnSelect ? '' : this.getValue(this.selected);\n      }\n\n      closeDropdown && this.$nextTick(function () {\n        _this2.isActive = false;\n      });\n    },\n\n    /**\n     * Select first option\n     */\n    selectFirstOption: function selectFirstOption(options) {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        if (options.length) {\n          // If has visible data or open on focus, keep updating the hovered\n          if (_this3.openOnFocus || _this3.internalVal !== '' && _this3.hovered !== options[0]) {\n            _this3.setHovered(options[0]);\n          }\n        } else {\n          _this3.setHovered(null);\n        }\n      });\n    },\n\n    /**\n     * Enter key listener.\n     * Select the hovered option.\n     */\n    enterPressed: function enterPressed() {\n      if (this.hovered === null) {\n        return;\n      }\n\n      this.setSelected(this.hovered);\n    },\n\n    /**\n     * Tab key listener.\n     * Select hovered option if it exists, close dropdown, then allow\n     * native handling to move to next tabbable element.\n     */\n    tabPressed: function tabPressed() {\n      if (this.hovered === null) {\n        this.isActive = false;\n        return;\n      }\n\n      this.setSelected(this.hovered);\n    },\n\n    /**\n     * Close dropdown if clicked outside.\n     */\n    clickedOutside: function clickedOutside(event) {\n      if (this.whiteList.indexOf(event.target) < 0) {\n        this.isActive = false;\n      }\n    },\n\n    /**\n     * Return display text for the input.\n     * If object, get value from path, or else just the value.\n     */\n    getValue: function getValue(option) {\n      if (!option) {\n        return;\n      }\n\n      if (typeof this.customFormatter !== 'undefined') {\n        return this.customFormatter(option);\n      }\n\n      return _typeof(option) === 'object' ? getValueByPath(option, this.field) : option;\n    },\n\n    /**\n     * Calculate if the dropdown is vertically visible when activated,\n     * otherwise it is openened upwards.\n     */\n    calcDropdownInViewportVertical: function calcDropdownInViewportVertical() {\n      var _this4 = this;\n\n      this.$nextTick(function () {\n        /**\n         * this.$refs.dropdown may be undefined\n         * when Autocomplete is conditional rendered\n         */\n        if (_this4.$refs.dropdown === undefined) {\n          return;\n        }\n\n        var rect = _this4.$refs.dropdown.getBoundingClientRect();\n\n        _this4.isListInViewportVertically = rect.top >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight);\n      });\n    },\n\n    /**\n     * Arrows keys listener.\n     * If dropdown is active, set hovered option, or else just open.\n     */\n    keyArrows: function keyArrows(direction) {\n      var sum = direction === 'down' ? 1 : -1;\n\n      if (this.isActive) {\n        var index = this.data.indexOf(this.hovered) + sum;\n        index = index > this.data.length - 1 ? this.data.length : index;\n        index = index < 0 ? 0 : index;\n        this.setHovered(this.data[index]);\n        var list = this.$refs.dropdown.querySelector('.dropdown-content');\n        var element = list.querySelectorAll('a.dropdown-item:not(.is-disabled)')[index];\n\n        if (!element) {\n          return;\n        }\n\n        var visMin = list.scrollTop;\n        var visMax = list.scrollTop + list.clientHeight - element.clientHeight;\n\n        if (element.offsetTop < visMin) {\n          list.scrollTop = element.offsetTop;\n        } else if (element.offsetTop >= visMax) {\n          list.scrollTop = element.offsetTop - list.clientHeight + element.clientHeight;\n        }\n      } else {\n        this.isActive = true;\n      }\n    },\n\n    /**\n     * Focus listener.\n     * If value is the same as selected, select all text.\n     */\n    focused: function focused(event) {\n      if (this.getValue(this.selected) === this.internalVal) {\n        this.$el.querySelector('input').select();\n      }\n\n      if (this.openOnFocus) {\n        this.isActive = true;\n\n        if (this.keepFirst) {\n          this.selectFirstOption(this.data);\n        }\n      }\n\n      this.hasFocus = true;\n      this.$emit('focus', event);\n    },\n\n    /**\n     * Blur listener.\n     */\n    onBlur: function onBlur(event) {\n      this.hasFocus = false;\n      this.$emit('blur', event);\n    },\n    onInput: function onInput() {\n      var currentValue = this.getValue(this.selected);\n\n      if (currentValue && currentValue === this.internalVal) {\n        return;\n      }\n\n      this.$emit('typing', this.internalVal);\n    }\n  },\n  created: function created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('click', this.clickedOutside);\n      window.addEventListener('resize', this.calcDropdownInViewportVertical);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('click', this.clickedOutside);\n      window.removeEventListener('resize', this.calcDropdownInViewportVertical);\n    }\n  }\n};",null]}