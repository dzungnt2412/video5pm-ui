{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/popover/Popover.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/popover/Popover.vue","mtime":1604479002001},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { generateId, domOff, domOn, addClass, removeClass } from '../../utils/dom';\nimport Popper from '../../mixins/Popper';\nexport default {\n  name: 'PPopover',\n  mixins: [Popper],\n  props: {\n    trigger: {\n      type: String,\n      default: 'click',\n      validator: function validator(value) {\n        return ['click', 'focus', 'hover', 'manual'].indexOf(value) > -1;\n      }\n    },\n    openDelay: {\n      type: Number,\n      default: 0\n    },\n    title: String,\n    disabled: Boolean,\n    content: String,\n    reference: {},\n    popperClass: String,\n    width: {},\n    visibleArrow: {\n      default: true\n    },\n    arrowOffset: {\n      type: Number,\n      default: 0\n    },\n    transition: {\n      type: String,\n      default: 'fade-in-linear'\n    },\n    useCustomClass: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      default: ''\n    },\n    compact: {\n      default: false,\n      type: Boolean\n    }\n  },\n  computed: {\n    wrapperClasses: function wrapperClasses() {\n      var classes = [this.popperClass, this.content && !this.compact ? 'p-popover--plain' : '', this.content && this.compact ? 'p-popover--compact' : '', this.type ? \"is-\".concat(this.type) : ''];\n\n      if (this.showPopper) {\n        classes.push('popover-activated');\n      }\n\n      if (!this.useCustomClass) {\n        classes.push('p-popover');\n      }\n\n      return classes;\n    },\n    tooltipId: function tooltipId() {\n      return \"p-popover-\".concat(generateId());\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var reference = this.referenceElm = this.reference || this.$refs.reference;\n    var popper = this.popper || this.$refs.popper;\n\n    if (!reference && this.$slots.reference && this.$slots.reference[0]) {\n      reference = this.referenceElm = this.$slots.reference[0].elm;\n    }\n\n    if (reference) {\n      addClass(reference, 'p-popover__reference');\n      reference.setAttribute('aria-describedby', this.tooltipId);\n      reference.setAttribute('tabindex', 0); // tab序列\n\n      popper.setAttribute('tabindex', 0);\n\n      if (this.trigger !== 'click') {\n        domOn(reference, 'focusin', function () {\n          _this.handleFocus();\n\n          var instance = reference.__vue__;\n\n          if (instance && typeof instance.focus === 'function') {\n            instance.focus();\n          }\n        });\n        domOn(popper, 'focusin', this.handleFocus);\n        domOn(reference, 'focusout', this.handleBlur);\n        domOn(popper, 'focusout', this.handleBlur);\n      }\n\n      domOn(reference, 'keydown', this.handleKeydown);\n      domOn(reference, 'click', this.handleClick);\n    }\n\n    if (this.trigger === 'click') {\n      domOn(reference, 'click', this.doToggle);\n      domOn(document, 'click', this.handleDocumentClick);\n    } else if (this.trigger === 'hover') {\n      domOn(reference, 'mouseenter', this.handleMouseEnter);\n      domOn(popper, 'mouseenter', this.handleMouseEnter);\n      domOn(reference, 'mouseleave', this.handleMouseLeave);\n      domOn(popper, 'mouseleave', this.handleMouseLeave);\n    } else if (this.trigger === 'focus') {\n      if (reference.querySelector('input, textarea')) {\n        domOn(reference, 'focusin', this.doShow);\n        domOn(reference, 'focusout', this.doClose);\n      } else {\n        domOn(reference, 'mousedown', this.doShow);\n        domOn(reference, 'mouseup', this.doClose);\n      }\n    }\n  },\n  methods: {\n    doToggle: function doToggle() {\n      this.showPopper = !this.showPopper;\n    },\n    doShow: function doShow() {\n      this.showPopper = true;\n    },\n    doClose: function doClose() {\n      this.showPopper = false;\n    },\n    handleFocus: function handleFocus() {\n      addClass(this.referenceElm, 'focusing');\n\n      if (this.trigger === 'click' || this.trigger === 'focus') {\n        this.showPopper = true;\n      }\n    },\n    handleClick: function handleClick() {\n      removeClass(this.referenceElm, 'focusing');\n    },\n    handleBlur: function handleBlur() {\n      removeClass(this.referenceElm, 'focusing');\n      if (this.trigger === 'click' || this.trigger === 'focus') this.showPopper = false;\n    },\n    handleMouseEnter: function handleMouseEnter() {\n      var _this2 = this;\n\n      clearTimeout(this._timer);\n\n      if (this.openDelay) {\n        this._timer = setTimeout(function () {\n          _this2.showPopper = true;\n        }, this.openDelay);\n      } else {\n        this.showPopper = true;\n      }\n    },\n    handleKeydown: function handleKeydown(ev) {\n      if (ev.keyCode === 27 && this.trigger !== 'manual') {\n        this.doClose();\n      }\n    },\n    handleMouseLeave: function handleMouseLeave() {\n      var _this3 = this;\n\n      clearTimeout(this._timer);\n      this._timer = setTimeout(function () {\n        _this3.showPopper = false;\n      }, 200);\n    },\n    handleDocumentClick: function handleDocumentClick(e) {\n      var reference = this.reference || this.$refs.reference;\n      var popper = this.popper || this.$refs.popper;\n\n      if (!reference && this.$slots.reference && this.$slots.reference[0]) {\n        reference = this.referenceElm = this.$slots.reference[0].elm;\n      }\n\n      if (!this.$el || !reference || this.$el.contains(e.target) || reference.contains(e.target) || !popper || popper.contains(e.target)) {\n        return;\n      }\n\n      this.showPopper = false;\n    },\n    handleAfterEnter: function handleAfterEnter() {\n      this.$emit('after-enter');\n    },\n    handleAfterLeave: function handleAfterLeave() {\n      this.$emit('after-leave');\n      this.doDestroy();\n    },\n    cleanup: function cleanup() {\n      if (this.openDelay) {\n        clearTimeout(this._timer);\n      }\n    }\n  },\n  watch: {\n    showPopper: function showPopper(val) {\n      if (this.disabled) {\n        return;\n      }\n\n      val ? this.$emit('show') : this.$emit('hide');\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.cleanup();\n  },\n  deactivated: function deactivated() {\n    this.cleanup();\n  },\n  destroyed: function destroyed() {\n    var reference = this.reference;\n    domOff(reference, 'click', this.doToggle);\n    domOff(reference, 'mouseup', this.doClose);\n    domOff(reference, 'mousedown', this.doShow);\n    domOff(reference, 'focusin', this.doShow);\n    domOff(reference, 'focusout', this.doClose);\n    domOff(reference, 'mousedown', this.doShow);\n    domOff(reference, 'mouseup', this.doClose);\n    domOff(reference, 'mouseleave', this.handleMouseLeave);\n    domOff(reference, 'mouseenter', this.handleMouseEnter);\n    domOff(document, 'click', this.handleDocumentClick);\n  }\n};",null]}