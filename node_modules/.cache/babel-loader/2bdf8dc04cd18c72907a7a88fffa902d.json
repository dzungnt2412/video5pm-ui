{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/OptionMappingForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/OptionMappingForm.vue","mtime":1603898990380},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapState } from 'vuex';\nimport { cloneDeep, isObjectDiff } from '@core/utils';\nimport { types } from '../constant';\nexport default {\n  name: 'OptionMappingForm',\n  data: function data() {\n    return {\n      mode: 'new',\n      form: {\n        product_type_id: null,\n\n        /**\n         * [{\n            option_set: {\n              condition: '',\n              target_value: null,\n            },\n            option: {\n              conditions: '',\n              values: [],\n              target_values: [],\n            },\n          }],\n         */\n        rules: []\n      },\n      initialForm: {},\n      isShowUnsavedBar: false,\n      isFetching: false,\n      isSaving: false,\n      isDeleting: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState('orderMapping', {\n    optionMappingState: function optionMappingState(state) {\n      return state.orderMapping;\n    },\n    products: function products(state) {\n      return state.productTypes;\n    },\n    options: function options(state) {\n      return state.options;\n    },\n    optionSets: function optionSets(state) {\n      return state.optionSets;\n    }\n  })), {}, {\n    pageTitle: function pageTitle() {\n      return this.mode === 'new' ? 'Create option mapping rule' : 'Update option mapping rule';\n    },\n    getOptionsWithOptionSetId: function getOptionsWithOptionSetId() {\n      var _this = this;\n\n      return function (id) {\n        return _this.options.filter(function (option) {\n          return option.option_set_id === id;\n        });\n      };\n    },\n    getOptionValueByIndex: function getOptionValueByIndex() {\n      var _this2 = this;\n\n      return function (ruleIndex, index) {\n        var rule = _this2.form.rules[ruleIndex];\n\n        if (!rule) {\n          return null;\n        }\n\n        var value = rule.option.values[index];\n\n        if (!value) {\n          return null;\n        }\n\n        return value;\n      };\n    },\n    getOptionTargetValueByIndex: function getOptionTargetValueByIndex() {\n      var _this3 = this;\n\n      return function (ruleIndex, index) {\n        var rule = _this3.form.rules[ruleIndex];\n\n        if (!rule) {\n          return null;\n        }\n\n        var targetValue = rule.option.target_values[index];\n\n        if (!targetValue) {\n          return null;\n        }\n\n        return targetValue;\n      };\n    }\n  }),\n  watch: {\n    form: {\n      handler: function handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.initialForm);\n      },\n      deep: true\n    },\n    initialForm: {\n      handler: function handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.form);\n      },\n      deep: true\n    }\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions('orderMapping', {\n    createOrUpdateOrderMapping: 'createOrUpdateOrderMapping',\n    fetchOrderMapping: 'fetchOrderMapping',\n    deleteOrderMapping: 'deleteOrderMapping',\n    fetchProductTypes: 'fetchProductTypes',\n    fetchOptionsByProductId: 'fetchOptionsByProductId'\n  })), {}, {\n    addNewOption: function addNewOption() {\n      var rules = this.form.rules;\n      rules.push({\n        option_set: {\n          condition: '',\n          target_value: null\n        },\n        option: {\n          conditions: '',\n          values: [],\n          target_values: []\n        }\n      });\n    },\n    deleteOption: function deleteOption(index) {\n      this.form.rules.splice(index, 1);\n    },\n    onOptionSetTargetValueChange: function onOptionSetTargetValueChange(rule, val) {\n      rule.option_set.target_value = val;\n      var options = this.getOptionsWithOptionSetId(val);\n      rule.option.target_values = options.map(function (option) {\n        return option.id;\n      });\n    },\n    onRuleOptionConditionsChange: function onRuleOptionConditionsChange(rule, val) {\n      rule.option.conditions = val;\n      var newConditionsArr = val.split(',').filter(function (condition) {\n        return condition.trim() !== '';\n      });\n      rule.option.values.forEach(function (value, index) {\n        if (newConditionsArr[index]) {\n          rule.option.values[index] = newConditionsArr[index];\n        }\n      });\n\n      if (newConditionsArr.length > rule.option.values.length) {\n        newConditionsArr.slice(rule.option.values.length).forEach(function (condition) {\n          rule.option.values.push(condition);\n        });\n      } else if (newConditionsArr.length < rule.option.values.length) {\n        rule.option.values = rule.option.values.slice(0, newConditionsArr.length);\n      }\n    },\n    setOptionValueByIndex: function setOptionValueByIndex(ruleIndex, index, value) {\n      var rule = this.form.rules[ruleIndex];\n      this.$set(rule.option.values, index, value);\n    },\n    setOptionTargetValueByIndex: function setOptionTargetValueByIndex(ruleIndex, index, value) {\n      var rule = this.form.rules[ruleIndex];\n      this.$set(rule.option.target_values, index, value);\n    },\n    onProductTypeChange: function () {\n      var _onProductTypeChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.fetchOptionsByProductId(id);\n\n              case 2:\n                result = _context.sent;\n\n                if (!result.success) {\n                  this.$toast.open({\n                    type: 'error',\n                    message: result.message || 'Something went wrong. Please try again later'\n                  });\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function onProductTypeChange(_x) {\n        return _onProductTypeChange.apply(this, arguments);\n      }\n\n      return onProductTypeChange;\n    }(),\n    fetch: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var promises, _yield$Promise$all, _yield$Promise$all2, res2;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.isFetching = true;\n                promises = [this.fetchProductTypes()];\n\n                if (this.$route.params.id && this.$route.params.id !== 'new') {\n                  this.mode = 'edit';\n                  promises.push(this.fetchOrderMapping({\n                    type: types.option,\n                    id: +this.$route.params.id\n                  }));\n                }\n\n                _context2.next = 5;\n                return Promise.all(promises);\n\n              case 5:\n                _yield$Promise$all = _context2.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                res2 = _yield$Promise$all2[1];\n\n                if (!(res2 && res2.success)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.next = 11;\n                return this.transformStateToLocalForm(this.optionMappingState);\n\n              case 11:\n                this.initialForm = cloneDeep(this.form);\n                this.isFetching = false;\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetch() {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }(),\n    transformStateToLocalForm: function () {\n      var _transformStateToLocalForm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {\n        var _this4 = this;\n\n        var result, optionSetRules;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.form.product_type_id = data.product_type_id;\n                _context3.next = 3;\n                return this.fetchOptionsByProductId(data.product_type_id);\n\n              case 3:\n                result = _context3.sent;\n\n                if (result.success) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                this.$toast.open({\n                  type: 'error',\n                  message: result.message || 'Something went wrong. Please try again later'\n                });\n                return _context3.abrupt(\"return\");\n\n              case 7:\n                // find all option_set rules\n                optionSetRules = data.rules.filter(function (rule) {\n                  return rule.column === 'option_set';\n                });\n                this.form.rules = optionSetRules.map(function (optionSetRule) {\n                  var formRule = {\n                    option_set: {\n                      condition: optionSetRule.condition,\n                      target_value: optionSetRule.target_value ? parseInt(optionSetRule.target_value) : null\n                    },\n                    option: {\n                      conditions: '',\n                      values: [],\n                      target_values: []\n                    }\n                  };\n\n                  if (optionSetRule.target_value) {\n                    //now find all option rules attach to this option set rules\n                    var optionIds = _this4.getOptionsWithOptionSetId(parseInt(optionSetRule.target_value)).map(function (option) {\n                      return option.id;\n                    });\n\n                    var optionRules = data.rules.filter(function (rule) {\n                      return rule.column === 'option' && rule.target_value && optionIds.indexOf(parseInt(rule.target_value)) > -1;\n                    });\n                    formRule.option.values = optionRules.map(function (optionRule) {\n                      return optionRule.condition;\n                    });\n                    formRule.option.target_values = optionRules.map(function (optionRule) {\n                      return optionRule.target_value ? parseInt(optionRule.target_value) : null;\n                    });\n                    formRule.option.conditions = formRule.option.values.join(',');\n                  }\n\n                  return formRule;\n                });\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function transformStateToLocalForm(_x2) {\n        return _transformStateToLocalForm.apply(this, arguments);\n      }\n\n      return transformStateToLocalForm;\n    }(),\n    tranformLocalFormToPayload: function tranformLocalFormToPayload() {\n      var payload = {\n        product_type_id: this.form.product_type_id,\n        rules: [],\n        type: types.option,\n        disjunctive: false\n      };\n\n      if (this.mode !== 'new') {\n        payload.id = this.optionMappingState.id;\n      }\n\n      this.form.rules.map(function (rule) {\n        // option set\n        payload.rules.push({\n          column: 'option_set',\n          relation: 'equal',\n          condition: rule.option_set.condition,\n          target_value: String(rule.option_set.target_value)\n        }); // option\n\n        rule.option.values.map(function (value, index) {\n          payload.rules.push({\n            column: 'option',\n            relation: 'equal',\n            condition: value,\n            target_value: String(rule.option.target_values[index])\n          });\n        });\n      });\n      return payload;\n    },\n    discard: function discard() {\n      this.form = cloneDeep(this.initialForm);\n    },\n    showConfirmDelete: function showConfirmDelete() {\n      var _this5 = this;\n\n      this.$dialog.confirm({\n        title: \"Delete option mapping?\",\n        message: \"Are you sure you want to delete this option mapping?\",\n        confirmText: 'Delete',\n        onConfirm: function onConfirm() {\n          return _this5.delete();\n        },\n        type: 'danger'\n      });\n    },\n    save: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var isValid;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.$validator.validateAll();\n\n              case 2:\n                isValid = _context4.sent;\n\n                if (isValid) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 5:\n                this.isSaving = true;\n\n                if (!(this.mode === 'new')) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                _context4.next = 9;\n                return this.create();\n\n              case 9:\n                _context4.next = 13;\n                break;\n\n              case 11:\n                _context4.next = 13;\n                return this.update();\n\n              case 13:\n                this.isSaving = false;\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }(),\n    create: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var payload, response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                payload = this.tranformLocalFormToPayload();\n                _context5.next = 3;\n                return this.createOrUpdateOrderMapping({\n                  type: types.option,\n                  payload: payload\n                });\n\n              case 3:\n                response = _context5.sent;\n\n                if (response.success) {\n                  this.$toast.open({\n                    type: 'success',\n                    message: 'Your option mapping was created'\n                  });\n                  this.$router.push({\n                    name: 'option-mapping-update',\n                    params: {\n                      id: response.id\n                    }\n                  });\n                } else {\n                  this.$toast.open({\n                    type: 'error',\n                    message: response.message || 'Something went wrong. Please try again later'\n                  });\n                }\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function create() {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }(),\n    update: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var payload, response;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                payload = this.tranformLocalFormToPayload();\n                _context6.next = 3;\n                return this.createOrUpdateOrderMapping({\n                  type: types.option,\n                  payload: payload\n                });\n\n              case 3:\n                response = _context6.sent;\n\n                if (!response.success) {\n                  _context6.next = 10;\n                  break;\n                }\n\n                this.$toast.open({\n                  type: 'success',\n                  message: 'Your option mapping was updated'\n                });\n                _context6.next = 8;\n                return this.fetch();\n\n              case 8:\n                _context6.next = 11;\n                break;\n\n              case 10:\n                this.$toast.open({\n                  type: 'error',\n                  message: response.message || 'Something went wrong. Please try again later'\n                });\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function update() {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }(),\n    delete: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.isDeleting = true;\n                _context7.next = 3;\n                return this.deleteOrderMapping({\n                  type: types.option,\n                  id: this.optionMappingState.id\n                });\n\n              case 3:\n                response = _context7.sent;\n\n                if (response.success) {\n                  this.$toast.open({\n                    type: 'success',\n                    message: 'Your option mapping was deleted'\n                  });\n                  this.$router.push({\n                    name: 'option-mapping-list'\n                  });\n                } else {\n                  this.$toast.open({\n                    type: 'error',\n                    message: response.message || 'Something went wrong. Please try again later'\n                  });\n                }\n\n                this.isDeleting = false;\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }),\n  created: function created() {\n    this.fetch();\n  }\n};",{"version":3,"sources":["OptionMappingForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <PageDetailLoading v-if=\"isFetching\"></PageDetailLoading>\n  <div class=\"page\" v-else>\n    <UnsavedBar\n      :show=\"isShowUnsavedBar\"\n      :showDiscard=\"true\"\n      :loading=\"isSaving\"\n      @save=\"save\"\n      @discard=\"discard\"\n      title=\"Save\"\n    ></UnsavedBar>\n    <div class=\"page-header\">\n      <p-button icon=\"chevron-left\" class=\"btn-pure pl-0 mb-15\">\n        <router-link :to=\"{ name: 'option-mapping-list' }\">\n          Option mapping rules\n        </router-link>\n      </p-button>\n      <h1 class=\"page-title\">{{ pageTitle }}</h1>\n    </div>\n    <div class=\"page-content container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"card\">\n            <div class=\"card-block\">\n              <div class=\"row\">\n                <div class=\"col-12\">\n                  <div class=\"d-flex\">\n                    <h5 class=\"white-space-nowrap mr-15\">Lionnix Product</h5>\n                    <div class=\"form-group mb-0\">\n                      <p-select\n                        :class=\"[\n                          { 'is-invalid': errors.has('product_type_id') },\n                        ]\"\n                        v-model=\"form.product_type_id\"\n                        @input=\"onProductTypeChange\"\n                        placeholder=\"Select product\"\n                        v-validate=\"'required'\"\n                        name=\"product_type_id\"\n                      >\n                        <option\n                          v-for=\"product in products\"\n                          :value=\"product.id\"\n                          :key=\"product.id\"\n                        >\n                          {{ product.name }}\n                        </option>\n                      </p-select>\n                      <div\n                        class=\"invalid-feedback\"\n                        v-if=\"errors.has('product_type_id')\"\n                      >\n                        Product type is required\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-6\">\n                  <h4>Lionnix</h4>\n                </div>\n                <div class=\"col-6\">\n                  <h4>Shop</h4>\n                </div>\n              </div>\n              <div\n                class=\"row mb-15\"\n                v-for=\"(rule, ruleIndex) in form.rules\"\n                :key=\"ruleIndex\"\n              >\n                <!-- map option -->\n                <div class=\"col-6\">\n                  <div class=\"form-group flex-fill\">\n                    <label>Option</label>\n                    <p-select\n                      :class=\"[\n                        {\n                          'is-invalid': errors.has(\n                            `option_set_target-${ruleIndex}`\n                          ),\n                        },\n                      ]\"\n                      :value=\"rule.option_set.target_value\"\n                      @input=\"\n                        (value) => onOptionSetTargetValueChange(rule, value)\n                      \"\n                      placeholder=\"Select option set\"\n                      v-validate=\"'required'\"\n                      :name=\"`option_set_target-${ruleIndex}`\"\n                    >\n                      <option\n                        v-for=\"(optionSet, index) in optionSets\"\n                        :value=\"optionSet.id\"\n                        :key=\"index\"\n                      >\n                        {{ optionSet.name }}\n                      </option>\n                    </p-select>\n                    <div\n                      class=\"invalid-feedback\"\n                      v-if=\"errors.has(`option_set_target-${ruleIndex}`)\"\n                    >\n                      Please choose Lionnix option\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-6\">\n                  <div class=\"d-flex ml--10 mt--10\">\n                    <div class=\"form-group flex-fill pl-10 pt-10\">\n                      <label>Option values</label>\n                      <input\n                        placeholder=\"Option values, separated by commas\"\n                        :class=\"[\n                          {\n                            'is-invalid': errors.has(\n                              `option_conditions-${ruleIndex}`\n                            ),\n                          },\n                        ]\"\n                        type=\"text\"\n                        @input=\"\n                          (event) =>\n                            onRuleOptionConditionsChange(\n                              rule,\n                              event.target.value\n                            )\n                        \"\n                        :value=\"rule.option.conditions\"\n                        class=\"flex-fill form-control\"\n                        v-validate=\"'required'\"\n                        :name=\"`option_conditions-${ruleIndex}`\"\n                      />\n                      <div\n                        class=\"invalid-feedback\"\n                        v-if=\"errors.has(`option_conditions-${ruleIndex}`)\"\n                      >\n                        Please enter option values, separated by commas\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <!-- end map option -->\n\n                <!-- map option values -->\n                <div class=\"col-6\">\n                  <div\n                    class=\"form-group mb-2\"\n                    v-if=\"\n                      getOptionsWithOptionSetId(rule.option_set.target_value)\n                        .length > 0\n                    \"\n                  >\n                    <label>\n                      Values\n                    </label>\n                    <div\n                      class=\"mb-10\"\n                      v-for=\"(option, index) in getOptionsWithOptionSetId(\n                        rule.option_set.target_value\n                      )\"\n                      :key=\"index\"\n                    >\n                      <p-select\n                        :class=\"[\n                          {\n                            'is-invalid': errors.has(\n                              `option_target-${ruleIndex}-${index}`\n                            ),\n                          },\n                        ]\"\n                        @input=\"\n                          (val) =>\n                            setOptionTargetValueByIndex(ruleIndex, index, val)\n                        \"\n                        :value=\"getOptionTargetValueByIndex(ruleIndex, index)\"\n                        placeholder=\"Select option value\"\n                        v-validate=\"'required'\"\n                        :name=\"`option_target-${ruleIndex}-${index}`\"\n                      >\n                        <option\n                          v-for=\"(option, index) in getOptionsWithOptionSetId(\n                            rule.option_set.target_value\n                          )\"\n                          :key=\"index\"\n                          :value=\"option.id\"\n                        >\n                          {{ option.value }}\n                        </option>\n                      </p-select>\n                      <div\n                        class=\"invalid-feedback\"\n                        v-if=\"errors.has(`option_target-${ruleIndex}-${index}`)\"\n                      >\n                        Please choose a option value\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-6\">\n                  <div\n                    class=\"form-group mb-0\"\n                    v-if=\"rule.option.values.length > 0\"\n                  >\n                    <label>\n                      Values\n                    </label>\n                    <div\n                      class=\"mb-10\"\n                      v-for=\"(value, index) in rule.option.values\"\n                      :key=\"index\"\n                    >\n                      <p-select\n                        :class=\"[\n                          {\n                            'is-invalid': errors.has(\n                              `option_value-${ruleIndex}-${index}`\n                            ),\n                          },\n                        ]\"\n                        @input=\"\n                          (val) => setOptionValueByIndex(ruleIndex, index, val)\n                        \"\n                        :value=\"getOptionValueByIndex(ruleIndex, index)\"\n                        placeholder=\"Select option value\"\n                        v-validate=\"'required'\"\n                        :name=\"`option_value-${ruleIndex}-${index}`\"\n                      >\n                        <option\n                          v-for=\"(v, index) in rule.option.values\"\n                          :key=\"index\"\n                          :value=\"v\"\n                        >\n                          {{ v }}\n                        </option>\n                      </p-select>\n                      <div\n                        class=\"invalid-feedback\"\n                        v-if=\"errors.has(`option_value-${ruleIndex}-${index}`)\"\n                      >\n                        Please choose a option value\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <!-- end map option values -->\n                <div class=\"col-12\">\n                  <div class=\"d-flex justify-content-end\">\n                    <a\n                      href=\"#\"\n                      class=\"btn-delete-option\"\n                      @click=\"deleteOption(ruleIndex)\"\n                    >\n                      Delete option\n                    </a>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-12\" @click=\"addNewOption\">\n                  <p-button type=\"default\">Add new option</p-button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"d-flex justify-content-between\">\n            <p-button\n              type=\"danger\"\n              @click=\"showConfirmDelete\"\n              @disabled=\"isDeleting\"\n              :loading=\"isDeleting\"\n              v-if=\"optionMappingState.id\"\n            >\n              Delete\n            </p-button>\n            <div v-else></div>\n            <div class=\"d-flex\">\n              <p-button type=\"default\" @click=\"discard\">\n                Cancel\n              </p-button>\n              <p-button\n                class=\"ml-15\"\n                @click=\"save\"\n                :disabled=\"isSaving\"\n                :loading=\"isSaving\"\n              >\n                Save\n              </p-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapState } from 'vuex'\nimport { cloneDeep, isObjectDiff } from '@core/utils'\nimport { types } from '../constant'\nexport default {\n  name: 'OptionMappingForm',\n  data() {\n    return {\n      mode: 'new',\n      form: {\n        product_type_id: null,\n        /**\n         * [{\n            option_set: {\n              condition: '',\n              target_value: null,\n            },\n            option: {\n              conditions: '',\n              values: [],\n              target_values: [],\n            },\n          }],\n         */\n        rules: [],\n      },\n      initialForm: {},\n      isShowUnsavedBar: false,\n      isFetching: false,\n      isSaving: false,\n      isDeleting: false,\n    }\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      optionMappingState: (state) => state.orderMapping,\n      products: (state) => state.productTypes,\n      options: (state) => state.options,\n      optionSets: (state) => state.optionSets,\n    }),\n    pageTitle() {\n      return this.mode === 'new'\n        ? 'Create option mapping rule'\n        : 'Update option mapping rule'\n    },\n    getOptionsWithOptionSetId() {\n      return (id) => {\n        return this.options.filter((option) => option.option_set_id === id)\n      }\n    },\n    getOptionValueByIndex() {\n      return (ruleIndex, index) => {\n        const rule = this.form.rules[ruleIndex]\n        if (!rule) {\n          return null\n        }\n        const value = rule.option.values[index]\n        if (!value) {\n          return null\n        }\n        return value\n      }\n    },\n    getOptionTargetValueByIndex() {\n      return (ruleIndex, index) => {\n        const rule = this.form.rules[ruleIndex]\n        if (!rule) {\n          return null\n        }\n        const targetValue = rule.option.target_values[index]\n        if (!targetValue) {\n          return null\n        }\n        return targetValue\n      }\n    },\n  },\n  watch: {\n    form: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.initialForm)\n      },\n      deep: true,\n    },\n    initialForm: {\n      handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.form)\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      createOrUpdateOrderMapping: 'createOrUpdateOrderMapping',\n      fetchOrderMapping: 'fetchOrderMapping',\n      deleteOrderMapping: 'deleteOrderMapping',\n      fetchProductTypes: 'fetchProductTypes',\n      fetchOptionsByProductId: 'fetchOptionsByProductId',\n    }),\n    addNewOption() {\n      const rules = this.form.rules\n      rules.push({\n        option_set: {\n          condition: '',\n          target_value: null,\n        },\n        option: {\n          conditions: '',\n          values: [],\n          target_values: [],\n        },\n      })\n    },\n    deleteOption(index) {\n      this.form.rules.splice(index, 1)\n    },\n    onOptionSetTargetValueChange(rule, val) {\n      rule.option_set.target_value = val\n      const options = this.getOptionsWithOptionSetId(val)\n      rule.option.target_values = options.map((option) => option.id)\n    },\n    onRuleOptionConditionsChange(rule, val) {\n      rule.option.conditions = val\n\n      const newConditionsArr = val\n        .split(',')\n        .filter((condition) => condition.trim() !== '')\n\n      rule.option.values.forEach((value, index) => {\n        if (newConditionsArr[index]) {\n          rule.option.values[index] = newConditionsArr[index]\n        }\n      })\n      if (newConditionsArr.length > rule.option.values.length) {\n        newConditionsArr\n          .slice(rule.option.values.length)\n          .forEach((condition) => {\n            rule.option.values.push(condition)\n          })\n      } else if (newConditionsArr.length < rule.option.values.length) {\n        rule.option.values = rule.option.values.slice(\n          0,\n          newConditionsArr.length\n        )\n      }\n    },\n    setOptionValueByIndex(ruleIndex, index, value) {\n      const rule = this.form.rules[ruleIndex]\n      this.$set(rule.option.values, index, value)\n    },\n    setOptionTargetValueByIndex(ruleIndex, index, value) {\n      const rule = this.form.rules[ruleIndex]\n      this.$set(rule.option.target_values, index, value)\n    },\n    async onProductTypeChange(id) {\n      const result = await this.fetchOptionsByProductId(id)\n      if (!result.success) {\n        this.$toast.open({\n          type: 'error',\n          message:\n            result.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async fetch() {\n      this.isFetching = true\n      const promises = [this.fetchProductTypes()]\n      if (this.$route.params.id && this.$route.params.id !== 'new') {\n        this.mode = 'edit'\n        promises.push(\n          this.fetchOrderMapping({\n            type: types.option,\n            id: +this.$route.params.id,\n          })\n        )\n      }\n      const [, res2] = await Promise.all(promises)\n      if (res2 && res2.success) {\n        await this.transformStateToLocalForm(this.optionMappingState)\n      }\n      this.initialForm = cloneDeep(this.form)\n      this.isFetching = false\n    },\n    async transformStateToLocalForm(data) {\n      this.form.product_type_id = data.product_type_id\n      const result = await this.fetchOptionsByProductId(data.product_type_id)\n      if (!result.success) {\n        this.$toast.open({\n          type: 'error',\n          message:\n            result.message || 'Something went wrong. Please try again later',\n        })\n        return\n      }\n\n      // find all option_set rules\n      const optionSetRules = data.rules.filter(\n        (rule) => rule.column === 'option_set'\n      )\n      this.form.rules = optionSetRules.map((optionSetRule) => {\n        const formRule = {\n          option_set: {\n            condition: optionSetRule.condition,\n            target_value: optionSetRule.target_value\n              ? parseInt(optionSetRule.target_value)\n              : null,\n          },\n          option: {\n            conditions: '',\n            values: [],\n            target_values: [],\n          },\n        }\n\n        if (optionSetRule.target_value) {\n          //now find all option rules attach to this option set rules\n          const optionIds = this.getOptionsWithOptionSetId(\n            parseInt(optionSetRule.target_value)\n          ).map((option) => option.id)\n\n          const optionRules = data.rules.filter(\n            (rule) =>\n              rule.column === 'option' &&\n              rule.target_value &&\n              optionIds.indexOf(parseInt(rule.target_value)) > -1\n          )\n\n          formRule.option.values = optionRules.map(\n            (optionRule) => optionRule.condition\n          )\n          formRule.option.target_values = optionRules.map((optionRule) =>\n            optionRule.target_value ? parseInt(optionRule.target_value) : null\n          )\n          formRule.option.conditions = formRule.option.values.join(',')\n        }\n\n        return formRule\n      })\n    },\n    tranformLocalFormToPayload() {\n      const payload = {\n        product_type_id: this.form.product_type_id,\n        rules: [],\n        type: types.option,\n        disjunctive: false,\n      }\n      if (this.mode !== 'new') {\n        payload.id = this.optionMappingState.id\n      }\n      this.form.rules.map((rule) => {\n        // option set\n        payload.rules.push({\n          column: 'option_set',\n          relation: 'equal',\n          condition: rule.option_set.condition,\n          target_value: String(rule.option_set.target_value),\n        })\n        // option\n        rule.option.values.map((value, index) => {\n          payload.rules.push({\n            column: 'option',\n            relation: 'equal',\n            condition: value,\n            target_value: String(rule.option.target_values[index]),\n          })\n        })\n      })\n\n      return payload\n    },\n    discard() {\n      this.form = cloneDeep(this.initialForm)\n    },\n    showConfirmDelete() {\n      this.$dialog.confirm({\n        title: `Delete option mapping?`,\n        message: `Are you sure you want to delete this option mapping?`,\n        confirmText: 'Delete',\n        onConfirm: () => this.delete(),\n        type: 'danger',\n      })\n    },\n    async save() {\n      const isValid = await this.$validator.validateAll()\n      if (!isValid) return\n      this.isSaving = true\n      if (this.mode === 'new') {\n        await this.create()\n      } else {\n        await this.update()\n      }\n      this.isSaving = false\n    },\n    async create() {\n      const payload = this.tranformLocalFormToPayload()\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.option,\n        payload,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your option mapping was created',\n        })\n        this.$router.push({\n          name: 'option-mapping-update',\n          params: {\n            id: response.id,\n          },\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async update() {\n      const payload = this.tranformLocalFormToPayload()\n      const response = await this.createOrUpdateOrderMapping({\n        type: types.option,\n        payload,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your option mapping was updated',\n        })\n        await this.fetch()\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n    },\n    async delete() {\n      this.isDeleting = true\n      const response = await this.deleteOrderMapping({\n        type: types.option,\n        id: this.optionMappingState.id,\n      })\n      if (response.success) {\n        this.$toast.open({\n          type: 'success',\n          message: 'Your option mapping was deleted',\n        })\n        this.$router.push({\n          name: 'option-mapping-list',\n        })\n      } else {\n        this.$toast.open({\n          type: 'error',\n          message:\n            response.message || 'Something went wrong. Please try again later',\n        })\n      }\n      this.isDeleting = false\n    },\n  },\n  created() {\n    this.fetch()\n  },\n}\n</script>\n"],"sourceRoot":"src/packages/order-mapping/views"}]}