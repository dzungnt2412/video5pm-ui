{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/OrderView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/views/OrderView.vue","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapActions } from 'vuex';\nimport { cloneDeep } from '@core/utils';\nimport { FETCH_ORDER, UPDATE_ORDER } from '@/packages/container/store/types';\nimport mixinFulfillment from '../mixins/fulfillment';\nimport mixinUpdateOrder from '../mixins/update-order';\nimport OrderItems from './components/OrderItems';\nimport ModalUpdateOrder from './components/ModalUpdateOrder';\nimport { FETCH_PRODUCT_TYPES, FETCH_PROVIDERS, FETCH_COUNTRIES } from '@/packages/shared/store';\nimport { ORDER_STATUS_CANCELED } from '@core/constants';\nexport default {\n  name: 'OrderView',\n  mixins: [mixinUpdateOrder, mixinFulfillment],\n  components: {\n    OrderItems: OrderItems,\n    ModalUpdateOrder: ModalUpdateOrder\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapState('container', {\n    order: function order(state) {\n      return state.order;\n    }\n  })), mapState('shared', {\n    productTypes: function productTypes(state) {\n      return state.productTypes;\n    },\n    providers: function providers(state) {\n      return state.providers;\n    },\n    countries: function countries(state) {\n      return state.countries;\n    }\n  })), mapState('design', {\n    designs: function designs(state) {\n      return state.designs;\n    }\n  })), {}, {\n    shopId: function shopId() {\n      return this.order ? this.order.shop_id : 0;\n    },\n    orderId: function orderId() {\n      return parseInt(this.$route.params.id, 10);\n    }\n  }),\n  data: function data() {\n    return {\n      editing: false,\n      isFetching: false,\n      isUpdating: false,\n      orderItems: [],\n      resultFetch: {},\n      resultUpdate: {}\n    };\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  methods: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapActions('container', [FETCH_ORDER, UPDATE_ORDER, 'getLogs'])), mapActions('shared', [FETCH_PRODUCT_TYPES, FETCH_PROVIDERS, FETCH_COUNTRIES])), mapActions('design', ['fetchDesigns'])), {}, {\n    init: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var id, _yield$Promise$all, r1;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = parseInt(this.$route.params.id, 10);\n\n                if (!(id < 1)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.$router.push({\n                  name: 'order-list'\n                }));\n\n              case 3:\n                this.isFetching = true;\n                _context.next = 6;\n                return Promise.all([this.fetchOrder(id)]);\n\n              case 6:\n                _yield$Promise$all = _context.sent;\n                r1 = _yield$Promise$all.r1;\n                this.resultFetch = r1;\n                this.isFetching = false;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }(),\n    handleUpdateOrder: function () {\n      var _handleUpdateOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(order) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.isUpdating = true;\n                _context2.next = 3;\n                return this.updateOrder(Object.assign({}, order || this.order, {\n                  order_items: this.orderItems\n                }));\n\n              case 3:\n                this.resultUpdate = _context2.sent;\n\n                if (this.resultUpdate && this.resultUpdate.success) {\n                  this.$set(this, 'orderItems', cloneDeep(this.order.order_items));\n                  this.editing = false;\n                  this.isVisibleEditOrder = false;\n                  this.init();\n                  this.$toast.open({\n                    type: 'success',\n                    message: 'Cập nhập order item thành công'\n                  });\n                } else {\n                  this.$toast.open({\n                    type: 'error',\n                    message: this.resultUpdate.message\n                  });\n                }\n\n                this.isUpdating = false;\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleUpdateOrder(_x) {\n        return _handleUpdateOrder.apply(this, arguments);\n      }\n\n      return handleUpdateOrder;\n    }(),\n    handleSelectedDesign: function handleSelectedDesign(_ref) {\n      var url = _ref.url,\n          item = _ref.item,\n          design = _ref.design;\n      this.handleUpdateOrderItem(item, {\n        design: design,\n        design_id: design.id,\n        image: url\n      });\n    },\n    handleSelectedProductType: function handleSelectedProductType(_ref2) {\n      var item = _ref2.item,\n          product = _ref2.product;\n      this.handleUpdateOrderItem(item, {\n        product_type_id: product.id,\n        product_type: product\n      });\n    },\n    handleUpdateOrderItem: function handleUpdateOrderItem(item, newVal) {\n      var index = this.orderItems.findIndex(function (_ref3) {\n        var id = _ref3.id;\n        return id === item.id;\n      });\n\n      if (index !== -1) {\n        this.editing = true;\n        this.$set(this.orderItems, index, Object.assign({}, item, newVal));\n      }\n    },\n    toggleEditOrder: function toggleEditOrder() {\n      if (this.editing) {\n        this.$set(this, 'orderItems', cloneDeep(this.order.order_items));\n        this.editing = false;\n      } else {\n        this.editing = true;\n      }\n    },\n    confirmUpdateOrder: function confirmUpdateOrder(action) {\n      var _this = this;\n\n      this.$dialog.confirm({\n        message: 'Are you sure you want to do this?',\n        onConfirm: function onConfirm() {\n          return _this.onUpdateOrderActionConfirm(action);\n        }\n      });\n    },\n    onUpdateOrderActionConfirm: function () {\n      var _onUpdateOrderActionConfirm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(action) {\n        var order;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                order = Object.assign({}, this.order);\n                _context3.t0 = action;\n                _context3.next = _context3.t0 === 'canceled' ? 4 : 6;\n                break;\n\n              case 4:\n                order.status = ORDER_STATUS_CANCELED;\n                return _context3.abrupt(\"break\", 6);\n\n              case 6:\n                this.handleUpdateOrder(order);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function onUpdateOrderActionConfirm(_x2) {\n        return _onUpdateOrderActionConfirm.apply(this, arguments);\n      }\n\n      return onUpdateOrderActionConfirm;\n    }()\n  }),\n  watch: {\n    'order.order_items': function orderOrder_items(val) {\n      this.$set(this, 'orderItems', cloneDeep(val));\n    }\n  },\n  filters: {\n    displayname: function displayname(order) {\n      return order.full_name || \"\".concat(order.first_name, \" \").concat(order.last_name);\n    }\n  }\n};",null]}