{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/dropdown/Dropdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/dropdown/Dropdown.vue","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'PDropdown',\n  props: {\n    value: {\n      type: [String, Number, Boolean, Object, Array, Symbol, Function],\n      default: null\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    hoverable: {\n      type: Boolean,\n      default: false\n    },\n    inline: {\n      type: Boolean,\n      default: false\n    },\n    position: {\n      type: String,\n      validator: function validator(value) {\n        return ['top-right', 'top-left', 'bottom-left'].indexOf(value) > -1;\n      }\n    },\n    mobileModal: {\n      type: Boolean,\n      default: true\n    },\n    ariaRole: {\n      type: String,\n      default: ''\n    },\n    animation: {\n      type: String,\n      default: 'fade'\n    },\n    multiple: Boolean,\n    closeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    dropdownClass: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      selected: this.value,\n      isActive: false,\n      isHoverable: this.hoverable,\n      isDropdown: true // Used internally by DropdownItem\n\n    };\n  },\n  computed: {\n    wrapperClasses: function wrapperClasses() {\n      return ['p-dropdown', this.position ? \"is-\".concat(this.position) : '', {\n        'is-disabled': this.disabled,\n        'is-hoverable': this.hoverable,\n        'is-inline': this.inline,\n        'is-active': this.isActive || this.inline,\n        'is-mobile-modal': this.isMobileModal\n      }];\n    },\n    isMobileModal: function isMobileModal() {\n      return this.mobileModal && !this.inline && !this.hoverable;\n    },\n    ariaRoleMenu: function ariaRoleMenu() {\n      return this.ariaRole === 'menu' || this.ariaRole === 'list' ? this.ariaRole : null;\n    }\n  },\n  watch: {\n    /**\n     * When v-model is changed set the _new selected item.\n     */\n    value: function value(_value) {\n      this.selected = _value;\n    },\n\n    /**\n     * Emit event when isActive value is changed.\n     */\n    isActive: function isActive(value) {\n      this.$emit('active-change', value);\n    }\n  },\n  methods: {\n    /**\n     * Click listener from DropdownItem.\n     *   1. Set _new selected item.\n     *   2. Emit input event to update the user v-model.\n     *   3. Close the dropdown.\n     */\n    selectItem: function selectItem(value) {\n      if (this.multiple) {\n        if (this.selected) {\n          var index = this.selected.indexOf(value);\n\n          if (index === -1) {\n            this.selected.push(value);\n          } else {\n            this.selected.splice(index, 1);\n          }\n        } else {\n          this.selected = [value];\n        }\n\n        this.$emit('change', this.selected);\n      } else {\n        if (this.selected !== value) {\n          this.selected = value;\n          this.$emit('change', this.selected);\n        }\n      }\n\n      this.$emit('input', this.selected);\n\n      if (!this.multiple) {\n        this.isActive = !this.closeOnClick;\n      }\n    },\n\n    /**\n     * White-listed items to not close when clicked.\n     */\n    isInWhiteList: function isInWhiteList(el) {\n      if (el === this.$refs.dropdownMenu) {\n        return true;\n      }\n\n      if (el === this.$refs.trigger) {\n        return true;\n      } // All chidren from dropdown\n\n\n      if (this.$refs.dropdownMenu !== undefined) {\n        var children = this.$refs.dropdownMenu.querySelectorAll('*');\n\n        var _iterator = _createForOfIteratorHelper(children),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var child = _step.value;\n\n            if (el === child) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } // All children from trigger\n\n\n      if (this.$refs.trigger !== undefined) {\n        var _children = this.$refs.trigger.querySelectorAll('*');\n\n        var _iterator2 = _createForOfIteratorHelper(_children),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _child = _step2.value;\n\n            if (el === _child) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Close dropdown if clicked outside.\n     */\n    clickedOutside: function clickedOutside(event) {\n      if (this.inline) {\n        return;\n      }\n\n      if (!this.isInWhiteList(event.target)) {\n        this.isActive = false;\n      }\n    },\n\n    /**\n     * Toggle dropdown if it's not disabled.\n     */\n    toggle: function toggle() {\n      var _this = this;\n\n      if (this.disabled) {\n        return;\n      }\n\n      if (!this.isActive) {\n        // if not active, toggle after clickOutside event\n        // this fixes toggling programmatic\n        this.$nextTick(function () {\n          var value = !_this.isActive;\n          _this.isActive = value;\n\n          _this.$emit('on-open', _this.isActive); // Vue 2.6.x ???\n\n\n          setTimeout(function () {\n            return _this.isActive = value;\n          });\n        });\n      } else {\n        this.isActive = !this.isActive;\n        this.$emit('on-open', this.isActive);\n      }\n    }\n  },\n  created: function created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('click', this.clickedOutside);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('click', this.clickedOutside);\n    }\n  }\n};",null]}