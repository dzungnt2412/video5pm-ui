{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/mixins/table.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/mixins/table.js","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["import { cloneDeep } from '@core/utils';\nexport default {\n  computed: {\n    totalSelected: function totalSelected() {\n      return this.action && this.action.selected ? this.action.selected.length : 0;\n    },\n    paginationLabel: function paginationLabel() {\n      var page = this.filter.page ? this.filter.page : 0;\n      var from = (page - 1) * this.filter.limit || 1;\n      var totalPage = Math.ceil(this.count / this.filter.limit);\n\n      if (totalPage < this.filter.page || !from) {\n        return '';\n      }\n\n      var to = this.count >= this.filter.limit ? page * this.filter.limit : this.count;\n\n      if (to > this.count) {\n        to = this.count;\n      }\n\n      return to > from ? \"Hi\\u1EC3n th\\u1ECB \".concat(from, \"-\").concat(to, \" trong t\\u1ED5ng \").concat(this.count, \" k\\u1EBFt qu\\u1EA3\") : '';\n    },\n    selectedIds: function selectedIds() {\n      return this.action && this.action.selected && this.action.selected.length ? this.action.selected.map(function (_ref) {\n        var id = _ref.id;\n        return id;\n      }) : [];\n    },\n    items: function items() {\n      return [];\n    },\n    isAllChecked: function isAllChecked() {\n      return this.action.selected && this.items.length === this.action.selected.length && this.totalSelected > 0;\n    },\n    isIndeterminate: function isIndeterminate() {\n      return this.action.selected ? this.action.selected.length > 0 && this.action.selected.length < this.items.length : false;\n    },\n    selectionCountText: function selectionCountText() {\n      return \"\".concat(this.totalSelected, \" \\u0111\\u01A1n h\\xE0ng \\u0111\\xE3 \\u0111\\u01B0\\u1EE3c ch\\u1ECDn\");\n    }\n  },\n  data: function data() {\n    return {\n      filter: {\n        page: 1,\n        limit: 20,\n        search: ''\n      },\n      action: {\n        current: '',\n        selected: [],\n        visibleConfirm: false\n      },\n      actions: {}\n    };\n  },\n  methods: {\n    /**\n     * On multiple items selected\n     * @param selected\n     */\n    onMultipleSelect: function onMultipleSelect(selected) {\n      this.$set(this.action, 'selected', selected);\n    },\n    handleActionItem: function handleActionItem() {},\n\n    /**\n     * Handle action\n     * @param current\n     * @param item\n     */\n    handleAction: function handleAction(current) {\n      var _this = this;\n\n      var item = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.action.current = current;\n      this.action.item = item;\n\n      if (this.actions && this.actions[current] && this.actions[current].isNeedConfirm) {\n        this.$dialog.confirm({\n          title: 'Are you sure you want to do this?',\n          onConfirm: function onConfirm() {\n            return _this.handleActionItem();\n          }\n        });\n        return;\n      }\n\n      this.handleActionItem();\n    },\n    handleSearch: function handleSearch(e) {\n      // Default result after search in page 1\n      this.filter.page = 1;\n      this.$set(this.filter, 'search', e.target.value);\n    },\n    clearSearch: function clearSearch() {\n      this.$set(this.filter, 'search', '');\n    },\n\n    /**\n     * On action confirm\n     */\n    onActionConfirm: function onActionConfirm() {\n      this.handleActionItem();\n    },\n\n    /**\n     * Toggle select all\n     */\n    toggleSelectAll: function toggleSelectAll() {\n      var selected = [];\n\n      if (this.isAllChecked) {\n        selected = [];\n      } else {\n        selected = cloneDeep(this.items);\n      }\n\n      this.$set(this.action, 'selected', selected);\n    }\n  },\n  watch: {\n    $route: function $route() {\n      if (this.action.selected) {\n        this.$set(this.action, 'selected', []);\n      }\n    }\n  }\n};",null]}