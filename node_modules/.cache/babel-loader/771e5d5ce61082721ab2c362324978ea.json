{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/api.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/api.js","mtime":1603898990380},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1597736267502}],"contextDependencies":[],"result":["import http from '@core/services/http';\nimport { buildQueryString } from '@core/utils/url';\nexport default {\n  /**\n   * Fetch container\n   * @param payload\n   * @return {*}\n   */\n  fetchContainers: function fetchContainers(payload) {\n    return http.get(\"/orders/containers?\".concat(buildQueryString(payload)));\n  },\n\n  /**\n   * Fetch order count\n   * @param payload\n   * @return {*}\n   */\n  fetchContainerCount: function fetchContainerCount(payload) {\n    return http.get(\"/orders/containers/count?\".concat(buildQueryString(payload)));\n  },\n\n  /**\n   * Fetch container\n   * @param id\n   * @return {*}\n   */\n  fetchContainer: function fetchContainer(id) {\n    return http.get(\"/orders/containers/\".concat(id));\n  },\n\n  /**\n   * Fetch orders\n   * @param payload\n   * @return {*}\n   */\n  fetchOrders: function fetchOrders(payload) {\n    return http.get(\"/orders?\".concat(buildQueryString(payload)));\n  },\n\n  /**\n   * Fetch order count\n   * @param payload\n   * @return {*}\n   */\n  fetchOrderCount: function fetchOrderCount(payload) {\n    return http.get(\"/orders/count?\".concat(buildQueryString(payload)));\n  },\n\n  /**\n   * Fetch order\n   * @param payload\n   * @return {*}\n   */\n  fetchOrder: function fetchOrder(payload) {\n    return http.get(\"/orders/\".concat(payload));\n  },\n\n  /**\n   * Import orders\n   * @param payload\n   * @return {*}\n   */\n  importOrders: function importOrders(payload) {\n    var formData = new FormData();\n    formData.append('file', payload.file);\n\n    if (payload.shop_id) {\n      formData.append('shop_id', payload.shop_id);\n    }\n\n    return http.post('/orders/import', formData);\n  },\n\n  /**\n   * Preview import orders\n   * @param payload\n   * @return {*}\n   */\n  previewImportOrders: function previewImportOrders(payload) {\n    var formData = new FormData();\n    formData.append('file', payload.file);\n\n    if (payload.shop_id) {\n      formData.append('shop_id', payload.shop_id);\n    }\n\n    return http.post('/orders/import/preview', formData);\n  },\n\n  /**\n   * Update order\n   * @param payload\n   * @return {*}\n   */\n  updateOrder: function updateOrder(payload) {\n    return http.put(\"/orders/\".concat(payload.id), {\n      order: payload\n    });\n  },\n\n  /**\n   * Create container\n   * @param payload\n   * @return {*}\n   */\n  createContainer: function createContainer(payload) {\n    return http.post('/orders/containers', payload);\n  },\n\n  /**\n   * Append orders to container\n   * @param payload\n   * @return {*}\n   */\n  appendContainer: function appendContainer(payload) {\n    return http.put('/orders/containers/append', payload);\n  },\n\n  /**\n   * Create container\n   * @param payload\n   * @return {*}\n   */\n  updateContainer: function updateContainer(payload) {\n    return http.put(\"/orders/containers/\".concat(payload.id), {\n      container: payload\n    });\n  },\n\n  /**\n   * Export container\n   * @param id\n   * @return {*}\n   */\n  exportContainer: function exportContainer(id) {\n    return http.post('/orders/export', {\n      container_id: id\n    });\n  },\n\n  /**\n   * Export orders\n   * @param ids\n   * @return {*}\n   */\n  exportOrders: function exportOrders(ids) {\n    return http.post('/orders/export', {\n      order_ids: ids\n    });\n  },\n\n  /**\n   * Get Logs\n   * @param {String} url\n   * @return {*}\n   */\n  getLogs: function getLogs(params) {\n    return http.get(\"/logs?\".concat(buildQueryString(params)));\n  }\n};",{"version":3,"sources":["/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/api.js"],"names":["http","buildQueryString","fetchContainers","payload","get","fetchContainerCount","fetchContainer","id","fetchOrders","fetchOrderCount","fetchOrder","importOrders","formData","FormData","append","file","shop_id","post","previewImportOrders","updateOrder","put","order","createContainer","appendContainer","updateContainer","container","exportContainer","container_id","exportOrders","ids","order_ids","getLogs","params"],"mappings":"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","sourcesContent":["import http from '@core/services/http'\nimport { buildQueryString } from '@core/utils/url'\n\nexport default {\n  /**\n   * Fetch container\n   * @param payload\n   * @return {*}\n   */\n  fetchContainers(payload) {\n    return http.get(`/orders/containers?${buildQueryString(payload)}`)\n  },\n\n  /**\n   * Fetch order count\n   * @param payload\n   * @return {*}\n   */\n  fetchContainerCount(payload) {\n    return http.get(`/orders/containers/count?${buildQueryString(payload)}`)\n  },\n\n  /**\n   * Fetch container\n   * @param id\n   * @return {*}\n   */\n  fetchContainer(id) {\n    return http.get(`/orders/containers/${id}`)\n  },\n\n  /**\n   * Fetch orders\n   * @param payload\n   * @return {*}\n   */\n  fetchOrders(payload) {\n    return http.get(`/orders?${buildQueryString(payload)}`)\n  },\n\n  /**\n   * Fetch order count\n   * @param payload\n   * @return {*}\n   */\n  fetchOrderCount(payload) {\n    return http.get(`/orders/count?${buildQueryString(payload)}`)\n  },\n\n  /**\n   * Fetch order\n   * @param payload\n   * @return {*}\n   */\n  fetchOrder(payload) {\n    return http.get(`/orders/${payload}`)\n  },\n\n  /**\n   * Import orders\n   * @param payload\n   * @return {*}\n   */\n  importOrders(payload) {\n    const formData = new FormData()\n\n    formData.append('file', payload.file)\n\n    if (payload.shop_id) {\n      formData.append('shop_id', payload.shop_id)\n    }\n\n    return http.post('/orders/import', formData)\n  },\n\n  /**\n   * Preview import orders\n   * @param payload\n   * @return {*}\n   */\n  previewImportOrders(payload) {\n    const formData = new FormData()\n\n    formData.append('file', payload.file)\n\n    if (payload.shop_id) {\n      formData.append('shop_id', payload.shop_id)\n    }\n\n    return http.post('/orders/import/preview', formData)\n  },\n\n  /**\n   * Update order\n   * @param payload\n   * @return {*}\n   */\n  updateOrder(payload) {\n    return http.put(`/orders/${payload.id}`, { order: payload })\n  },\n\n  /**\n   * Create container\n   * @param payload\n   * @return {*}\n   */\n  createContainer(payload) {\n    return http.post('/orders/containers', payload)\n  },\n\n  /**\n   * Append orders to container\n   * @param payload\n   * @return {*}\n   */\n  appendContainer(payload) {\n    return http.put('/orders/containers/append', payload)\n  },\n\n  /**\n   * Create container\n   * @param payload\n   * @return {*}\n   */\n  updateContainer(payload) {\n    return http.put(`/orders/containers/${payload.id}`, { container: payload })\n  },\n\n  /**\n   * Export container\n   * @param id\n   * @return {*}\n   */\n  exportContainer(id) {\n    return http.post('/orders/export', { container_id: id })\n  },\n\n  /**\n   * Export orders\n   * @param ids\n   * @return {*}\n   */\n  exportOrders(ids) {\n    return http.post('/orders/export', { order_ids: ids })\n  },\n\n  /**\n   * Get Logs\n   * @param {String} url\n   * @return {*}\n   */\n  getLogs(params) {\n    return http.get(`/logs?${buildQueryString(params)}`)\n  },\n}\n"]}]}