{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/Upload/upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/Upload/upload.vue","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FormElementMixin from '../../mixins/FormElement';\nimport { File } from '../../utils/ssr';\nexport default {\n  name: 'PUpload',\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: {\n      type: [Object, Function, File, Array]\n    },\n    multiple: Boolean,\n    disabled: Boolean,\n    accept: String,\n    dragDrop: Boolean,\n    type: {\n      type: String,\n      default: 'is-primary'\n    },\n    native: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      newValue: this.value,\n      dragDropFocus: false,\n      // eslint-disable-next-line\n      _elementRef: 'input'\n    };\n  },\n  watch: {\n    /**\n     * When v-model is changed:\n     *   1. Set internal value.\n     *   2. Reset input value if array is empty\n     *   3. If it's invalid, validate again.\n     */\n    value: function value(_value) {\n      this.newValue = _value;\n\n      if (!this.newValue || Array.isArray(this.newValue) && this.newValue.length === 0) {\n        this.$refs.input.value = null;\n      }\n\n      !this.isValid && !this.dragDrop && this.checkHtml5Validity();\n    }\n  },\n  methods: {\n    /**\n     * Listen change event on input type 'file',\n     * emit 'input' event and validate\n     */\n    onFileChange: function onFileChange(event) {\n      if (this.disabled || this.loading) return;\n\n      if (this.dragDrop) {\n        this.updateDragDropFocus(false);\n      }\n\n      var value = event.target.files || event.dataTransfer.files;\n\n      if (value) {\n        if (value.length === 0) {\n          this.newValue = null;\n        } else if (!this.multiple) {\n          // only one element in case drag drop mode and isn't multiple\n          if (this.dragDrop && value.length !== 1) return false;else {\n            var file = value[0];\n\n            if (this.checkType(file)) {\n              this.newValue = file;\n            }\n          }\n        } else {\n          // always _new values if native or undefined local\n          if (this.native || !this.newValue) {\n            this.newValue = [];\n          }\n\n          for (var i = 0; i < value.length; i++) {\n            var _file = value[i];\n\n            if (this.checkType(_file)) {\n              this.newValue.push(_file);\n            }\n          }\n        }\n      }\n\n      this.$emit('input', this.newValue);\n      !this.dragDrop && this.checkHtml5Validity();\n    },\n\n    /**\n     * Listen drag-drop to update internal variable\n     */\n    updateDragDropFocus: function updateDragDropFocus(focus) {\n      if (!this.disabled && !this.loading) {\n        this.dragDropFocus = focus;\n      }\n    },\n\n    /**\n     * Check mime type of file\n     */\n    checkType: function checkType(file) {\n      if (!this.accept) return true;\n      var types = this.accept.split(',');\n      if (types.length === 0) return true;\n      var valid = false;\n\n      for (var i = 0; i < types.length && !valid; i++) {\n        var type = types[i].trim();\n\n        if (type) {\n          if (type.substring(0, 1) === '.') {\n            // check extension\n            var extIndex = file.name.lastIndexOf('.');\n\n            if (extIndex >= 0 && file.name.substring(extIndex) === type) {\n              valid = true;\n            }\n          } else {\n            // check mime type\n            if (file.type.match(type)) {\n              valid = true;\n            }\n          }\n        }\n      }\n\n      return valid;\n    }\n  }\n};",{"version":3,"sources":["upload.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <label class=\"p-upload\">\n    <slot />\n    <input\n      ref=\"input\"\n      type=\"file\"\n      v-bind=\"$attrs\"\n      :multiple=\"multiple\"\n      :accept=\"accept\"\n      :disabled=\"disabled\"\n      @change=\"onFileChange\"\n    />\n  </label>\n</template>\n\n<script>\nimport FormElementMixin from '../../mixins/FormElement'\nimport { File } from '../../utils/ssr'\n\nexport default {\n  name: 'PUpload',\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: {\n      type: [Object, Function, File, Array],\n    },\n    multiple: Boolean,\n    disabled: Boolean,\n    accept: String,\n    dragDrop: Boolean,\n    type: {\n      type: String,\n      default: 'is-primary',\n    },\n    native: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      newValue: this.value,\n      dragDropFocus: false,\n      // eslint-disable-next-line\n      _elementRef: 'input',\n    }\n  },\n  watch: {\n    /**\n     * When v-model is changed:\n     *   1. Set internal value.\n     *   2. Reset input value if array is empty\n     *   3. If it's invalid, validate again.\n     */\n    value(value) {\n      this.newValue = value\n      if (\n        !this.newValue ||\n        (Array.isArray(this.newValue) && this.newValue.length === 0)\n      ) {\n        this.$refs.input.value = null\n      }\n      !this.isValid && !this.dragDrop && this.checkHtml5Validity()\n    },\n  },\n  methods: {\n    /**\n     * Listen change event on input type 'file',\n     * emit 'input' event and validate\n     */\n    onFileChange(event) {\n      if (this.disabled || this.loading) return\n      if (this.dragDrop) {\n        this.updateDragDropFocus(false)\n      }\n      const value = event.target.files || event.dataTransfer.files\n      if (value) {\n        if (value.length === 0) {\n          this.newValue = null\n        } else if (!this.multiple) {\n          // only one element in case drag drop mode and isn't multiple\n          if (this.dragDrop && value.length !== 1) return false\n          else {\n            const file = value[0]\n            if (this.checkType(file)) {\n              this.newValue = file\n            }\n          }\n        } else {\n          // always _new values if native or undefined local\n          if (this.native || !this.newValue) {\n            this.newValue = []\n          }\n          for (let i = 0; i < value.length; i++) {\n            const file = value[i]\n            if (this.checkType(file)) {\n              this.newValue.push(file)\n            }\n          }\n        }\n      }\n      this.$emit('input', this.newValue)\n      !this.dragDrop && this.checkHtml5Validity()\n    },\n\n    /**\n     * Listen drag-drop to update internal variable\n     */\n    updateDragDropFocus(focus) {\n      if (!this.disabled && !this.loading) {\n        this.dragDropFocus = focus\n      }\n    },\n\n    /**\n     * Check mime type of file\n     */\n    checkType(file) {\n      if (!this.accept) return true\n      const types = this.accept.split(',')\n      if (types.length === 0) return true\n      let valid = false\n      for (let i = 0; i < types.length && !valid; i++) {\n        const type = types[i].trim()\n        if (type) {\n          if (type.substring(0, 1) === '.') {\n            // check extension\n            const extIndex = file.name.lastIndexOf('.')\n            if (extIndex >= 0 && file.name.substring(extIndex) === type) {\n              valid = true\n            }\n          } else {\n            // check mime type\n            if (file.type.match(type)) {\n              valid = true\n            }\n          }\n        }\n      }\n      return valid\n    },\n  },\n}\n</script>\n"],"sourceRoot":"uikit/components/Upload"}]}