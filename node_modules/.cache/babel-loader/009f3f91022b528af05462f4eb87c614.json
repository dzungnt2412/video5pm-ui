{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/core/utils/string.js","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/core/utils/string.js","mtime":1603898990376},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1597736267502}],"contextDependencies":[],"result":["/**\n * Convert string to slug\n * @param str\n * @returns {string}\n */\nexport var slugify = function slugify(str) {\n  return str.toString().toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n};\n/**\n * Capitalize\n * @param val\n * @returns {*}\n */\n\nexport var capitalize = function capitalize(val) {\n  if (!val) {\n    return '';\n  }\n\n  val = val.toString();\n  return val.charAt(0).toUpperCase() + val.slice(1);\n};\n/**\n * Convert slug to title\n * @param slug\n */\n\nexport var convertSlugToTitle = function convertSlugToTitle(slug) {\n  return capitalize(slug.replace(/_/gi, ' '));\n};\n/**\n * Float to string\n * @param numeric\n * @param decimals\n * @return {string}\n */\n\nexport var floatToString = function floatToString(numeric, decimals) {\n  var amount = numeric.toFixed(decimals).toString();\n\n  if (amount.match(/^\\.\\d+/)) {\n    return \"0\".concat(amount);\n  }\n\n  return amount;\n};\n/**\n * Export convert string to toUnderscore\n * @param str\n */\n\nexport var toUnderscore = function toUnderscore(str) {\n  return str.replace(/([A-Z])/g, function ($1) {\n    return \"_\".concat($1.toLowerCase());\n  });\n};\n/**\n * Pluralize word\n * @param word\n * @param count\n * @param suffix\n * @return {string}\n */\n\nexport var pluralize = function pluralize(word) {\n  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 's';\n  return count <= 1 ? word : \"\".concat(word).concat(suffix);\n};\n/**\n * Truncate text if text length longer than a value\n * @param str\n * @param limit\n */\n\nexport var truncate = function truncate(str, limit) {\n  if (str.length > limit) return str.substring(0, limit) + '...';else return str;\n};",{"version":3,"sources":["/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/core/utils/string.js"],"names":["slugify","str","toString","toLowerCase","replace","capitalize","val","charAt","toUpperCase","slice","convertSlugToTitle","slug","floatToString","numeric","decimals","amount","toFixed","match","toUnderscore","$1","pluralize","word","count","suffix","truncate","limit","length","substring"],"mappings":"AAAA;;;;;AAKA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAS;AAC9B,SAAOA,GAAG,CACPC,QADI,GAEJC,WAFI,GAGJC,OAHI,CAGI,MAHJ,EAGY,GAHZ,EAIJA,OAJI,CAII,UAJJ,EAIgB,EAJhB,EAKJA,OALI,CAKI,MALJ,EAKY,GALZ,EAMJA,OANI,CAMI,KANJ,EAMW,EANX,EAOJA,OAPI,CAOI,KAPJ,EAOW,EAPX,CAAP;AAQD,CATM;AAWP;;;;;;AAKA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AACjC,MAAI,CAACA,GAAL,EAAU;AACR,WAAO,EAAP;AACD;;AAEDA,EAAAA,GAAG,GAAGA,GAAG,CAACJ,QAAJ,EAAN;AACA,SAAOI,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAArC;AACD,CAPM;AASP;;;;;AAIA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD;AAAA,SAAUN,UAAU,CAACM,IAAI,CAACP,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAD,CAApB;AAAA,CAA3B;AAEP;;;;;;;AAMA,OAAO,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAUC,QAAV,EAAuB;AAClD,MAAMC,MAAM,GAAGF,OAAO,CAACG,OAAR,CAAgBF,QAAhB,EAA0BZ,QAA1B,EAAf;;AAEA,MAAIa,MAAM,CAACE,KAAP,CAAa,QAAb,CAAJ,EAA4B;AAC1B,sBAAWF,MAAX;AACD;;AAED,SAAOA,MAAP;AACD,CARM;AAUP;;;;;AAIA,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACjB,GAAD,EAAS;AACnC,SAAOA,GAAG,CAACG,OAAJ,CAAY,UAAZ,EAAwB,UAACe,EAAD;AAAA,sBAAYA,EAAE,CAAChB,WAAH,EAAZ;AAAA,GAAxB,CAAP;AACD,CAFM;AAIP;;;;;;;;AAOA,OAAO,IAAMiB,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAmC;AAAA,MAA5BC,KAA4B,uEAApB,CAAoB;AAAA,MAAjBC,MAAiB,uEAAR,GAAQ;AAC1D,SAAOD,KAAK,IAAI,CAAT,GAAaD,IAAb,aAAuBA,IAAvB,SAA8BE,MAA9B,CAAP;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACvB,GAAD,EAAMwB,KAAN,EAAgB;AACtC,MAAIxB,GAAG,CAACyB,MAAJ,GAAaD,KAAjB,EAAwB,OAAOxB,GAAG,CAAC0B,SAAJ,CAAc,CAAd,EAAiBF,KAAjB,IAA0B,KAAjC,CAAxB,KACK,OAAOxB,GAAP;AACN,CAHM","sourcesContent":["/**\n * Convert string to slug\n * @param str\n * @returns {string}\n */\nexport const slugify = (str) => {\n  return str\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, '-')\n    .replace(/[^\\w-]+/g, '')\n    .replace(/--+/g, '-')\n    .replace(/^-+/, '')\n    .replace(/-+$/, '')\n}\n\n/**\n * Capitalize\n * @param val\n * @returns {*}\n */\nexport const capitalize = (val) => {\n  if (!val) {\n    return ''\n  }\n\n  val = val.toString()\n  return val.charAt(0).toUpperCase() + val.slice(1)\n}\n\n/**\n * Convert slug to title\n * @param slug\n */\nexport const convertSlugToTitle = (slug) => capitalize(slug.replace(/_/gi, ' '))\n\n/**\n * Float to string\n * @param numeric\n * @param decimals\n * @return {string}\n */\nexport const floatToString = (numeric, decimals) => {\n  const amount = numeric.toFixed(decimals).toString()\n\n  if (amount.match(/^\\.\\d+/)) {\n    return `0${amount}`\n  }\n\n  return amount\n}\n\n/**\n * Export convert string to toUnderscore\n * @param str\n */\nexport const toUnderscore = (str) => {\n  return str.replace(/([A-Z])/g, ($1) => `_${$1.toLowerCase()}`)\n}\n\n/**\n * Pluralize word\n * @param word\n * @param count\n * @param suffix\n * @return {string}\n */\nexport const pluralize = (word, count = 1, suffix = 's') => {\n  return count <= 1 ? word : `${word}${suffix}`\n}\n\n/**\n * Truncate text if text length longer than a value\n * @param str\n * @param limit\n */\nexport const truncate = (str, limit) => {\n  if (str.length > limit) return str.substring(0, limit) + '...'\n  else return str\n}\n"]}]}