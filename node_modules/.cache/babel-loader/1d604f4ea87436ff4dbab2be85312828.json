{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/dialog/Dialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/dialog/Dialog.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport PInput from '../input/Input';\nimport PIcon from '../icon/Icon';\nimport PModal from '../modal/Modal';\nimport config from '../../config';\nimport { removeElement } from '../../utils/dom';\nexport default {\n  name: 'BDialog',\n  components: {\n    PIcon: PIcon,\n    PInput: PInput\n  },\n  extends: PModal,\n  props: {\n    title: String,\n    message: String,\n    icon: String,\n    iconPack: String,\n    hasIcon: Boolean,\n    type: {\n      type: String,\n      default: 'primary'\n    },\n    confirmText: {\n      type: String,\n      default: function _default() {\n        return config.defaultDialogConfirmText ? config.defaultDialogConfirmText : 'OK';\n      }\n    },\n    cancelText: {\n      type: String,\n      default: function _default() {\n        return config.defaultDialogCancelText ? config.defaultDialogCancelText : 'Cancel';\n      }\n    },\n    hasInput: Boolean,\n    // Used internally to know if it's prompt\n    inputAttrs: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    onConfirm: {\n      type: Function,\n      default: function _default() {}\n    },\n    focusOn: {\n      type: String,\n      default: 'confirm'\n    }\n  },\n  data: function data() {\n    var prompt = this.hasInput ? this.inputAttrs.value || '' : '';\n    return {\n      prompt: prompt,\n      isActive: false,\n      validationMessage: ''\n    };\n  },\n  computed: {\n    /**\n     * Icon name (WB) based on the type.\n     */\n    iconByType: function iconByType() {\n      switch (this.type) {\n        case 'info':\n          return 'info-circle';\n\n        case 'success':\n          return 'check-circle';\n\n        case 'warning':\n          return 'alert';\n\n        case 'danger':\n          return 'alert-circle';\n\n        default:\n          return null;\n      }\n    },\n    showCancel: function showCancel() {\n      return this.cancelOptions.indexOf('button') >= 0;\n    }\n  },\n  methods: {\n    /**\n     * If it's a prompt Dialog, validate the input.\n     * Call the onConfirm prop (function) and close the Dialog.\n     */\n    confirm: function confirm() {\n      var _this = this;\n\n      if (this.$refs.input !== undefined) {\n        if (!this.$refs.input.checkValidity()) {\n          this.validationMessage = this.$refs.input.validationMessage;\n          this.$nextTick(function () {\n            return _this.$refs.input.select();\n          });\n          return;\n        }\n      }\n\n      this.onConfirm(this.prompt);\n      this.close();\n    },\n\n    /**\n     * Close the Dialog.\n     */\n    close: function close() {\n      var _this2 = this;\n\n      this.isActive = false; // Timeout for the animation complete before destroying\n\n      setTimeout(function () {\n        _this2.$destroy();\n\n        removeElement(_this2.$el);\n      }, 150);\n    }\n  },\n  beforeMount: function beforeMount() {\n    var _this3 = this;\n\n    // Insert the Dialog component in body tag\n    this.$nextTick(function () {\n      document.body.appendChild(_this3.$el);\n    });\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    this.isActive = true;\n\n    if (typeof this.inputAttrs.required === 'undefined') {\n      this.$set(this.inputAttrs, 'required', true);\n    }\n\n    this.$nextTick(function () {\n      // Handle which element receives focus\n      if (_this4.hasInput) {\n        _this4.$refs.input.focus();\n      } else if (_this4.focusOn === 'cancel' && _this4.showCancel) {\n        _this4.$refs.cancelButton.focus();\n      } else {\n        _this4.$refs.confirmButton.focus();\n      }\n    });\n  }\n};",{"version":3,"sources":["Dialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <transition :name=\"animation\">\n    <div v-if=\"isActive\" class=\"p-dialog p-modal is-active\">\n      <div class=\"p-modal-background\" @click=\"cancel('outside')\"></div>\n      <div class=\"p-modal-card p-animation-content\">\n        <div class=\"modal-content\">\n          <header class=\"modal-header\" v-if=\"title\">\n            <h4 class=\"modal-title\">{{ title }}</h4>\n          </header>\n          <section class=\"modal-body\">\n            <div class=\"media\">\n              <div class=\"mr-4\" v-if=\"hasIcon\">\n                <p-icon\n                  class=\"font-size-40\"\n                  :name=\"icon ? icon : iconByType\"\n                  :iconPack=\"iconPack\"\n                  :type=\"type\"\n                />\n              </div>\n              <div class=\"media-body\">\n                <p v-html=\"message\"></p>\n\n                <div v-if=\"hasInput\" class=\"form-group\">\n                  <p-input\n                    v-model=\"prompt\"\n                    ref=\"input\"\n                    :class=\"{ 'is-invalid': validationMessage }\"\n                    v-bind=\"inputAttrs\"\n                    @keyup.enter=\"confirm\"\n                  ></p-input>\n                  <p class=\"invalid-feedback\">{{ validationMessage }}</p>\n                </div>\n              </div>\n            </div>\n          </section>\n          <footer class=\"modal-footer\">\n            <button\n              v-if=\"showCancel\"\n              class=\"btn btn-default\"\n              ref=\"cancelButton\"\n              @click=\"cancel('button')\"\n            >\n              {{ cancelText }}\n            </button>\n            <button\n              class=\"btn\"\n              :class=\"`btn-${type}`\"\n              ref=\"confirmButton\"\n              @click=\"confirm\"\n            >\n              {{ confirmText }}\n            </button>\n          </footer>\n        </div>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script>\nimport PInput from '../input/Input'\nimport PIcon from '../icon/Icon'\nimport PModal from '../modal/Modal'\nimport config from '../../config'\nimport { removeElement } from '../../utils/dom'\n\nexport default {\n  name: 'BDialog',\n  components: {\n    PIcon,\n    PInput,\n  },\n  extends: PModal,\n  props: {\n    title: String,\n    message: String,\n    icon: String,\n    iconPack: String,\n    hasIcon: Boolean,\n    type: {\n      type: String,\n      default: 'primary',\n    },\n    confirmText: {\n      type: String,\n      default: () => {\n        return config.defaultDialogConfirmText\n          ? config.defaultDialogConfirmText\n          : 'OK'\n      },\n    },\n    cancelText: {\n      type: String,\n      default: () => {\n        return config.defaultDialogCancelText\n          ? config.defaultDialogCancelText\n          : 'Cancel'\n      },\n    },\n    hasInput: Boolean, // Used internally to know if it's prompt\n    inputAttrs: {\n      type: Object,\n      default: () => ({}),\n    },\n    onConfirm: {\n      type: Function,\n      default: () => {},\n    },\n    focusOn: {\n      type: String,\n      default: 'confirm',\n    },\n  },\n  data() {\n    const prompt = this.hasInput ? this.inputAttrs.value || '' : ''\n\n    return {\n      prompt,\n      isActive: false,\n      validationMessage: '',\n    }\n  },\n  computed: {\n    /**\n     * Icon name (WB) based on the type.\n     */\n    iconByType() {\n      switch (this.type) {\n        case 'info':\n          return 'info-circle'\n        case 'success':\n          return 'check-circle'\n        case 'warning':\n          return 'alert'\n        case 'danger':\n          return 'alert-circle'\n        default:\n          return null\n      }\n    },\n    showCancel() {\n      return this.cancelOptions.indexOf('button') >= 0\n    },\n  },\n  methods: {\n    /**\n     * If it's a prompt Dialog, validate the input.\n     * Call the onConfirm prop (function) and close the Dialog.\n     */\n    confirm() {\n      if (this.$refs.input !== undefined) {\n        if (!this.$refs.input.checkValidity()) {\n          this.validationMessage = this.$refs.input.validationMessage\n          this.$nextTick(() => this.$refs.input.select())\n          return\n        }\n      }\n\n      this.onConfirm(this.prompt)\n      this.close()\n    },\n\n    /**\n     * Close the Dialog.\n     */\n    close() {\n      this.isActive = false\n      // Timeout for the animation complete before destroying\n      setTimeout(() => {\n        this.$destroy()\n        removeElement(this.$el)\n      }, 150)\n    },\n  },\n  beforeMount() {\n    // Insert the Dialog component in body tag\n    this.$nextTick(() => {\n      document.body.appendChild(this.$el)\n    })\n  },\n  mounted() {\n    this.isActive = true\n\n    if (typeof this.inputAttrs.required === 'undefined') {\n      this.$set(this.inputAttrs, 'required', true)\n    }\n\n    this.$nextTick(() => {\n      // Handle which element receives focus\n      if (this.hasInput) {\n        this.$refs.input.focus()\n      } else if (this.focusOn === 'cancel' && this.showCancel) {\n        this.$refs.cancelButton.focus()\n      } else {\n        this.$refs.confirmButton.focus()\n      }\n    })\n  },\n}\n</script>\n"],"sourceRoot":"uikit/components/dialog"}]}