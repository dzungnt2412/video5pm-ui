{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/shared/store/index.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/shared/store/index.js","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nvar _mutations;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport api from '../api';\nimport countries from '../data/countries';\nimport shippings from '../data/shippings';\nimport union from 'lodash/union';\nexport var FETCH_STATISTIC_TOTAL_SALES = 'fetchStatisticTotalSales';\nexport var FETCH_STATISTIC_TOTAL_USERS = 'fetchStatisticTotalUsers';\nexport var FETCH_USERS_BY_ROLE = 'fetchUsersByRole';\nexport var COUNT_USERS_BY_ROLE = 'countUsersByRole';\nexport var FETCH_USERS_BY_REF = 'fetchUsersByRef';\nexport var FETCH_PRODUCT_TYPES = 'fetchProductTypes';\nexport var FETCH_ALL_PRODUCT_BASES = 'fetchAllProductBases';\nexport var FETCH_COUNTRIES = 'fetchCountries';\nexport var FETCH_SHOPS = 'fetchShops';\nexport var FETCH_COUNT_SHOP = 'fetchCountShop';\nexport var FETCH_PROVIDERS = 'fetchProviders';\nexport var FETCH_SHIPPING_METHOS = 'fetchShippingMethos';\nexport var FETCH_NOTIFICATIONS = 'fetchNotifications';\nexport var PUSH_NOTIFICATION = 'pushNotification';\nexport var COUNT_NOTIFICATIONS = 'countNotifications';\nexport var COUNT_NOTIFICATIONS_UNREAD = 'countNotificationsUnread';\nexport var READ_NOTIFICATIONS = 'readNotifications';\nexport var SHOW_NOTIFICATION_MESSAGE = 'showNotificationMessage';\nexport var state = {\n  shippings: {},\n  statisticTotalSales: 0,\n  statisticTotalUsers: 0,\n  users: [],\n  countUsers: 0,\n  usersRef: [],\n  productTypes: [],\n  productBases: [],\n  countries: [],\n  shops: [],\n  countShop: 0,\n  providers: [],\n  notifications: [],\n  countNoti: 0,\n  countNotiUnread: 0,\n  notificationMessage: '',\n  notificationLabel: ''\n};\nexport var getters = {\n  getShippingMethodTitle: function getShippingMethodTitle(state) {\n    return function (code) {\n      return state.shippings[code] | '';\n    };\n  },\n  getListIDNotificationUnread: function getListIDNotificationUnread(state) {\n    return state.notifications.reduce(function (ids, item) {\n      if (item.status === 'unread') {\n        ids.push(item.id);\n      }\n\n      return ids;\n    }, []);\n  }\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, FETCH_STATISTIC_TOTAL_SALES, function (state, payload) {\n  state.statisticTotalSales = payload;\n}), _defineProperty(_mutations, FETCH_STATISTIC_TOTAL_USERS, function (state, payload) {\n  state.statisticTotalUsers = payload;\n}), _defineProperty(_mutations, FETCH_USERS_BY_ROLE, function (state, payload) {\n  state.users = payload;\n}), _defineProperty(_mutations, COUNT_USERS_BY_ROLE, function (state, payload) {\n  state.countUsers = payload;\n}), _defineProperty(_mutations, FETCH_USERS_BY_REF, function (state, payload) {\n  state.usersRef = payload;\n}), _defineProperty(_mutations, FETCH_PRODUCT_TYPES, function (state, payload) {\n  state.productTypes = payload;\n}), _defineProperty(_mutations, FETCH_ALL_PRODUCT_BASES, function (state, payload) {\n  state.productBases = payload;\n}), _defineProperty(_mutations, FETCH_COUNTRIES, function (state, payload) {\n  state.countries = payload;\n}), _defineProperty(_mutations, FETCH_SHOPS, function (state, payload) {\n  state.shops = payload;\n}), _defineProperty(_mutations, FETCH_COUNT_SHOP, function (state, payload) {\n  state.countShop = payload;\n}), _defineProperty(_mutations, FETCH_PROVIDERS, function (state, payload) {\n  state.providers = payload;\n}), _defineProperty(_mutations, FETCH_SHIPPING_METHOS, function (state, payload) {\n  state.shippings = payload;\n}), _defineProperty(_mutations, PUSH_NOTIFICATION, function (state, payload) {\n  state.countNotiUnread++;\n  state.notifications.unshift(payload);\n}), _defineProperty(_mutations, FETCH_NOTIFICATIONS, function (state, payload) {\n  state.notifications = state.notifications.concat(payload);\n}), _defineProperty(_mutations, COUNT_NOTIFICATIONS, function (state, payload) {\n  state.countNoti = payload;\n}), _defineProperty(_mutations, COUNT_NOTIFICATIONS_UNREAD, function (state, payload) {\n  state.countNotiUnread = parseInt(payload);\n}), _defineProperty(_mutations, READ_NOTIFICATIONS, function (state, ids) {\n  state.countNotiUnread = state.countNotiUnread - parseInt(ids.length);\n  state.notifications = state.notifications.map(function (item) {\n    if (ids.indexOf(item.id) !== -1) {\n      item.status = 'read';\n    }\n\n    return item;\n  });\n}), _defineProperty(_mutations, SHOW_NOTIFICATION_MESSAGE, function (state, payload) {\n  state.notificationMessage = payload.message || '';\n  state.notificationLabel = payload.label || '';\n}), _mutations);\nexport var actions = {\n  /**\n   *\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchStatisticTotalSales: function () {\n    var _fetchStatisticTotalSales = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              result = {\n                success: true\n              };\n              _context.next = 4;\n              return api.fetchStatisticTotalSales(payload);\n\n            case 4:\n              response = _context.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  user_active: 0\n                };\n              }\n\n              commit(FETCH_STATISTIC_TOTAL_SALES, response.user_active);\n              return _context.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function fetchStatisticTotalSales(_x, _x2) {\n      return _fetchStatisticTotalSales.apply(this, arguments);\n    }\n\n    return fetchStatisticTotalSales;\n  }(),\n\n  /**\n   *\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchStatisticTotalUsers: function () {\n    var _fetchStatisticTotalUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              result = {\n                success: true\n              };\n              _context2.next = 4;\n              return api.fetchStatisticTotalUsers(payload);\n\n            case 4:\n              response = _context2.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  total: 0\n                };\n              }\n\n              commit(FETCH_STATISTIC_TOTAL_USERS, response.total);\n              return _context2.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function fetchStatisticTotalUsers(_x3, _x4) {\n      return _fetchStatisticTotalUsers.apply(this, arguments);\n    }\n\n    return fetchStatisticTotalUsers;\n  }(),\n\n  /**\n   * Fetch users by role\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchUsersByRole: function () {\n    var _fetchUsersByRole = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref3, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              result = {\n                success: true\n              };\n              _context3.next = 4;\n              return api.fetchUsersByRole(payload);\n\n            case 4:\n              response = _context3.sent;\n\n              if (response && response.errorMessage) {\n                response.users = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_USERS_BY_ROLE, response.users);\n              return _context3.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function fetchUsersByRole(_x5, _x6) {\n      return _fetchUsersByRole.apply(this, arguments);\n    }\n\n    return fetchUsersByRole;\n  }(),\n  countUsersByRole: function () {\n    var _countUsersByRole = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref4, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref4.commit;\n              result = {\n                success: true\n              };\n              _context4.next = 4;\n              return api.countUsersByRole(payload);\n\n            case 4:\n              response = _context4.sent;\n\n              if (response && response.errorMessage) {\n                response.count = 0;\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(COUNT_USERS_BY_ROLE, response.count);\n              return _context4.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function countUsersByRole(_x7, _x8) {\n      return _countUsersByRole.apply(this, arguments);\n    }\n\n    return countUsersByRole;\n  }(),\n\n  /**\n   * Fetch users by ref\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchUsersByRef: function () {\n    var _fetchUsersByRef = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref5, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref5.commit;\n              result = {\n                success: true\n              };\n              _context5.next = 4;\n              return api.fetchUsersByRef(payload);\n\n            case 4:\n              response = _context5.sent;\n\n              if (response && response.errorMessage) {\n                response.users = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_USERS_BY_REF, response.users);\n              return _context5.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function fetchUsersByRef(_x9, _x10) {\n      return _fetchUsersByRef.apply(this, arguments);\n    }\n\n    return fetchUsersByRef;\n  }(),\n\n  /**\n   * Fetch product types\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchProductTypes: function () {\n    var _fetchProductTypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref6) {\n      var commit,\n          payload,\n          result,\n          response,\n          _args6 = arguments;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref6.commit;\n              payload = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n              result = {\n                success: true\n              };\n              _context6.next = 5;\n              return api.fetchProductTypes(payload);\n\n            case 5:\n              response = _context6.sent;\n\n              if (response && response.errorMessage) {\n                response.product_types = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_PRODUCT_TYPES, response.product_types);\n              return _context6.abrupt(\"return\", result);\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function fetchProductTypes(_x11) {\n      return _fetchProductTypes.apply(this, arguments);\n    }\n\n    return fetchProductTypes;\n  }(),\n\n  /**\n   * Fetch all product bases\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchAllProductBases: function () {\n    var _fetchAllProductBases = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref7) {\n      var commit,\n          payload,\n          result,\n          response,\n          _args7 = arguments;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              commit = _ref7.commit;\n              payload = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n              result = {\n                success: true\n              };\n              _context7.next = 5;\n              return api.fetchAllProductBases(payload);\n\n            case 5:\n              response = _context7.sent;\n\n              if (response && response.errorMessage) {\n                response.product_bases = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_ALL_PRODUCT_BASES, response.product_bases);\n              return _context7.abrupt(\"return\", result);\n\n            case 9:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    function fetchAllProductBases(_x12) {\n      return _fetchAllProductBases.apply(this, arguments);\n    }\n\n    return fetchAllProductBases;\n  }(),\n\n  /**\n   * Fetch countries\n   * @param commit\n   */\n  fetchCountries: function fetchCountries(_ref8) {\n    var commit = _ref8.commit;\n    commit(FETCH_COUNTRIES, countries);\n  },\n  fetchShippingMethos: function fetchShippingMethos(_ref9) {\n    var commit = _ref9.commit;\n    commit(FETCH_SHIPPING_METHOS, shippings);\n  },\n\n  /**\n   * Fetch shops\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchShops: function () {\n    var _fetchShops = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_ref10, payload) {\n      var commit, result, _yield$Promise$all, _yield$Promise$all2, list, count;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              commit = _ref10.commit;\n              result = {\n                success: true\n              };\n              _context8.next = 4;\n              return Promise.all([api.fetchShops(payload), api.fetchShopCount(payload)]);\n\n            case 4:\n              _yield$Promise$all = _context8.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              list = _yield$Promise$all2[0];\n              count = _yield$Promise$all2[1];\n\n              if (!list || list.errorMessage || !count) {\n                result = {\n                  success: false,\n                  message: list.errorMessage\n                };\n                list = {\n                  shops: []\n                };\n                count = {\n                  count: 0\n                };\n              }\n\n              commit(FETCH_SHOPS, list.shops);\n              commit(FETCH_COUNT_SHOP, count.count);\n              return _context8.abrupt(\"return\", result);\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function fetchShops(_x13, _x14) {\n      return _fetchShops.apply(this, arguments);\n    }\n\n    return fetchShops;\n  }(),\n  fetchProviders: function () {\n    var _fetchProviders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref11, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              commit = _ref11.commit;\n              result = {\n                success: true\n              };\n              _context9.next = 4;\n              return api.fetchProviders(payload);\n\n            case 4:\n              response = _context9.sent;\n\n              if (response && response.errorMessage) {\n                response.product_types = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_PROVIDERS, response.providers);\n              return _context9.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    function fetchProviders(_x15, _x16) {\n      return _fetchProviders.apply(this, arguments);\n    }\n\n    return fetchProviders;\n  }(),\n  countNotifications: function () {\n    var _countNotifications = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_ref12, playload) {\n      var commit, result, res;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              commit = _ref12.commit;\n              result = {\n                success: true\n              };\n              _context10.next = 4;\n              return api.countNotifications(playload);\n\n            case 4:\n              res = _context10.sent;\n\n              if (res && res.errorMessage) {\n                res.count = 0;\n                result = {\n                  success: false,\n                  message: res.errorMessage\n                };\n              }\n\n              commit(COUNT_NOTIFICATIONS, res.count);\n              return _context10.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    function countNotifications(_x17, _x18) {\n      return _countNotifications.apply(this, arguments);\n    }\n\n    return countNotifications;\n  }(),\n  countNotificationsUnread: function () {\n    var _countNotificationsUnread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(_ref13, playload) {\n      var commit, result, res;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              commit = _ref13.commit;\n              result = {\n                success: true\n              };\n              _context11.next = 4;\n              return api.countNotifications(playload);\n\n            case 4:\n              res = _context11.sent;\n\n              if (res && res.errorMessage) {\n                res.count = 0;\n                result = {\n                  success: false,\n                  message: res.errorMessage\n                };\n              }\n\n              commit(COUNT_NOTIFICATIONS_UNREAD, res.count);\n              return _context11.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    function countNotificationsUnread(_x19, _x20) {\n      return _countNotificationsUnread.apply(this, arguments);\n    }\n\n    return countNotificationsUnread;\n  }(),\n  fetchNotifications: function () {\n    var _fetchNotifications = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_ref14, playload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              commit = _ref14.commit;\n              result = {\n                success: true\n              };\n              _context12.next = 4;\n              return api.fetchNotifications(playload);\n\n            case 4:\n              response = _context12.sent;\n\n              if (response && response.errorMessage) {\n                response.notifications = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_NOTIFICATIONS, response.notifications || []);\n              return _context12.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    function fetchNotifications(_x21, _x22) {\n      return _fetchNotifications.apply(this, arguments);\n    }\n\n    return fetchNotifications;\n  }(),\n  readNotifications: function () {\n    var _readNotifications = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(_ref15) {\n      var commit,\n          getters,\n          ids,\n          result,\n          notiIds,\n          response,\n          _args13 = arguments;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              commit = _ref15.commit, getters = _ref15.getters;\n              ids = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : [];\n              result = {\n                success: true\n              };\n              notiIds = union(getters.getListIDNotificationUnread, ids);\n\n              if (!(notiIds.length === 0)) {\n                _context13.next = 6;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", result);\n\n            case 6:\n              _context13.next = 8;\n              return api.readNotifications(notiIds);\n\n            case 8:\n              response = _context13.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              } else {\n                commit(READ_NOTIFICATIONS, notiIds);\n              }\n\n              return _context13.abrupt(\"return\", result);\n\n            case 11:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    function readNotifications(_x23) {\n      return _readNotifications.apply(this, arguments);\n    }\n\n    return readNotifications;\n  }(),\n  showNotificationMessage: function showNotificationMessage(_ref16, payload) {\n    var commit = _ref16.commit;\n    commit(SHOW_NOTIFICATION_MESSAGE, payload);\n  }\n};",null]}