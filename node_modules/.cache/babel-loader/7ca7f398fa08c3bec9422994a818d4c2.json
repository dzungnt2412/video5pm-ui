{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/ticket/views/View.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/ticket/views/View.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapActions, mapMutations } from 'vuex';\nimport mixinRoute from '@core/mixins/route';\nimport ModalImage from './components/ModalImage';\nimport mixinTicket from '../mixins/ticket';\nimport mixinUpload from '@/core/mixins/upload';\nimport Browser from '@core/helpers/browser';\nimport { cloneDeep } from '@core/utils';\nexport default {\n  name: 'TicketView',\n  mixins: [mixinRoute, mixinUpload, mixinTicket],\n  components: {\n    ModalImage: ModalImage\n  },\n  data: function data() {\n    return {\n      isChange: false,\n      isHideReply: true,\n      isMessageSending: false,\n      isFetching: false,\n      imageZoomImage: '',\n      isZoomImage: false,\n      result: {},\n      filter: {\n        page: 1,\n        limit: 50\n      },\n      form: {\n        ticket_id: 0,\n        message: '',\n        urls: []\n      },\n      attach_files: []\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapState('auth', {\n    auth: function auth(state) {\n      return state.user;\n    }\n  })), mapState('ticket', {\n    ticket: function ticket(state) {\n      return state.ticket;\n    },\n    messages: function messages(state) {\n      return state.messages;\n    },\n    count: function count(state) {\n      return state.count;\n    }\n  })), {}, {\n    createrName: function createrName() {\n      if (this.ticket.creater) {\n        return this.ticket.creater.ful_name || this.ticket.creater.username;\n      }\n\n      return 'Undefined';\n    },\n    ticketID: function ticketID() {\n      return parseInt(this.$route.params.id, 10);\n    },\n    isClosed: function isClosed() {\n      return this.ticket.status === 'closed';\n    }\n  }),\n  created: function created() {\n    this.filter = this.getRouteQuery();\n    this.init();\n  },\n  methods: _objectSpread(_objectSpread(_objectSpread({}, mapActions('ticket', ['fetchTicket', 'fetchTicketFile', 'fetchTicketMessages', 'pushMessage', 'closeTicket', 'fetchTicketStatictis'])), mapMutations(['updateTicketMessage'])), {}, {\n    init: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Promise.all([this.handlerFetchTicket(), this.handlerFetchTicketMessages()]);\n\n              case 2:\n                if (this.ticket.status === 'closed') {\n                  this.isHideReply = false;\n                }\n\n                if (this.ticket.attach_files) {\n                  this.$set(this, 'attach_files', cloneDeep(this.ticket.attach_files));\n                }\n\n                this.getTicketFiles();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }(),\n    getTicketFile: function () {\n      var _getTicketFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, isFile) {\n        var result, payload;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.isFetching = true;\n                _context2.prev = 1;\n                payload = {\n                  url: url,\n                  type: 'tickets'\n                };\n                _context2.next = 5;\n                return this.fetchTicketFile(payload);\n\n              case 5:\n                result = _context2.sent;\n\n                if (result.success) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                this.$toast.open({\n                  type: 'error',\n                  message: \"Download failed ! \"\n                });\n                return _context2.abrupt(\"return\", false);\n\n              case 9:\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](1);\n                this.$toast.open({\n                  type: 'error',\n                  message: \"Download failed !\"\n                });\n\n              case 14:\n                this.isFetching = false;\n\n                if (!isFile) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                Browser.downloadBlob(result.blob, url.split('/').pop());\n                _context2.next = 20;\n                break;\n\n              case 19:\n                return _context2.abrupt(\"return\", window.URL.createObjectURL(result.blob));\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 11]]);\n      }));\n\n      function getTicketFile(_x, _x2) {\n        return _getTicketFile.apply(this, arguments);\n      }\n\n      return getTicketFile;\n    }(),\n    getTicketFiles: function getTicketFiles() {\n      var _this = this;\n\n      if (!this.attach_files.length) return false;\n      this.attach_files.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(el, i) {\n          var result;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (_this.isImage(el)) {\n                    result = _this.getTicketFile(el, false);\n                    result.then(function (response) {\n                      _this.$set(_this.attach_files, i, {\n                        url: el,\n                        blob: response\n                      });\n                    });\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3, _x4) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    handlerFetchTicket: function () {\n      var _handlerFetchTicket = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.fetchTicket(this.ticketID);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function handlerFetchTicket() {\n        return _handlerFetchTicket.apply(this, arguments);\n      }\n\n      return handlerFetchTicket;\n    }(),\n    handlerFetchTicketMessages: function () {\n      var _handlerFetchTicketMessages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.isFetching = true;\n                _context5.next = 3;\n                return this.fetchTicketMessages(this.ticketID, this.filter);\n\n              case 3:\n                this.messages.forEach(function (el, index) {\n                  var files = el.attach_files;\n\n                  if (!files) {\n                    return;\n                  }\n\n                  files.forEach(function (file, i) {\n                    if (_this2.isImage(file)) {\n                      var result = _this2.getTicketFile(file, false);\n\n                      result.then(function (response) {\n                        this.messages[index].attach_files[i] = {\n                          url: file,\n                          blob: response\n                        };\n                        this.$store.commit('ticket/updateTicketMessage', cloneDeep(this.messages));\n                      }.bind(_this2));\n                    }\n                  });\n                });\n                this.isFetching = false;\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function handlerFetchTicketMessages() {\n        return _handlerFetchTicketMessages.apply(this, arguments);\n      }\n\n      return handlerFetchTicketMessages;\n    }(),\n    handlerPushMessage: function () {\n      var _handlerPushMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var validate, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.form.urls = this.files.map(function (item) {\n                  return item.url;\n                });\n                _context6.next = 3;\n                return this.$validator.validateAll();\n\n              case 3:\n                validate = _context6.sent;\n\n                if (validate) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 6:\n                this.form.ticket_id = this.ticketID;\n                this.isMessageSending = true;\n                _context6.next = 10;\n                return this.pushMessage(this.form);\n\n              case 10:\n                result = _context6.sent;\n\n                if (!(result && result.success)) {\n                  _context6.next = 21;\n                  break;\n                }\n\n                this.handlerFetchTicketMessages();\n\n                if (!(this.ticket.status === 'closed')) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                this.handlerFetchTicket();\n                _context6.next = 17;\n                return this.fetchTicketStatictis();\n\n              case 17:\n                this.clearFrom();\n                this.$toast.open({\n                  type: 'success',\n                  message: 'Gửi tin thành công'\n                });\n                _context6.next = 22;\n                break;\n\n              case 21:\n                this.$toast.open({\n                  type: 'error',\n                  message: result.message\n                });\n\n              case 22:\n                this.isMessageSending = false;\n\n              case 23:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function handlerPushMessage() {\n        return _handlerPushMessage.apply(this, arguments);\n      }\n\n      return handlerPushMessage;\n    }(),\n    clearFrom: function clearFrom() {\n      this.files = [];\n      this.form = {\n        ticket_id: 0,\n        message: '',\n        urls: []\n      };\n    },\n    zoomImage: function zoomImage(src) {\n      this.isZoomImage = true;\n      this.imageZoomImage = src;\n    },\n    showDeleteConfirmation: function showDeleteConfirmation(item) {\n      var _this3 = this;\n\n      this.$dialog.confirm({\n        title: \"X\\xE1c nh\\u1EADn x\\xF3a file \\u0111\\xEDnh k\\xE8m?\",\n        message: \"B\\u1EA1n c\\xF3 ch\\u1EAFc ch\\u1EAFn mu\\u1ED1n x\\xF3a file \\u0111\\xEDnh k\\xE8m n\\xE0y?\",\n        confirmText: 'Xóa',\n        onConfirm: function onConfirm() {\n          return _this3.handleDeleteImage(item);\n        },\n        type: 'danger'\n      });\n    },\n    handlerForword: function handlerForword(staff) {\n      var _this4 = this;\n\n      var idx = this.ticket.staffs.find(function (item) {\n        return item.staff_id == staff.id;\n      });\n\n      if (idx) {\n        this.$toast.open({\n          type: 'warning',\n          message: \"Ticket \\u0111\\xE3 \\u0111\\u01B0\\u1EE3c chuy\\u1EC3n ti\\u1EBFp cho \".concat(staff.full_name || staff.username)\n        });\n        return;\n      }\n\n      this.$dialog.confirm({\n        title: \"Chuy\\u1EC3n ti\\u1EBFp ticket\",\n        message: \"B\\u1EA1n mu\\u1ED1n chuy\\u1EC3n ti\\u1EBFp ticket cho \".concat(staff.full_name || staff.username),\n        confirmText: 'Xác nhận',\n        onConfirm: function onConfirm() {\n          _this4.handlerForward('', staff.id);\n        },\n        type: 'primary'\n      });\n    }\n  })\n};",null]}