{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/mixins/container.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/mixins/container.js","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { mapActions } from 'vuex';\nimport { UPDATE_CONTAINER } from '@/packages/container/store/types';\nimport { ORDER_STATUS_CANCELED, ORDER_STATUS_PROCESS, ORDER_STATUS_PENDING, ORDER_STATUS_DRAFT } from '@core/constants';\nexport default {\n  data: function data() {\n    return {\n      isContainerUpdating: false,\n      containerTotalAmount: 0,\n      resultUpdateContainer: {},\n      updateContainerStatus: ''\n    };\n  },\n  computed: {\n    isAllowUpdateCancel: function isAllowUpdateCancel() {\n      return this.container.status === ORDER_STATUS_DRAFT || this.container.status === ORDER_STATUS_PENDING;\n    }\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions('container', [UPDATE_CONTAINER])), {}, {\n    /**\n     * Handle update container\n     * @param newVal\n     * @return {Promise<boolean>}\n     */\n    handleUpdateContainer: function () {\n      var _handleUpdateContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newVal) {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.isContainerUpdating = true;\n                payload = Object.assign({}, this.container, newVal);\n                _context.next = 4;\n                return this.updateContainer(payload);\n\n              case 4:\n                this.resultUpdateContainer = _context.sent;\n                this.isContainerUpdating = false;\n\n                if (!this.resultUpdateContainer.success) {\n                  _context.next = 10;\n                  break;\n                }\n\n                this.handleFetchOrders();\n                this.$toast.open({\n                  type: 'success',\n                  message: 'Cập nhật delivery order thành công'\n                });\n                return _context.abrupt(\"return\", true);\n\n              case 10:\n                this.$toast.open({\n                  type: 'error',\n                  message: this.resultUpdateContainer.message\n                });\n                return _context.abrupt(\"return\", false);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleUpdateContainer(_x) {\n        return _handleUpdateContainer.apply(this, arguments);\n      }\n\n      return handleUpdateContainer;\n    }(),\n    confirmUpdateContainer: function confirmUpdateContainer(action) {\n      var _this = this;\n\n      this.$dialog.confirm({\n        message: 'Are you sure you want to do this?',\n        onConfirm: function onConfirm() {\n          return _this.onUpdateContainerActionConfirm(action);\n        }\n      });\n    },\n    onUpdateContainerActionConfirm: function () {\n      var _onUpdateContainerActionConfirm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(action) {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                payload = {};\n                _context2.t0 = action;\n                _context2.next = _context2.t0 === 'canceled' ? 4 : _context2.t0 === 'process' ? 6 : 7;\n                break;\n\n              case 4:\n                payload.status = ORDER_STATUS_CANCELED;\n                return _context2.abrupt(\"break\", 7);\n\n              case 6:\n                payload.status = ORDER_STATUS_PROCESS;\n\n              case 7:\n                this.handleUpdateContainer(payload);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function onUpdateContainerActionConfirm(_x2) {\n        return _onUpdateContainerActionConfirm.apply(this, arguments);\n      }\n\n      return onUpdateContainerActionConfirm;\n    }()\n  })\n};",{"version":3,"sources":["/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/mixins/container.js"],"names":["mapActions","UPDATE_CONTAINER","ORDER_STATUS_CANCELED","ORDER_STATUS_PROCESS","ORDER_STATUS_PENDING","ORDER_STATUS_DRAFT","data","isContainerUpdating","containerTotalAmount","resultUpdateContainer","updateContainerStatus","computed","isAllowUpdateCancel","container","status","methods","handleUpdateContainer","newVal","payload","Object","assign","updateContainer","success","handleFetchOrders","$toast","open","type","message","confirmUpdateContainer","action","$dialog","confirm","onConfirm","onUpdateContainerActionConfirm"],"mappings":";;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AACA,SACEC,qBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,kBAJF,QAKO,iBALP;AAOA,eAAe;AACbC,EAAAA,IADa,kBACN;AACL,WAAO;AACLC,MAAAA,mBAAmB,EAAE,KADhB;AAELC,MAAAA,oBAAoB,EAAE,CAFjB;AAGLC,MAAAA,qBAAqB,EAAE,EAHlB;AAILC,MAAAA,qBAAqB,EAAE;AAJlB,KAAP;AAMD,GARY;AASbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBADQ,iCACc;AACpB,aACE,KAAKC,SAAL,CAAeC,MAAf,KAA0BT,kBAA1B,IACA,KAAKQ,SAAL,CAAeC,MAAf,KAA0BV,oBAF5B;AAID;AANO,GATG;AAiBbW,EAAAA,OAAO,kCACFf,UAAU,CAAC,WAAD,EAAc,CAACC,gBAAD,CAAd,CADR;AAGL;;;;;AAKMe,IAAAA,qBARD;AAAA,6GAQuBC,MARvB;AAAA;AAAA;AAAA;AAAA;AAAA;AASH,qBAAKV,mBAAL,GAA2B,IAA3B;AACMW,gBAAAA,OAVH,GAUaC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKP,SAAvB,EAAkCI,MAAlC,CAVb;AAAA;AAAA,uBAWgC,KAAKI,eAAL,CAAqBH,OAArB,CAXhC;;AAAA;AAWH,qBAAKT,qBAXF;AAYH,qBAAKF,mBAAL,GAA2B,KAA3B;;AAZG,qBAcC,KAAKE,qBAAL,CAA2Ba,OAd5B;AAAA;AAAA;AAAA;;AAeD,qBAAKC,iBAAL;AACA,qBAAKC,MAAL,CAAYC,IAAZ,CAAiB;AACfC,kBAAAA,IAAI,EAAE,SADS;AAEfC,kBAAAA,OAAO,EAAE;AAFM,iBAAjB;AAhBC,iDAoBM,IApBN;;AAAA;AAuBH,qBAAKH,MAAL,CAAYC,IAAZ,CAAiB;AACfC,kBAAAA,IAAI,EAAE,OADS;AAEfC,kBAAAA,OAAO,EAAE,KAAKlB,qBAAL,CAA2BkB;AAFrB,iBAAjB;AAvBG,iDA2BI,KA3BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8BLC,IAAAA,sBA9BK,kCA8BkBC,MA9BlB,EA8B0B;AAAA;;AAC7B,WAAKC,OAAL,CAAaC,OAAb,CAAqB;AACnBJ,QAAAA,OAAO,EAAE,mCADU;AAEnBK,QAAAA,SAAS,EAAE;AAAA,iBAAM,KAAI,CAACC,8BAAL,CAAoCJ,MAApC,CAAN;AAAA;AAFQ,OAArB;AAID,KAnCI;AAqCCI,IAAAA,8BArCD;AAAA,uHAqCgCJ,MArChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCGX,gBAAAA,OAtCH,GAsCa,EAtCb;AAAA,+BAuCKW,MAvCL;AAAA,kDAwCI,UAxCJ,wBA2CI,SA3CJ;AAAA;;AAAA;AAyCCX,gBAAAA,OAAO,CAACJ,MAAR,GAAiBZ,qBAAjB;AAzCD;;AAAA;AA4CCgB,gBAAAA,OAAO,CAACJ,MAAR,GAAiBX,oBAAjB;;AA5CD;AA+CH,qBAAKa,qBAAL,CAA2BE,OAA3B;;AA/CG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjBM,CAAf","sourcesContent":["import { mapActions } from 'vuex'\nimport { UPDATE_CONTAINER } from '@/packages/container/store/types'\nimport {\n  ORDER_STATUS_CANCELED,\n  ORDER_STATUS_PROCESS,\n  ORDER_STATUS_PENDING,\n  ORDER_STATUS_DRAFT,\n} from '@core/constants'\n\nexport default {\n  data() {\n    return {\n      isContainerUpdating: false,\n      containerTotalAmount: 0,\n      resultUpdateContainer: {},\n      updateContainerStatus: '',\n    }\n  },\n  computed: {\n    isAllowUpdateCancel() {\n      return (\n        this.container.status === ORDER_STATUS_DRAFT ||\n        this.container.status === ORDER_STATUS_PENDING\n      )\n    },\n  },\n  methods: {\n    ...mapActions('container', [UPDATE_CONTAINER]),\n\n    /**\n     * Handle update container\n     * @param newVal\n     * @return {Promise<boolean>}\n     */\n    async handleUpdateContainer(newVal) {\n      this.isContainerUpdating = true\n      const payload = Object.assign({}, this.container, newVal)\n      this.resultUpdateContainer = await this.updateContainer(payload)\n      this.isContainerUpdating = false\n\n      if (this.resultUpdateContainer.success) {\n        this.handleFetchOrders()\n        this.$toast.open({\n          type: 'success',\n          message: 'Cập nhật delivery order thành công',\n        })\n        return true\n      }\n\n      this.$toast.open({\n        type: 'error',\n        message: this.resultUpdateContainer.message,\n      })\n      return false\n    },\n\n    confirmUpdateContainer(action) {\n      this.$dialog.confirm({\n        message: 'Are you sure you want to do this?',\n        onConfirm: () => this.onUpdateContainerActionConfirm(action),\n      })\n    },\n\n    async onUpdateContainerActionConfirm(action) {\n      const payload = {}\n      switch (action) {\n        case 'canceled':\n          payload.status = ORDER_STATUS_CANCELED\n          break\n        case 'process':\n          payload.status = ORDER_STATUS_PROCESS\n      }\n\n      this.handleUpdateContainer(payload)\n    },\n  },\n}\n"]}]}