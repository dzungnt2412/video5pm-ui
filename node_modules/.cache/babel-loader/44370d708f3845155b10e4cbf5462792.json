{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/core/utils/object.js","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/core/utils/object.js","mtime":1603898990376},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1597736267502}],"contextDependencies":[],"result":["import isPlain from 'is-plain-object';\nimport { isObject } from '@core/utils/type';\n/**\n * Merge target object with value\n * @param target\n * @param path\n * @param value\n * @returns {*}\n */\n\nexport var merge = function merge(target, path, value) {\n  if (isPlain(target[path]) && isPlain(value)) {\n    target[path] = Object.assign({}, target[path], value);\n  } else {\n    target[path] = value;\n  }\n\n  return target;\n};\n/**\n * Is diff two object\n * @param object1\n * @param object2\n * @returns {boolean}\n */\n\nexport var isObjectDiff = function isObjectDiff(object1, object2) {\n  return JSON.stringify(object1) !== JSON.stringify(object2);\n};\n/**\n * Has own property\n *\n * @param obj\n * @param key\n * @returns {boolean}\n */\n\nexport var hasOwn = function hasOwn(obj, key) {\n  return obj && isObject(obj) && key in obj;\n};\n/**\n * Is empty\n * @param obj\n * @returns {boolean}\n */\n\nexport var isEmpty = function isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n};",{"version":3,"sources":["/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/core/utils/object.js"],"names":["isPlain","isObject","merge","target","path","value","Object","assign","isObjectDiff","object1","object2","JSON","stringify","hasOwn","obj","key","isEmpty","keys","length"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA;;;;;;;;AAOA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAyB;AAC5C,MAAIL,OAAO,CAACG,MAAM,CAACC,IAAD,CAAP,CAAP,IAAyBJ,OAAO,CAACK,KAAD,CAApC,EAA6C;AAC3CF,IAAAA,MAAM,CAACC,IAAD,CAAN,GAAeE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,MAAM,CAACC,IAAD,CAAxB,EAAgCC,KAAhC,CAAf;AACD,GAFD,MAEO;AACLF,IAAAA,MAAM,CAACC,IAAD,CAAN,GAAeC,KAAf;AACD;;AAED,SAAOF,MAAP;AACD,CARM;AAUP;;;;;;;AAMA,OAAO,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAUC,OAAV,EAAsB;AAChD,SAAOC,IAAI,CAACC,SAAL,CAAeH,OAAf,MAA4BE,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAnC;AACD,CAFM;AAIP;;;;;;;;AAOA,OAAO,IAAMG,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAc;AAClC,SAAOD,GAAG,IAAIb,QAAQ,CAACa,GAAD,CAAf,IAAwBC,GAAG,IAAID,GAAtC;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACF,GAAD,EAAS;AAC9B,SAAOR,MAAM,CAACW,IAAP,CAAYH,GAAZ,EAAiBI,MAAjB,KAA4B,CAAnC;AACD,CAFM","sourcesContent":["import isPlain from 'is-plain-object'\nimport { isObject } from '@core/utils/type'\n\n/**\n * Merge target object with value\n * @param target\n * @param path\n * @param value\n * @returns {*}\n */\nexport const merge = (target, path, value) => {\n  if (isPlain(target[path]) && isPlain(value)) {\n    target[path] = Object.assign({}, target[path], value)\n  } else {\n    target[path] = value\n  }\n\n  return target\n}\n\n/**\n * Is diff two object\n * @param object1\n * @param object2\n * @returns {boolean}\n */\nexport const isObjectDiff = (object1, object2) => {\n  return JSON.stringify(object1) !== JSON.stringify(object2)\n}\n\n/**\n * Has own property\n *\n * @param obj\n * @param key\n * @returns {boolean}\n */\nexport const hasOwn = (obj, key) => {\n  return obj && isObject(obj) && key in obj\n}\n\n/**\n * Is empty\n * @param obj\n * @returns {boolean}\n */\nexport const isEmpty = (obj) => {\n  return Object.keys(obj).length === 0\n}\n"]}]}