{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/OptionMappingForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/views/OptionMappingForm.vue","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapState } from 'vuex';\nimport { cloneDeep, isObjectDiff } from '@core/utils';\nimport { types } from '../constant';\nexport default {\n  name: 'OptionMappingForm',\n  data: function data() {\n    return {\n      mode: 'new',\n      form: {\n        product_type_id: null,\n\n        /**\n         * [{\n            option_set: {\n              condition: '',\n              target_value: null,\n            },\n            option: {\n              conditions: '',\n              values: [],\n              target_values: [],\n            },\n          }],\n         */\n        rules: []\n      },\n      initialForm: {},\n      isShowUnsavedBar: false,\n      isFetching: false,\n      isSaving: false,\n      isDeleting: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState('orderMapping', {\n    optionMappingState: function optionMappingState(state) {\n      return state.orderMapping;\n    },\n    products: function products(state) {\n      return state.productTypes;\n    },\n    options: function options(state) {\n      return state.options;\n    },\n    optionSets: function optionSets(state) {\n      return state.optionSets;\n    }\n  })), {}, {\n    pageTitle: function pageTitle() {\n      return this.mode === 'new' ? 'Create option mapping rule' : 'Update option mapping rule';\n    },\n    getOptionsWithOptionSetId: function getOptionsWithOptionSetId() {\n      var _this = this;\n\n      return function (id) {\n        return _this.options.filter(function (option) {\n          return option.option_set_id === id;\n        });\n      };\n    },\n    getOptionValueByIndex: function getOptionValueByIndex() {\n      var _this2 = this;\n\n      return function (ruleIndex, index) {\n        var rule = _this2.form.rules[ruleIndex];\n\n        if (!rule) {\n          return null;\n        }\n\n        var value = rule.option.values[index];\n\n        if (!value) {\n          return null;\n        }\n\n        return value;\n      };\n    },\n    getOptionTargetValueByIndex: function getOptionTargetValueByIndex() {\n      var _this3 = this;\n\n      return function (ruleIndex, index) {\n        var rule = _this3.form.rules[ruleIndex];\n\n        if (!rule) {\n          return null;\n        }\n\n        var targetValue = rule.option.target_values[index];\n\n        if (!targetValue) {\n          return null;\n        }\n\n        return targetValue;\n      };\n    }\n  }),\n  watch: {\n    form: {\n      handler: function handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.initialForm);\n      },\n      deep: true\n    },\n    initialForm: {\n      handler: function handler(val) {\n        this.isShowUnsavedBar = isObjectDiff(val, this.form);\n      },\n      deep: true\n    }\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions('orderMapping', {\n    createOrUpdateOrderMapping: 'createOrUpdateOrderMapping',\n    fetchOrderMapping: 'fetchOrderMapping',\n    deleteOrderMapping: 'deleteOrderMapping',\n    fetchProductTypes: 'fetchProductTypes',\n    fetchOptionsByProductId: 'fetchOptionsByProductId'\n  })), {}, {\n    addNewOption: function addNewOption() {\n      var rules = this.form.rules;\n      rules.push({\n        option_set: {\n          condition: '',\n          target_value: null\n        },\n        option: {\n          conditions: '',\n          values: [],\n          target_values: []\n        }\n      });\n    },\n    deleteOption: function deleteOption(index) {\n      this.form.rules.splice(index, 1);\n    },\n    onOptionSetTargetValueChange: function onOptionSetTargetValueChange(rule, val) {\n      rule.option_set.target_value = val;\n      var options = this.getOptionsWithOptionSetId(val);\n      rule.option.target_values = options.map(function (option) {\n        return option.id;\n      });\n    },\n    onRuleOptionConditionsChange: function onRuleOptionConditionsChange(rule, val) {\n      rule.option.conditions = val;\n      var newConditionsArr = val.split(',').filter(function (condition) {\n        return condition.trim() !== '';\n      });\n      rule.option.values.forEach(function (value, index) {\n        if (newConditionsArr[index]) {\n          rule.option.values[index] = newConditionsArr[index];\n        }\n      });\n\n      if (newConditionsArr.length > rule.option.values.length) {\n        newConditionsArr.slice(rule.option.values.length).forEach(function (condition) {\n          rule.option.values.push(condition);\n        });\n      } else if (newConditionsArr.length < rule.option.values.length) {\n        rule.option.values = rule.option.values.slice(0, newConditionsArr.length);\n      }\n    },\n    setOptionValueByIndex: function setOptionValueByIndex(ruleIndex, index, value) {\n      var rule = this.form.rules[ruleIndex];\n      this.$set(rule.option.values, index, value);\n    },\n    setOptionTargetValueByIndex: function setOptionTargetValueByIndex(ruleIndex, index, value) {\n      var rule = this.form.rules[ruleIndex];\n      this.$set(rule.option.target_values, index, value);\n    },\n    onProductTypeChange: function () {\n      var _onProductTypeChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.fetchOptionsByProductId(id);\n\n              case 2:\n                result = _context.sent;\n\n                if (!result.success) {\n                  this.$toast.open({\n                    type: 'error',\n                    message: result.message || 'Something went wrong. Please try again later'\n                  });\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function onProductTypeChange(_x) {\n        return _onProductTypeChange.apply(this, arguments);\n      }\n\n      return onProductTypeChange;\n    }(),\n    fetch: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var promises, _yield$Promise$all, _yield$Promise$all2, res2;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.isFetching = true;\n                promises = [this.fetchProductTypes()];\n\n                if (this.$route.params.id && this.$route.params.id !== 'new') {\n                  this.mode = 'edit';\n                  promises.push(this.fetchOrderMapping({\n                    type: types.option,\n                    id: +this.$route.params.id\n                  }));\n                }\n\n                _context2.next = 5;\n                return Promise.all(promises);\n\n              case 5:\n                _yield$Promise$all = _context2.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                res2 = _yield$Promise$all2[1];\n\n                if (!(res2 && res2.success)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.next = 11;\n                return this.transformStateToLocalForm(this.optionMappingState);\n\n              case 11:\n                this.initialForm = cloneDeep(this.form);\n                this.isFetching = false;\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetch() {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }(),\n    transformStateToLocalForm: function () {\n      var _transformStateToLocalForm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {\n        var _this4 = this;\n\n        var result, optionSetRules;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.form.product_type_id = data.product_type_id;\n                _context3.next = 3;\n                return this.fetchOptionsByProductId(data.product_type_id);\n\n              case 3:\n                result = _context3.sent;\n\n                if (result.success) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                this.$toast.open({\n                  type: 'error',\n                  message: result.message || 'Something went wrong. Please try again later'\n                });\n                return _context3.abrupt(\"return\");\n\n              case 7:\n                // find all option_set rules\n                optionSetRules = data.rules.filter(function (rule) {\n                  return rule.column === 'option_set';\n                });\n                this.form.rules = optionSetRules.map(function (optionSetRule) {\n                  var formRule = {\n                    option_set: {\n                      condition: optionSetRule.condition,\n                      target_value: optionSetRule.target_value ? parseInt(optionSetRule.target_value) : null\n                    },\n                    option: {\n                      conditions: '',\n                      values: [],\n                      target_values: []\n                    }\n                  };\n\n                  if (optionSetRule.target_value) {\n                    //now find all option rules attach to this option set rules\n                    var optionIds = _this4.getOptionsWithOptionSetId(parseInt(optionSetRule.target_value)).map(function (option) {\n                      return option.id;\n                    });\n\n                    var optionRules = data.rules.filter(function (rule) {\n                      return rule.column === 'option' && rule.target_value && optionIds.indexOf(parseInt(rule.target_value)) > -1;\n                    });\n                    formRule.option.values = optionRules.map(function (optionRule) {\n                      return optionRule.condition;\n                    });\n                    formRule.option.target_values = optionRules.map(function (optionRule) {\n                      return optionRule.target_value ? parseInt(optionRule.target_value) : null;\n                    });\n                    formRule.option.conditions = formRule.option.values.join(',');\n                  }\n\n                  return formRule;\n                });\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function transformStateToLocalForm(_x2) {\n        return _transformStateToLocalForm.apply(this, arguments);\n      }\n\n      return transformStateToLocalForm;\n    }(),\n    tranformLocalFormToPayload: function tranformLocalFormToPayload() {\n      var payload = {\n        product_type_id: this.form.product_type_id,\n        rules: [],\n        type: types.option,\n        disjunctive: false\n      };\n\n      if (this.mode !== 'new') {\n        payload.id = this.optionMappingState.id;\n      }\n\n      this.form.rules.map(function (rule) {\n        // option set\n        payload.rules.push({\n          column: 'option_set',\n          relation: 'equal',\n          condition: rule.option_set.condition,\n          target_value: String(rule.option_set.target_value)\n        }); // option\n\n        rule.option.values.map(function (value, index) {\n          payload.rules.push({\n            column: 'option',\n            relation: 'equal',\n            condition: value,\n            target_value: String(rule.option.target_values[index])\n          });\n        });\n      });\n      return payload;\n    },\n    discard: function discard() {\n      this.form = cloneDeep(this.initialForm);\n    },\n    showConfirmDelete: function showConfirmDelete() {\n      var _this5 = this;\n\n      this.$dialog.confirm({\n        title: \"Delete option mapping?\",\n        message: \"Are you sure you want to delete this option mapping?\",\n        confirmText: 'Delete',\n        onConfirm: function onConfirm() {\n          return _this5.delete();\n        },\n        type: 'danger'\n      });\n    },\n    save: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var isValid;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.$validator.validateAll();\n\n              case 2:\n                isValid = _context4.sent;\n\n                if (isValid) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 5:\n                this.isSaving = true;\n\n                if (!(this.mode === 'new')) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                _context4.next = 9;\n                return this.create();\n\n              case 9:\n                _context4.next = 13;\n                break;\n\n              case 11:\n                _context4.next = 13;\n                return this.update();\n\n              case 13:\n                this.isSaving = false;\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }(),\n    create: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var payload, response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                payload = this.tranformLocalFormToPayload();\n                _context5.next = 3;\n                return this.createOrUpdateOrderMapping({\n                  type: types.option,\n                  payload: payload\n                });\n\n              case 3:\n                response = _context5.sent;\n\n                if (response.success) {\n                  this.$toast.open({\n                    type: 'success',\n                    message: 'Your option mapping was created'\n                  });\n                  this.$router.push({\n                    name: 'option-mapping-update',\n                    params: {\n                      id: response.id\n                    }\n                  });\n                } else {\n                  this.$toast.open({\n                    type: 'error',\n                    message: response.message || 'Something went wrong. Please try again later'\n                  });\n                }\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function create() {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }(),\n    update: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var payload, response;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                payload = this.tranformLocalFormToPayload();\n                _context6.next = 3;\n                return this.createOrUpdateOrderMapping({\n                  type: types.option,\n                  payload: payload\n                });\n\n              case 3:\n                response = _context6.sent;\n\n                if (!response.success) {\n                  _context6.next = 10;\n                  break;\n                }\n\n                this.$toast.open({\n                  type: 'success',\n                  message: 'Your option mapping was updated'\n                });\n                _context6.next = 8;\n                return this.fetch();\n\n              case 8:\n                _context6.next = 11;\n                break;\n\n              case 10:\n                this.$toast.open({\n                  type: 'error',\n                  message: response.message || 'Something went wrong. Please try again later'\n                });\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function update() {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }(),\n    delete: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.isDeleting = true;\n                _context7.next = 3;\n                return this.deleteOrderMapping({\n                  type: types.option,\n                  id: this.optionMappingState.id\n                });\n\n              case 3:\n                response = _context7.sent;\n\n                if (response.success) {\n                  this.$toast.open({\n                    type: 'success',\n                    message: 'Your option mapping was deleted'\n                  });\n                  this.$router.push({\n                    name: 'option-mapping-list'\n                  });\n                } else {\n                  this.$toast.open({\n                    type: 'error',\n                    message: response.message || 'Something went wrong. Please try again later'\n                  });\n                }\n\n                this.isDeleting = false;\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }),\n  created: function created() {\n    this.fetch();\n  }\n};",null]}