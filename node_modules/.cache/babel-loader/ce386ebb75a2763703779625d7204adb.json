{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/multiselect/multiselectMixin.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/multiselect/multiselectMixin.js","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction isEmpty(opt) {\n  if (opt === 0) return false;\n  if (Array.isArray(opt) && opt.length === 0) return true;\n  return !opt;\n}\n\nfunction not(fun) {\n  return function () {\n    return !fun.apply(void 0, arguments);\n  };\n}\n\nfunction includes(str, query) {\n  /* istanbul ignore else */\n  if (str === undefined) str = 'undefined';\n  if (str === null) str = 'null';\n  if (str === false) str = 'false';\n  var text = str.toString().toLowerCase();\n  return text.indexOf(query.trim()) !== -1;\n}\n\nfunction filterOptions(options, search, label, customLabel) {\n  return options.filter(function (option) {\n    return includes(customLabel(option, label), search);\n  });\n}\n\nfunction stripGroups(options) {\n  return options.filter(function (option) {\n    return !option.$isLabel;\n  });\n}\n\nfunction flattenOptions(values, label) {\n  return function (options) {\n    return options.reduce(function (prev, curr) {\n      /* istanbul ignore else */\n      if (curr[values] && curr[values].length) {\n        prev.push({\n          $groupLabel: curr[label],\n          $isLabel: true\n        });\n        return prev.concat(curr[values]);\n      }\n\n      return prev;\n    }, []);\n  };\n}\n\nfunction filterGroups(search, label, values, groupLabel, customLabel) {\n  return function (groups) {\n    return groups.map(function (group) {\n      var _ref;\n\n      /* istanbul ignore else */\n      if (!group[values]) {\n        console.warn(\"Options passed to vue-multiselect do not contain groups, despite the config.\");\n        return [];\n      }\n\n      var groupOptions = filterOptions(group[values], search, label, customLabel);\n      return groupOptions.length ? (_ref = {}, _defineProperty(_ref, groupLabel, group[groupLabel]), _defineProperty(_ref, values, groupOptions), _ref) : [];\n    });\n  };\n}\n\nvar flow = function flow() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function (x) {\n    return fns.reduce(function (v, f) {\n      return f(v);\n    }, x);\n  };\n};\n\nexport default {\n  data: function data() {\n    return {\n      search: '',\n      isOpen: false,\n      preferredOpenDirection: 'below',\n      optimizedHeight: this.maxHeight\n    };\n  },\n  props: {\n    /**\n     * Decide whether to filter the results based on search query.\n     * Useful for async filtering, where we search through more complex data.\n     * @type {Boolean}\n     */\n    internalSearch: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Array of available options: Objects, Strings or Integers.\n     * If array of objects, visible label will default to option.label.\n     * If `labal` prop is passed, label will equal option['label']\n     * @type {Array}\n     */\n    options: {\n      type: Array,\n      required: true\n    },\n\n    /**\n     * Equivalent to the `multiple` attribute on a `<select>` input.\n     * @default false\n     * @type {Boolean}\n     */\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Presets the selected options value.\n     * @type {Object||Array||String||Integer}\n     */\n    value: {\n      type: null,\n      default: function _default() {\n        return [];\n      }\n    },\n\n    /**\n     * Key to compare objects\n     * @default 'id'\n     * @type {String}\n     */\n    trackBy: {\n      type: String\n    },\n\n    /**\n     * Label to look for in option Object\n     * @default 'label'\n     * @type {String}\n     */\n    label: {\n      type: String\n    },\n\n    /**\n     * Enable/disable search in options\n     * @default true\n     * @type {Boolean}\n     */\n    searchable: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Clear the search input after `)\n     * @default true\n     * @type {Boolean}\n     */\n    clearOnSelect: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Hide already selected options\n     * @default false\n     * @type {Boolean}\n     */\n    hideSelected: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Equivalent to the `placeholder` attribute on a `<select>` input.\n     * @default 'Select option'\n     * @type {String}\n     */\n    placeholder: {\n      type: String,\n      default: 'Select option'\n    },\n\n    /**\n     * Allow to remove all selected values\n     * @default true\n     * @type {Boolean}\n     */\n    allowEmpty: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Reset this.internalValue, this.search after this.internalValue changes.\n     * Useful if want to create a stateless dropdown.\n     * @default false\n     * @type {Boolean}\n     */\n    resetAfter: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Enable/disable closing after selecting an option\n     * @default true\n     * @type {Boolean}\n     */\n    closeOnSelect: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Function to interpolate the custom label\n     * @default false\n     * @type {Function}\n     */\n    customLabel: {\n      type: Function,\n      default: function _default(option, label) {\n        if (isEmpty(option)) return '';\n        return label ? option[label] : option;\n      }\n    },\n\n    /**\n     * Disable / Enable tagging\n     * @default false\n     * @type {Boolean}\n     */\n    taggable: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * String to show when highlighting a potential tag\n     * @default 'Press enter to create a tag'\n     * @type {String}\n     */\n    tagPlaceholder: {\n      type: String,\n      default: 'Press enter to create a tag'\n    },\n\n    /**\n     * By default _new tags will appear above the search results.\n     * Changing to 'bottom' will revert this behaviour\n     * and will proritize the search results\n     * @default 'top'\n     * @type {String}\n     */\n    tagPosition: {\n      type: String,\n      default: 'top'\n    },\n\n    /**\n     * Number of allowed selected options. No limit if 0.\n     * @default 0\n     * @type {Number}\n     */\n    max: {\n      type: [Number, Boolean],\n      default: false\n    },\n\n    /**\n     * Will be passed with all events as second param.\n     * Useful for identifying events origin.\n     * @default null\n     * @type {String|Integer}\n     */\n    id: {\n      default: null\n    },\n\n    /**\n     * Limits the options displayed in the dropdown\n     * to the first X options.\n     * @default 1000\n     * @type {Integer}\n     */\n    optionsLimit: {\n      type: Number,\n      default: 1000\n    },\n\n    /**\n     * Name of the property containing\n     * the group values\n     * @default 1000\n     * @type {String}\n     */\n    groupValues: {\n      type: String\n    },\n\n    /**\n     * Name of the property containing\n     * the group label\n     * @default 1000\n     * @type {String}\n     */\n    groupLabel: {\n      type: String\n    },\n\n    /**\n     * Allow to select all group values\n     * by selecting the group label\n     * @default false\n     * @type {Boolean}\n     */\n    groupSelect: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Array of keyboard keys to block\n     * when selecting\n     * @default 1000\n     * @type {String}\n     */\n    blockKeys: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n\n    /**\n     * Prevent from wiping up the search value\n     * @default false\n     * @type {Boolean}\n     */\n    preserveSearch: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Select 1st options if value is empty\n     * @default false\n     * @type {Boolean}\n     */\n    preselectFirst: {\n      type: Boolean,\n      default: false\n    }\n  },\n  mounted: function mounted() {\n    /* istanbul ignore else */\n    if (!this.multiple && this.max) {\n      console.warn('[Vue-Multiselect warn]: Max prop should not be used when prop Multiple equals false.');\n    }\n\n    if (this.preselectFirst && !this.internalValue.length && this.options.length) {\n      this.select(this.filteredOptions[0]);\n    }\n  },\n  computed: {\n    internalValue: function internalValue() {\n      return this.value || this.value === 0 ? Array.isArray(this.value) ? this.value : [this.value] : [];\n    },\n    filteredOptions: function filteredOptions() {\n      var search = this.search || '';\n      var normalizedSearch = search.toLowerCase().trim();\n      var options = this.options.concat();\n      /* istanbul ignore else */\n\n      if (this.internalSearch) {\n        options = this.groupValues ? this.filterAndFlat(options, normalizedSearch, this.label) : filterOptions(options, normalizedSearch, this.label, this.customLabel);\n      } else {\n        options = this.groupValues ? flattenOptions(this.groupValues, this.groupLabel)(options) : options;\n      }\n\n      options = this.hideSelected ? options.filter(not(this.isSelected)) : options;\n      /* istanbul ignore else */\n\n      if (this.taggable && normalizedSearch.length && !this.isExistingOption(normalizedSearch)) {\n        if (this.tagPosition === 'bottom') {\n          options.push({\n            isTag: true,\n            label: search\n          });\n        } else {\n          options.unshift({\n            isTag: true,\n            label: search\n          });\n        }\n      }\n\n      return options.slice(0, this.optionsLimit);\n    },\n    valueKeys: function valueKeys() {\n      var _this = this;\n\n      if (this.trackBy) {\n        return this.internalValue.map(function (element) {\n          return element[_this.trackBy];\n        });\n      } else {\n        return this.internalValue;\n      }\n    },\n    optionKeys: function optionKeys() {\n      var _this2 = this;\n\n      var options = this.groupValues ? this.flatAndStrip(this.options) : this.options;\n      return options.map(function (element) {\n        return _this2.customLabel(element, _this2.label).toString().toLowerCase();\n      });\n    },\n    currentOptionLabel: function currentOptionLabel() {\n      return this.multiple ? this.searchable ? '' : this.placeholder : this.internalValue.length ? this.getOptionLabel(this.internalValue[0]) : this.searchable ? '' : this.placeholder;\n    }\n  },\n  watch: {\n    internalValue: function internalValue() {\n      /* istanbul ignore else */\n      if (this.resetAfter && this.internalValue.length) {\n        this.search = '';\n        this.$emit('input', this.multiple ? [] : null);\n      }\n    },\n    search: function search() {\n      this.$emit('search-change', this.search, this.id);\n    }\n  },\n  methods: {\n    /**\n     * Returns the internalValue in a way it can be emited to the parent\n     * @returns {Object||Array||String||Integer}\n     */\n    getValue: function getValue() {\n      return this.multiple ? this.internalValue : this.internalValue.length === 0 ? null : this.internalValue[0];\n    },\n\n    /**\n     * Filters and then flattens the options list\n     * @param  {Array}\n     * @returns {Array} returns a filtered and flat options list\n     */\n    filterAndFlat: function filterAndFlat(options, search, label) {\n      return flow(filterGroups(search, label, this.groupValues, this.groupLabel, this.customLabel), flattenOptions(this.groupValues, this.groupLabel))(options);\n    },\n\n    /**\n     * Flattens and then strips the group labels from the options list\n     * @param  {Array}\n     * @returns {Array} returns a flat options list without group labels\n     */\n    flatAndStrip: function flatAndStrip(options) {\n      return flow(flattenOptions(this.groupValues, this.groupLabel), stripGroups)(options);\n    },\n\n    /**\n     * Updates the search value\n     * @param  {String}\n     */\n    updateSearch: function updateSearch(query) {\n      this.search = query;\n    },\n\n    /**\n     * Finds out if the given query is already present\n     * in the available options\n     * @param  {String}\n     * @returns {Boolean} returns true if element is available\n     */\n    isExistingOption: function isExistingOption(query) {\n      return !this.options ? false : this.optionKeys.indexOf(query) > -1;\n    },\n\n    /**\n     * Finds out if the given element is already present\n     * in the result value\n     * @param  {Object||String||Integer} option passed element to check\n     * @returns {Boolean} returns true if element is selected\n     */\n    isSelected: function isSelected(option) {\n      var opt = this.trackBy ? option[this.trackBy] : option;\n      return this.valueKeys.indexOf(opt) > -1;\n    },\n\n    /**\n     * Finds out if the given option is disabled\n     * @param  {Object||String||Integer} option passed element to check\n     * @returns {Boolean} returns true if element is disabled\n     */\n    isOptionDisabled: function isOptionDisabled(option) {\n      return !!option.$isDisabled;\n    },\n\n    /**\n     * Returns empty string when options is null/undefined\n     * Returns tag query if option is tag.\n     * Returns the customLabel() results and casts it to string.\n     *\n     * @param  {Object||String||Integer} Passed option\n     * @returns {Object||String}\n     */\n    getOptionLabel: function getOptionLabel(option) {\n      if (isEmpty(option)) return '';\n      /* istanbul ignore else */\n\n      if (option.isTag) return option.label;\n      /* istanbul ignore else */\n\n      if (option.$isLabel) return option.$groupLabel;\n      var label = this.customLabel(option, this.label);\n      /* istanbul ignore else */\n\n      if (isEmpty(label)) return '';\n      return label;\n    },\n\n    /**\n     * Add the given option to the list of selected options\n     * or sets the option as the selected option.\n     * If option is already selected -> remove it from the results.\n     *\n     * @param  {Object||String||Integer} option to select/deselect\n     * @param  {Boolean} block removing\n     */\n    select: function select(option, key) {\n      /* istanbul ignore else */\n      if (option.$isLabel && this.groupSelect) {\n        this.selectGroup(option);\n        return;\n      }\n\n      if (this.blockKeys.indexOf(key) !== -1 || this.disabled || option.$isDisabled || option.$isLabel) return;\n      /* istanbul ignore else */\n\n      if (this.max && this.multiple && this.internalValue.length === this.max) return;\n      /* istanbul ignore else */\n\n      if (key === 'Tab' && !this.pointerDirty) return;\n\n      if (option.isTag) {\n        this.$emit('tag', option.label, this.id);\n        this.search = '';\n        if (this.closeOnSelect && !this.multiple) this.deactivate();\n      } else {\n        var isSelected = this.isSelected(option);\n\n        if (isSelected) {\n          if (key !== 'Tab') this.removeElement(option);\n          return;\n        }\n\n        this.$emit('select', option, this.id);\n\n        if (this.multiple) {\n          this.$emit('input', this.internalValue.concat([option]), this.id);\n        } else {\n          this.$emit('input', option, this.id);\n        }\n        /* istanbul ignore else */\n\n\n        if (this.clearOnSelect) this.search = '';\n      }\n      /* istanbul ignore else */\n\n\n      if (this.closeOnSelect) this.deactivate();\n    },\n\n    /**\n     * Add the given group options to the list of selected options\n     * If all group optiona are already selected -> remove it from the results.\n     *\n     * @param  {Object||String||Integer} group to select/deselect\n     */\n    selectGroup: function selectGroup(selectedGroup) {\n      var _this3 = this;\n\n      var group = this.options.find(function (option) {\n        return option[_this3.groupLabel] === selectedGroup.$groupLabel;\n      });\n      if (!group) return;\n\n      if (this.wholeGroupSelected(group)) {\n        this.$emit('remove', group[this.groupValues], this.id);\n        var newValue = this.internalValue.filter(function (option) {\n          return group[_this3.groupValues].indexOf(option) === -1;\n        });\n        this.$emit('input', newValue, this.id);\n      } else {\n        var optionsToAdd = group[this.groupValues].filter(function (option) {\n          return !(_this3.isOptionDisabled(option) || _this3.isSelected(option));\n        });\n        this.$emit('select', optionsToAdd, this.id);\n        this.$emit('input', this.internalValue.concat(optionsToAdd), this.id);\n      }\n    },\n\n    /**\n     * Helper to identify if all values in a group are selected\n     *\n     * @param {Object} group to validated selected values against\n     */\n    wholeGroupSelected: function wholeGroupSelected(group) {\n      var _this4 = this;\n\n      return group[this.groupValues].every(function (option) {\n        return _this4.isSelected(option) || _this4.isOptionDisabled(option);\n      });\n    },\n\n    /**\n     * Helper to identify if all values in a group are disabled\n     *\n     * @param {Object} group to check for disabled values\n     */\n    wholeGroupDisabled: function wholeGroupDisabled(group) {\n      return group[this.groupValues].every(this.isOptionDisabled);\n    },\n\n    /**\n     * Removes the given option from the selected options.\n     * Additionally checks this.allowEmpty prop if option can be removed when\n     * it is the last selected option.\n     *\n     * @param  {type} option description\n     * @returns {type}        description\n     */\n    removeElement: function removeElement(option) {\n      var shouldClose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      /* istanbul ignore else */\n      if (this.disabled) return;\n      /* istanbul ignore else */\n\n      if (option.$isDisabled) return;\n      /* istanbul ignore else */\n\n      if (!this.allowEmpty && this.internalValue.length <= 1) {\n        this.deactivate();\n        return;\n      }\n\n      var index = _typeof(option) === 'object' ? this.valueKeys.indexOf(option[this.trackBy]) : this.valueKeys.indexOf(option);\n      this.$emit('remove', option, this.id);\n\n      if (this.multiple) {\n        var newValue = this.internalValue.slice(0, index).concat(this.internalValue.slice(index + 1));\n        this.$emit('input', newValue, this.id);\n      } else {\n        this.$emit('input', null, this.id);\n      }\n      /* istanbul ignore else */\n\n\n      if (this.closeOnSelect && shouldClose) this.deactivate();\n    },\n\n    /**\n     * Calls this.removeElement() with the last element\n     * from this.internalValue (selected element Array)\n     *\n     * @fires this#removeElement\n     */\n    removeLastElement: function removeLastElement() {\n      /* istanbul ignore else */\n      if (this.blockKeys.indexOf('Delete') !== -1) return;\n      /* istanbul ignore else */\n\n      if (this.search.length === 0 && Array.isArray(this.internalValue) && this.internalValue.length) {\n        this.removeElement(this.internalValue[this.internalValue.length - 1], false);\n      }\n    },\n\n    /**\n     * Opens the multiselect’s dropdown.\n     * Sets this.isOpen to TRUE\n     */\n    activate: function activate() {\n      var _this5 = this;\n\n      /* istanbul ignore else */\n      if (this.isOpen || this.disabled) return;\n      this.adjustPosition();\n      /* istanbul ignore else  */\n\n      if (this.groupValues && this.pointer === 0 && this.filteredOptions.length) {\n        this.pointer = 1;\n      }\n\n      this.isOpen = true;\n      /* istanbul ignore else  */\n\n      if (this.searchable) {\n        if (!this.preserveSearch) this.search = '';\n        this.$nextTick(function () {\n          return _this5.$refs.search && _this5.$refs.search.focus();\n        });\n      } else {\n        this.$el.focus();\n      }\n\n      this.$emit('open', this.id);\n    },\n\n    /**\n     * Closes the multiselect’s dropdown.\n     * Sets this.isOpen to FALSE\n     */\n    deactivate: function deactivate() {\n      /* istanbul ignore else */\n      if (!this.isOpen) return;\n      this.isOpen = false;\n      /* istanbul ignore else  */\n\n      if (this.searchable) {\n        this.$refs.search && this.$refs.search.blur();\n      } else {\n        this.$el.blur();\n      }\n\n      if (!this.preserveSearch) this.search = '';\n      this.$emit('close', this.getValue(), this.id);\n    },\n\n    /**\n     * Call this.activate() or this.deactivate()\n     * depending on this.isOpen value.\n     *\n     * @fires this#activate || this#deactivate\n     * @property {Boolean} isOpen indicates if dropdown is open\n     */\n    toggle: function toggle() {\n      this.isOpen ? this.deactivate() : this.activate();\n    },\n\n    /**\n     * Updates the hasEnoughSpace variable used for\n     * detecting where to expand the dropdown\n     */\n    adjustPosition: function adjustPosition() {\n      if (typeof window === 'undefined') return;\n      var spaceAbove = this.$el.getBoundingClientRect().top;\n      var spaceBelow = window.innerHeight - this.$el.getBoundingClientRect().bottom;\n      var hasEnoughSpaceBelow = spaceBelow > this.maxHeight;\n\n      if (hasEnoughSpaceBelow || spaceBelow > spaceAbove || this.openDirection === 'below' || this.openDirection === 'bottom') {\n        this.preferredOpenDirection = 'below';\n        this.optimizedHeight = Math.min(spaceBelow - 40, this.maxHeight);\n      } else {\n        this.preferredOpenDirection = 'above';\n        this.optimizedHeight = Math.min(spaceAbove - 40, this.maxHeight);\n      }\n    }\n  }\n};",{"version":3,"sources":["/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/multiselect/multiselectMixin.js"],"names":["isEmpty","opt","Array","isArray","length","not","fun","includes","str","query","undefined","text","toString","toLowerCase","indexOf","trim","filterOptions","options","search","label","customLabel","filter","option","stripGroups","$isLabel","flattenOptions","values","reduce","prev","curr","push","$groupLabel","concat","filterGroups","groupLabel","groups","map","group","console","warn","groupOptions","flow","fns","x","v","f","data","isOpen","preferredOpenDirection","optimizedHeight","maxHeight","props","internalSearch","type","Boolean","default","required","multiple","value","trackBy","String","searchable","clearOnSelect","hideSelected","placeholder","allowEmpty","resetAfter","closeOnSelect","Function","taggable","tagPlaceholder","tagPosition","max","Number","id","optionsLimit","groupValues","groupSelect","blockKeys","preserveSearch","preselectFirst","mounted","internalValue","select","filteredOptions","computed","normalizedSearch","filterAndFlat","isSelected","isExistingOption","isTag","unshift","slice","valueKeys","element","optionKeys","flatAndStrip","currentOptionLabel","getOptionLabel","watch","$emit","methods","getValue","updateSearch","isOptionDisabled","$isDisabled","key","selectGroup","disabled","pointerDirty","deactivate","removeElement","selectedGroup","find","wholeGroupSelected","newValue","optionsToAdd","every","wholeGroupDisabled","shouldClose","index","removeLastElement","activate","adjustPosition","pointer","$nextTick","$refs","focus","$el","blur","toggle","window","spaceAbove","getBoundingClientRect","top","spaceBelow","innerHeight","bottom","hasEnoughSpaceBelow","openDirection","Math","min"],"mappings":"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","sourcesContent":["function isEmpty(opt) {\n  if (opt === 0) return false\n  if (Array.isArray(opt) && opt.length === 0) return true\n  return !opt\n}\n\nfunction not(fun) {\n  return (...params) => !fun(...params)\n}\n\nfunction includes(str, query) {\n  /* istanbul ignore else */\n  if (str === undefined) str = 'undefined'\n  if (str === null) str = 'null'\n  if (str === false) str = 'false'\n  const text = str.toString().toLowerCase()\n  return text.indexOf(query.trim()) !== -1\n}\n\nfunction filterOptions(options, search, label, customLabel) {\n  return options.filter((option) =>\n    includes(customLabel(option, label), search)\n  )\n}\n\nfunction stripGroups(options) {\n  return options.filter((option) => !option.$isLabel)\n}\n\nfunction flattenOptions(values, label) {\n  return (options) =>\n    options.reduce((prev, curr) => {\n      /* istanbul ignore else */\n      if (curr[values] && curr[values].length) {\n        prev.push({\n          $groupLabel: curr[label],\n          $isLabel: true,\n        })\n        return prev.concat(curr[values])\n      }\n      return prev\n    }, [])\n}\n\nfunction filterGroups(search, label, values, groupLabel, customLabel) {\n  return (groups) =>\n    groups.map((group) => {\n      /* istanbul ignore else */\n      if (!group[values]) {\n        console.warn(\n          `Options passed to vue-multiselect do not contain groups, despite the config.`\n        )\n        return []\n      }\n      const groupOptions = filterOptions(\n        group[values],\n        search,\n        label,\n        customLabel\n      )\n\n      return groupOptions.length\n        ? {\n            [groupLabel]: group[groupLabel],\n            [values]: groupOptions,\n          }\n        : []\n    })\n}\n\nconst flow = (...fns) => (x) => fns.reduce((v, f) => f(v), x)\n\nexport default {\n  data() {\n    return {\n      search: '',\n      isOpen: false,\n      preferredOpenDirection: 'below',\n      optimizedHeight: this.maxHeight,\n    }\n  },\n  props: {\n    /**\n     * Decide whether to filter the results based on search query.\n     * Useful for async filtering, where we search through more complex data.\n     * @type {Boolean}\n     */\n    internalSearch: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * Array of available options: Objects, Strings or Integers.\n     * If array of objects, visible label will default to option.label.\n     * If `labal` prop is passed, label will equal option['label']\n     * @type {Array}\n     */\n    options: {\n      type: Array,\n      required: true,\n    },\n    /**\n     * Equivalent to the `multiple` attribute on a `<select>` input.\n     * @default false\n     * @type {Boolean}\n     */\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * Presets the selected options value.\n     * @type {Object||Array||String||Integer}\n     */\n    value: {\n      type: null,\n      default() {\n        return []\n      },\n    },\n    /**\n     * Key to compare objects\n     * @default 'id'\n     * @type {String}\n     */\n    trackBy: {\n      type: String,\n    },\n    /**\n     * Label to look for in option Object\n     * @default 'label'\n     * @type {String}\n     */\n    label: {\n      type: String,\n    },\n    /**\n     * Enable/disable search in options\n     * @default true\n     * @type {Boolean}\n     */\n    searchable: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * Clear the search input after `)\n     * @default true\n     * @type {Boolean}\n     */\n    clearOnSelect: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * Hide already selected options\n     * @default false\n     * @type {Boolean}\n     */\n    hideSelected: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * Equivalent to the `placeholder` attribute on a `<select>` input.\n     * @default 'Select option'\n     * @type {String}\n     */\n    placeholder: {\n      type: String,\n      default: 'Select option',\n    },\n    /**\n     * Allow to remove all selected values\n     * @default true\n     * @type {Boolean}\n     */\n    allowEmpty: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * Reset this.internalValue, this.search after this.internalValue changes.\n     * Useful if want to create a stateless dropdown.\n     * @default false\n     * @type {Boolean}\n     */\n    resetAfter: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * Enable/disable closing after selecting an option\n     * @default true\n     * @type {Boolean}\n     */\n    closeOnSelect: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * Function to interpolate the custom label\n     * @default false\n     * @type {Function}\n     */\n    customLabel: {\n      type: Function,\n      default(option, label) {\n        if (isEmpty(option)) return ''\n        return label ? option[label] : option\n      },\n    },\n    /**\n     * Disable / Enable tagging\n     * @default false\n     * @type {Boolean}\n     */\n    taggable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * String to show when highlighting a potential tag\n     * @default 'Press enter to create a tag'\n     * @type {String}\n     */\n    tagPlaceholder: {\n      type: String,\n      default: 'Press enter to create a tag',\n    },\n    /**\n     * By default _new tags will appear above the search results.\n     * Changing to 'bottom' will revert this behaviour\n     * and will proritize the search results\n     * @default 'top'\n     * @type {String}\n     */\n    tagPosition: {\n      type: String,\n      default: 'top',\n    },\n    /**\n     * Number of allowed selected options. No limit if 0.\n     * @default 0\n     * @type {Number}\n     */\n    max: {\n      type: [Number, Boolean],\n      default: false,\n    },\n    /**\n     * Will be passed with all events as second param.\n     * Useful for identifying events origin.\n     * @default null\n     * @type {String|Integer}\n     */\n    id: {\n      default: null,\n    },\n    /**\n     * Limits the options displayed in the dropdown\n     * to the first X options.\n     * @default 1000\n     * @type {Integer}\n     */\n    optionsLimit: {\n      type: Number,\n      default: 1000,\n    },\n    /**\n     * Name of the property containing\n     * the group values\n     * @default 1000\n     * @type {String}\n     */\n    groupValues: {\n      type: String,\n    },\n    /**\n     * Name of the property containing\n     * the group label\n     * @default 1000\n     * @type {String}\n     */\n    groupLabel: {\n      type: String,\n    },\n    /**\n     * Allow to select all group values\n     * by selecting the group label\n     * @default false\n     * @type {Boolean}\n     */\n    groupSelect: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * Array of keyboard keys to block\n     * when selecting\n     * @default 1000\n     * @type {String}\n     */\n    blockKeys: {\n      type: Array,\n      default() {\n        return []\n      },\n    },\n    /**\n     * Prevent from wiping up the search value\n     * @default false\n     * @type {Boolean}\n     */\n    preserveSearch: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * Select 1st options if value is empty\n     * @default false\n     * @type {Boolean}\n     */\n    preselectFirst: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  mounted() {\n    /* istanbul ignore else */\n    if (!this.multiple && this.max) {\n      console.warn(\n        '[Vue-Multiselect warn]: Max prop should not be used when prop Multiple equals false.'\n      )\n    }\n    if (\n      this.preselectFirst &&\n      !this.internalValue.length &&\n      this.options.length\n    ) {\n      this.select(this.filteredOptions[0])\n    }\n  },\n  computed: {\n    internalValue() {\n      return this.value || this.value === 0\n        ? Array.isArray(this.value)\n          ? this.value\n          : [this.value]\n        : []\n    },\n    filteredOptions() {\n      const search = this.search || ''\n      const normalizedSearch = search.toLowerCase().trim()\n\n      let options = this.options.concat()\n\n      /* istanbul ignore else */\n      if (this.internalSearch) {\n        options = this.groupValues\n          ? this.filterAndFlat(options, normalizedSearch, this.label)\n          : filterOptions(\n              options,\n              normalizedSearch,\n              this.label,\n              this.customLabel\n            )\n      } else {\n        options = this.groupValues\n          ? flattenOptions(this.groupValues, this.groupLabel)(options)\n          : options\n      }\n\n      options = this.hideSelected\n        ? options.filter(not(this.isSelected))\n        : options\n\n      /* istanbul ignore else */\n      if (\n        this.taggable &&\n        normalizedSearch.length &&\n        !this.isExistingOption(normalizedSearch)\n      ) {\n        if (this.tagPosition === 'bottom') {\n          options.push({ isTag: true, label: search })\n        } else {\n          options.unshift({ isTag: true, label: search })\n        }\n      }\n\n      return options.slice(0, this.optionsLimit)\n    },\n    valueKeys() {\n      if (this.trackBy) {\n        return this.internalValue.map((element) => element[this.trackBy])\n      } else {\n        return this.internalValue\n      }\n    },\n    optionKeys() {\n      const options = this.groupValues\n        ? this.flatAndStrip(this.options)\n        : this.options\n      return options.map((element) =>\n        this.customLabel(element, this.label)\n          .toString()\n          .toLowerCase()\n      )\n    },\n    currentOptionLabel() {\n      return this.multiple\n        ? this.searchable\n          ? ''\n          : this.placeholder\n        : this.internalValue.length\n        ? this.getOptionLabel(this.internalValue[0])\n        : this.searchable\n        ? ''\n        : this.placeholder\n    },\n  },\n  watch: {\n    internalValue() {\n      /* istanbul ignore else */\n      if (this.resetAfter && this.internalValue.length) {\n        this.search = ''\n        this.$emit('input', this.multiple ? [] : null)\n      }\n    },\n    search() {\n      this.$emit('search-change', this.search, this.id)\n    },\n  },\n  methods: {\n    /**\n     * Returns the internalValue in a way it can be emited to the parent\n     * @returns {Object||Array||String||Integer}\n     */\n    getValue() {\n      return this.multiple\n        ? this.internalValue\n        : this.internalValue.length === 0\n        ? null\n        : this.internalValue[0]\n    },\n    /**\n     * Filters and then flattens the options list\n     * @param  {Array}\n     * @returns {Array} returns a filtered and flat options list\n     */\n    filterAndFlat(options, search, label) {\n      return flow(\n        filterGroups(\n          search,\n          label,\n          this.groupValues,\n          this.groupLabel,\n          this.customLabel\n        ),\n        flattenOptions(this.groupValues, this.groupLabel)\n      )(options)\n    },\n    /**\n     * Flattens and then strips the group labels from the options list\n     * @param  {Array}\n     * @returns {Array} returns a flat options list without group labels\n     */\n    flatAndStrip(options) {\n      return flow(\n        flattenOptions(this.groupValues, this.groupLabel),\n        stripGroups\n      )(options)\n    },\n    /**\n     * Updates the search value\n     * @param  {String}\n     */\n    updateSearch(query) {\n      this.search = query\n    },\n    /**\n     * Finds out if the given query is already present\n     * in the available options\n     * @param  {String}\n     * @returns {Boolean} returns true if element is available\n     */\n    isExistingOption(query) {\n      return !this.options ? false : this.optionKeys.indexOf(query) > -1\n    },\n    /**\n     * Finds out if the given element is already present\n     * in the result value\n     * @param  {Object||String||Integer} option passed element to check\n     * @returns {Boolean} returns true if element is selected\n     */\n    isSelected(option) {\n      const opt = this.trackBy ? option[this.trackBy] : option\n      return this.valueKeys.indexOf(opt) > -1\n    },\n    /**\n     * Finds out if the given option is disabled\n     * @param  {Object||String||Integer} option passed element to check\n     * @returns {Boolean} returns true if element is disabled\n     */\n    isOptionDisabled(option) {\n      return !!option.$isDisabled\n    },\n    /**\n     * Returns empty string when options is null/undefined\n     * Returns tag query if option is tag.\n     * Returns the customLabel() results and casts it to string.\n     *\n     * @param  {Object||String||Integer} Passed option\n     * @returns {Object||String}\n     */\n    getOptionLabel(option) {\n      if (isEmpty(option)) return ''\n      /* istanbul ignore else */\n      if (option.isTag) return option.label\n      /* istanbul ignore else */\n      if (option.$isLabel) return option.$groupLabel\n\n      let label = this.customLabel(option, this.label)\n      /* istanbul ignore else */\n      if (isEmpty(label)) return ''\n      return label\n    },\n    /**\n     * Add the given option to the list of selected options\n     * or sets the option as the selected option.\n     * If option is already selected -> remove it from the results.\n     *\n     * @param  {Object||String||Integer} option to select/deselect\n     * @param  {Boolean} block removing\n     */\n    select(option, key) {\n      /* istanbul ignore else */\n      if (option.$isLabel && this.groupSelect) {\n        this.selectGroup(option)\n        return\n      }\n      if (\n        this.blockKeys.indexOf(key) !== -1 ||\n        this.disabled ||\n        option.$isDisabled ||\n        option.$isLabel\n      )\n        return\n      /* istanbul ignore else */\n      if (this.max && this.multiple && this.internalValue.length === this.max)\n        return\n      /* istanbul ignore else */\n      if (key === 'Tab' && !this.pointerDirty) return\n      if (option.isTag) {\n        this.$emit('tag', option.label, this.id)\n        this.search = ''\n        if (this.closeOnSelect && !this.multiple) this.deactivate()\n      } else {\n        const isSelected = this.isSelected(option)\n\n        if (isSelected) {\n          if (key !== 'Tab') this.removeElement(option)\n          return\n        }\n\n        this.$emit('select', option, this.id)\n\n        if (this.multiple) {\n          this.$emit('input', this.internalValue.concat([option]), this.id)\n        } else {\n          this.$emit('input', option, this.id)\n        }\n\n        /* istanbul ignore else */\n        if (this.clearOnSelect) this.search = ''\n      }\n      /* istanbul ignore else */\n      if (this.closeOnSelect) this.deactivate()\n    },\n    /**\n     * Add the given group options to the list of selected options\n     * If all group optiona are already selected -> remove it from the results.\n     *\n     * @param  {Object||String||Integer} group to select/deselect\n     */\n    selectGroup(selectedGroup) {\n      const group = this.options.find((option) => {\n        return option[this.groupLabel] === selectedGroup.$groupLabel\n      })\n\n      if (!group) return\n\n      if (this.wholeGroupSelected(group)) {\n        this.$emit('remove', group[this.groupValues], this.id)\n\n        const newValue = this.internalValue.filter(\n          (option) => group[this.groupValues].indexOf(option) === -1\n        )\n\n        this.$emit('input', newValue, this.id)\n      } else {\n        const optionsToAdd = group[this.groupValues].filter(\n          (option) =>\n            !(this.isOptionDisabled(option) || this.isSelected(option))\n        )\n\n        this.$emit('select', optionsToAdd, this.id)\n        this.$emit('input', this.internalValue.concat(optionsToAdd), this.id)\n      }\n    },\n    /**\n     * Helper to identify if all values in a group are selected\n     *\n     * @param {Object} group to validated selected values against\n     */\n    wholeGroupSelected(group) {\n      return group[this.groupValues].every(\n        (option) => this.isSelected(option) || this.isOptionDisabled(option)\n      )\n    },\n    /**\n     * Helper to identify if all values in a group are disabled\n     *\n     * @param {Object} group to check for disabled values\n     */\n    wholeGroupDisabled(group) {\n      return group[this.groupValues].every(this.isOptionDisabled)\n    },\n    /**\n     * Removes the given option from the selected options.\n     * Additionally checks this.allowEmpty prop if option can be removed when\n     * it is the last selected option.\n     *\n     * @param  {type} option description\n     * @returns {type}        description\n     */\n    removeElement(option, shouldClose = true) {\n      /* istanbul ignore else */\n      if (this.disabled) return\n      /* istanbul ignore else */\n      if (option.$isDisabled) return\n      /* istanbul ignore else */\n      if (!this.allowEmpty && this.internalValue.length <= 1) {\n        this.deactivate()\n        return\n      }\n\n      const index =\n        typeof option === 'object'\n          ? this.valueKeys.indexOf(option[this.trackBy])\n          : this.valueKeys.indexOf(option)\n\n      this.$emit('remove', option, this.id)\n      if (this.multiple) {\n        const newValue = this.internalValue\n          .slice(0, index)\n          .concat(this.internalValue.slice(index + 1))\n        this.$emit('input', newValue, this.id)\n      } else {\n        this.$emit('input', null, this.id)\n      }\n\n      /* istanbul ignore else */\n      if (this.closeOnSelect && shouldClose) this.deactivate()\n    },\n    /**\n     * Calls this.removeElement() with the last element\n     * from this.internalValue (selected element Array)\n     *\n     * @fires this#removeElement\n     */\n    removeLastElement() {\n      /* istanbul ignore else */\n      if (this.blockKeys.indexOf('Delete') !== -1) return\n      /* istanbul ignore else */\n      if (\n        this.search.length === 0 &&\n        Array.isArray(this.internalValue) &&\n        this.internalValue.length\n      ) {\n        this.removeElement(\n          this.internalValue[this.internalValue.length - 1],\n          false\n        )\n      }\n    },\n    /**\n     * Opens the multiselect’s dropdown.\n     * Sets this.isOpen to TRUE\n     */\n    activate() {\n      /* istanbul ignore else */\n      if (this.isOpen || this.disabled) return\n\n      this.adjustPosition()\n      /* istanbul ignore else  */\n      if (\n        this.groupValues &&\n        this.pointer === 0 &&\n        this.filteredOptions.length\n      ) {\n        this.pointer = 1\n      }\n\n      this.isOpen = true\n      /* istanbul ignore else  */\n      if (this.searchable) {\n        if (!this.preserveSearch) this.search = ''\n        this.$nextTick(() => this.$refs.search && this.$refs.search.focus())\n      } else {\n        this.$el.focus()\n      }\n      this.$emit('open', this.id)\n    },\n    /**\n     * Closes the multiselect’s dropdown.\n     * Sets this.isOpen to FALSE\n     */\n    deactivate() {\n      /* istanbul ignore else */\n      if (!this.isOpen) return\n\n      this.isOpen = false\n      /* istanbul ignore else  */\n      if (this.searchable) {\n        this.$refs.search && this.$refs.search.blur()\n      } else {\n        this.$el.blur()\n      }\n      if (!this.preserveSearch) this.search = ''\n      this.$emit('close', this.getValue(), this.id)\n    },\n    /**\n     * Call this.activate() or this.deactivate()\n     * depending on this.isOpen value.\n     *\n     * @fires this#activate || this#deactivate\n     * @property {Boolean} isOpen indicates if dropdown is open\n     */\n    toggle() {\n      this.isOpen ? this.deactivate() : this.activate()\n    },\n    /**\n     * Updates the hasEnoughSpace variable used for\n     * detecting where to expand the dropdown\n     */\n    adjustPosition() {\n      if (typeof window === 'undefined') return\n\n      const spaceAbove = this.$el.getBoundingClientRect().top\n      const spaceBelow =\n        window.innerHeight - this.$el.getBoundingClientRect().bottom\n      const hasEnoughSpaceBelow = spaceBelow > this.maxHeight\n\n      if (\n        hasEnoughSpaceBelow ||\n        spaceBelow > spaceAbove ||\n        this.openDirection === 'below' ||\n        this.openDirection === 'bottom'\n      ) {\n        this.preferredOpenDirection = 'below'\n        this.optimizedHeight = Math.min(spaceBelow - 40, this.maxHeight)\n      } else {\n        this.preferredOpenDirection = 'above'\n        this.optimizedHeight = Math.min(spaceAbove - 40, this.maxHeight)\n      }\n    },\n  },\n}\n"]}]}