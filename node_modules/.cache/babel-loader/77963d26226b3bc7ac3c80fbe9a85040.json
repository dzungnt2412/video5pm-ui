{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/fulfillment/store/index.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/fulfillment/store/index.js","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nvar _mutations;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport api from '../api'; // Constant types\n\nvar FETCH_FULFILLMENTS = 'fetchFulfillments';\nvar COUNT_FULFILLMENTS = 'countFulfillments';\nvar EXPORT_FULFILLMENTS = 'exportFulfillments';\nexport var state = {\n  fulfillments: [],\n  count: 0,\n  download: {}\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, FETCH_FULFILLMENTS, function (state, payload) {\n  state.fulfillments = payload;\n}), _defineProperty(_mutations, COUNT_FULFILLMENTS, function (state, payload) {\n  state.count = payload;\n}), _defineProperty(_mutations, EXPORT_FULFILLMENTS, function (state, payload) {\n  state.download = payload;\n}), _mutations);\nexport var actions = {\n  fetchFulfillments: function () {\n    var _fetchFulfillments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, payload) {\n      var commit, success, message, _yield$Promise$all, _yield$Promise$all2, list, count;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              success = true;\n              message = '';\n              _context.next = 5;\n              return Promise.all([api.fetchFulfillments(payload), api.countFulfillments(payload)]);\n\n            case 5:\n              _yield$Promise$all = _context.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              list = _yield$Promise$all2[0];\n              count = _yield$Promise$all2[1];\n\n              if (!list || list.error || !count) {\n                list = {\n                  fulfillments: []\n                };\n                count = {\n                  count: 0\n                };\n                success = false;\n                message = list.errorMessage || '';\n              }\n\n              commit(FETCH_FULFILLMENTS, list.fulfillments);\n              commit(COUNT_FULFILLMENTS, count.count);\n              return _context.abrupt(\"return\", {\n                success: success,\n                message: message,\n                items: list.fulfillments\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function fetchFulfillments(_x, _x2) {\n      return _fetchFulfillments.apply(this, arguments);\n    }\n\n    return fetchFulfillments;\n  }(),\n  exportFulfillments: function () {\n    var _exportFulfillments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2, payload) {\n      var commit, success, message, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              success = true;\n              message = '';\n              _context2.next = 5;\n              return api.exportFulfillments(payload);\n\n            case 5:\n              response = _context2.sent;\n\n              if (!response || response.error) {\n                success = false;\n                message = response.errorMessage || response.message || '';\n              }\n\n              commit(EXPORT_FULFILLMENTS, response);\n              return _context2.abrupt(\"return\", {\n                success: success,\n                message: message,\n                queue: response.queue,\n                url: response.download\n              });\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function exportFulfillments(_x3, _x4) {\n      return _exportFulfillments.apply(this, arguments);\n    }\n\n    return exportFulfillments;\n  }()\n};",{"version":3,"sources":["/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/fulfillment/store/index.js"],"names":["api","FETCH_FULFILLMENTS","COUNT_FULFILLMENTS","EXPORT_FULFILLMENTS","state","fulfillments","count","download","mutations","payload","actions","fetchFulfillments","commit","success","message","Promise","all","countFulfillments","list","error","errorMessage","items","exportFulfillments","response","queue","url"],"mappings":"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","sourcesContent":["import api from '../api'\n\n// Constant types\nconst FETCH_FULFILLMENTS = 'fetchFulfillments'\nconst COUNT_FULFILLMENTS = 'countFulfillments'\nconst EXPORT_FULFILLMENTS = 'exportFulfillments'\n\nexport const state = {\n  fulfillments: [],\n  count: 0,\n  download: {},\n}\n\nexport const mutations = {\n  [FETCH_FULFILLMENTS](state, payload) {\n    state.fulfillments = payload\n  },\n  [COUNT_FULFILLMENTS](state, payload) {\n    state.count = payload\n  },\n  [EXPORT_FULFILLMENTS](state, payload) {\n    state.download = payload\n  },\n}\n\nexport const actions = {\n  async fetchFulfillments({ commit }, payload) {\n    let success = true\n    let message = ''\n    let [list, count] = await Promise.all([\n      api.fetchFulfillments(payload),\n      api.countFulfillments(payload),\n    ])\n\n    if (!list || list.error || !count) {\n      list = {\n        fulfillments: [],\n      }\n      count = { count: 0 }\n      success = false\n      message = list.errorMessage || ''\n    }\n\n    commit(FETCH_FULFILLMENTS, list.fulfillments)\n    commit(COUNT_FULFILLMENTS, count.count)\n\n    return { success, message, items: list.fulfillments }\n  },\n  async exportFulfillments({ commit }, payload) {\n    let success = true\n    let message = ''\n    let response = await api.exportFulfillments(payload)\n    if (!response || response.error) {\n      success = false\n      message = response.errorMessage || response.message || ''\n    }\n\n    commit(EXPORT_FULFILLMENTS, response)\n\n    return {\n      success,\n      message,\n      queue: response.queue,\n      url: response.download,\n    }\n  },\n}\n"]}]}