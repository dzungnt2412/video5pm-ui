{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/shared/store/index.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/shared/store/index.js","mtime":1604203852925},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1597736267502}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nvar _mutations;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport api from '../api';\nimport countries from '../data/countries';\nimport shippings from '../data/shippings';\nimport union from 'lodash/union';\nexport var FETCH_STATISTIC_TOTAL_SALES = 'fetchStatisticTotalSales';\nexport var FETCH_STATISTIC_TOTAL_USERS = 'fetchStatisticTotalUsers';\nexport var FETCH_USERS_BY_ROLE = 'fetchUsersByRole';\nexport var COUNT_USERS_BY_ROLE = 'countUsersByRole';\nexport var FETCH_USERS_BY_REF = 'fetchUsersByRef';\nexport var FETCH_PRODUCT_TYPES = 'fetchProductTypes';\nexport var FETCH_ALL_PRODUCT_BASES = 'fetchAllProductBases';\nexport var FETCH_COUNTRIES = 'fetchCountries';\nexport var FETCH_SHOPS = 'fetchShops';\nexport var FETCH_COUNT_SHOP = 'fetchCountShop';\nexport var FETCH_PROVIDERS = 'fetchProviders';\nexport var FETCH_SHIPPING_METHOS = 'fetchShippingMethos';\nexport var FETCH_NOTIFICATIONS = 'fetchNotifications';\nexport var PUSH_NOTIFICATION = 'pushNotification';\nexport var COUNT_NOTIFICATIONS = 'countNotifications';\nexport var COUNT_NOTIFICATIONS_UNREAD = 'countNotificationsUnread';\nexport var READ_NOTIFICATIONS = 'readNotifications';\nexport var SHOW_NOTIFICATION_MESSAGE = 'showNotificationMessage';\nexport var state = {\n  shippings: {},\n  statisticTotalSales: 0,\n  statisticTotalUsers: 0,\n  users: [],\n  countUsers: 0,\n  usersRef: [],\n  productTypes: [],\n  productBases: [],\n  countries: [],\n  shops: [],\n  countShop: 0,\n  providers: [],\n  notifications: [],\n  countNoti: 0,\n  countNotiUnread: 0,\n  notificationMessage: '',\n  notificationLabel: ''\n};\nexport var getters = {\n  getShippingMethodTitle: function getShippingMethodTitle(state) {\n    return function (code) {\n      return state.shippings[code] | '';\n    };\n  },\n  getListIDNotificationUnread: function getListIDNotificationUnread(state) {\n    return state.notifications.reduce(function (ids, item) {\n      if (item.status === 'unread') {\n        ids.push(item.id);\n      }\n\n      return ids;\n    }, []);\n  }\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, FETCH_STATISTIC_TOTAL_SALES, function (state, payload) {\n  state.statisticTotalSales = payload;\n}), _defineProperty(_mutations, FETCH_STATISTIC_TOTAL_USERS, function (state, payload) {\n  state.statisticTotalUsers = payload;\n}), _defineProperty(_mutations, FETCH_USERS_BY_ROLE, function (state, payload) {\n  state.users = payload;\n}), _defineProperty(_mutations, COUNT_USERS_BY_ROLE, function (state, payload) {\n  state.countUsers = payload;\n}), _defineProperty(_mutations, FETCH_USERS_BY_REF, function (state, payload) {\n  state.usersRef = payload;\n}), _defineProperty(_mutations, FETCH_PRODUCT_TYPES, function (state, payload) {\n  state.productTypes = payload;\n}), _defineProperty(_mutations, FETCH_ALL_PRODUCT_BASES, function (state, payload) {\n  state.productBases = payload;\n}), _defineProperty(_mutations, FETCH_COUNTRIES, function (state, payload) {\n  state.countries = payload;\n}), _defineProperty(_mutations, FETCH_SHOPS, function (state, payload) {\n  state.shops = payload;\n}), _defineProperty(_mutations, FETCH_COUNT_SHOP, function (state, payload) {\n  state.countShop = payload;\n}), _defineProperty(_mutations, FETCH_PROVIDERS, function (state, payload) {\n  state.providers = payload;\n}), _defineProperty(_mutations, FETCH_SHIPPING_METHOS, function (state, payload) {\n  state.shippings = payload;\n}), _defineProperty(_mutations, PUSH_NOTIFICATION, function (state, payload) {\n  state.countNotiUnread++;\n  state.notifications.unshift(payload);\n}), _defineProperty(_mutations, FETCH_NOTIFICATIONS, function (state, payload) {\n  state.notifications = state.notifications.concat(payload);\n}), _defineProperty(_mutations, COUNT_NOTIFICATIONS, function (state, payload) {\n  state.countNoti = payload;\n}), _defineProperty(_mutations, COUNT_NOTIFICATIONS_UNREAD, function (state, payload) {\n  state.countNotiUnread = parseInt(payload);\n}), _defineProperty(_mutations, READ_NOTIFICATIONS, function (state, ids) {\n  state.countNotiUnread = state.countNotiUnread - parseInt(ids.length);\n  state.notifications = state.notifications.map(function (item) {\n    if (ids.indexOf(item.id) !== -1) {\n      item.status = 'read';\n    }\n\n    return item;\n  });\n}), _defineProperty(_mutations, SHOW_NOTIFICATION_MESSAGE, function (state, payload) {\n  state.notificationMessage = payload.message || '';\n  state.notificationLabel = payload.label || '';\n}), _mutations);\nexport var actions = {\n  /**\n   *\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchStatisticTotalSales: function () {\n    var _fetchStatisticTotalSales = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              result = {\n                success: true\n              };\n              _context.next = 4;\n              return api.fetchStatisticTotalSales(payload);\n\n            case 4:\n              response = _context.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  user_active: 0\n                };\n              }\n\n              commit(FETCH_STATISTIC_TOTAL_SALES, response.user_active);\n              return _context.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function fetchStatisticTotalSales(_x, _x2) {\n      return _fetchStatisticTotalSales.apply(this, arguments);\n    }\n\n    return fetchStatisticTotalSales;\n  }(),\n\n  /**\n   *\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchStatisticTotalUsers: function () {\n    var _fetchStatisticTotalUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              result = {\n                success: true\n              };\n              _context2.next = 4;\n              return api.fetchStatisticTotalUsers(payload);\n\n            case 4:\n              response = _context2.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  total: 0\n                };\n              }\n\n              commit(FETCH_STATISTIC_TOTAL_USERS, response.total);\n              return _context2.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function fetchStatisticTotalUsers(_x3, _x4) {\n      return _fetchStatisticTotalUsers.apply(this, arguments);\n    }\n\n    return fetchStatisticTotalUsers;\n  }(),\n\n  /**\n   * Fetch users by role\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchUsersByRole: function () {\n    var _fetchUsersByRole = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref3, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              result = {\n                success: true\n              };\n              _context3.next = 4;\n              return api.fetchUsersByRole(payload);\n\n            case 4:\n              response = _context3.sent;\n\n              if (response && response.errorMessage) {\n                response.users = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_USERS_BY_ROLE, response.users);\n              return _context3.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function fetchUsersByRole(_x5, _x6) {\n      return _fetchUsersByRole.apply(this, arguments);\n    }\n\n    return fetchUsersByRole;\n  }(),\n  countUsersByRole: function () {\n    var _countUsersByRole = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref4, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref4.commit;\n              result = {\n                success: true\n              };\n              _context4.next = 4;\n              return api.countUsersByRole(payload);\n\n            case 4:\n              response = _context4.sent;\n\n              if (response && response.errorMessage) {\n                response.count = 0;\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(COUNT_USERS_BY_ROLE, response.count);\n              return _context4.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function countUsersByRole(_x7, _x8) {\n      return _countUsersByRole.apply(this, arguments);\n    }\n\n    return countUsersByRole;\n  }(),\n\n  /**\n   * Fetch users by ref\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchUsersByRef: function () {\n    var _fetchUsersByRef = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref5, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref5.commit;\n              result = {\n                success: true\n              };\n              _context5.next = 4;\n              return api.fetchUsersByRef(payload);\n\n            case 4:\n              response = _context5.sent;\n\n              if (response && response.errorMessage) {\n                response.users = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_USERS_BY_REF, response.users);\n              return _context5.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function fetchUsersByRef(_x9, _x10) {\n      return _fetchUsersByRef.apply(this, arguments);\n    }\n\n    return fetchUsersByRef;\n  }(),\n\n  /**\n   * Fetch product types\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchProductTypes: function () {\n    var _fetchProductTypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref6) {\n      var commit,\n          payload,\n          result,\n          response,\n          _args6 = arguments;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref6.commit;\n              payload = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n              result = {\n                success: true\n              };\n              _context6.next = 5;\n              return api.fetchProductTypes(payload);\n\n            case 5:\n              response = _context6.sent;\n\n              if (response && response.errorMessage) {\n                response.product_types = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_PRODUCT_TYPES, response.product_types);\n              return _context6.abrupt(\"return\", result);\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function fetchProductTypes(_x11) {\n      return _fetchProductTypes.apply(this, arguments);\n    }\n\n    return fetchProductTypes;\n  }(),\n\n  /**\n   * Fetch all product bases\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchAllProductBases: function () {\n    var _fetchAllProductBases = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref7) {\n      var commit,\n          payload,\n          result,\n          response,\n          _args7 = arguments;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              commit = _ref7.commit;\n              payload = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n              result = {\n                success: true\n              };\n              _context7.next = 5;\n              return api.fetchAllProductBases(payload);\n\n            case 5:\n              response = _context7.sent;\n\n              if (response && response.errorMessage) {\n                response.product_bases = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_ALL_PRODUCT_BASES, response.product_bases);\n              return _context7.abrupt(\"return\", result);\n\n            case 9:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    function fetchAllProductBases(_x12) {\n      return _fetchAllProductBases.apply(this, arguments);\n    }\n\n    return fetchAllProductBases;\n  }(),\n\n  /**\n   * Fetch countries\n   * @param commit\n   */\n  fetchCountries: function fetchCountries(_ref8) {\n    var commit = _ref8.commit;\n    commit(FETCH_COUNTRIES, countries);\n  },\n  fetchShippingMethos: function fetchShippingMethos(_ref9) {\n    var commit = _ref9.commit;\n    commit(FETCH_SHIPPING_METHOS, shippings);\n  },\n\n  /**\n   * Fetch shops\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  fetchShops: function () {\n    var _fetchShops = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_ref10, payload) {\n      var commit, result, _yield$Promise$all, _yield$Promise$all2, list, count;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              commit = _ref10.commit;\n              result = {\n                success: true\n              };\n              _context8.next = 4;\n              return Promise.all([api.fetchShops(payload), api.fetchShopCount(payload)]);\n\n            case 4:\n              _yield$Promise$all = _context8.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              list = _yield$Promise$all2[0];\n              count = _yield$Promise$all2[1];\n\n              if (!list || list.errorMessage || !count) {\n                result = {\n                  success: false,\n                  message: list.errorMessage\n                };\n                list = {\n                  shops: []\n                };\n                count = {\n                  count: 0\n                };\n              }\n\n              commit(FETCH_SHOPS, list.shops);\n              commit(FETCH_COUNT_SHOP, count.count);\n              return _context8.abrupt(\"return\", result);\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function fetchShops(_x13, _x14) {\n      return _fetchShops.apply(this, arguments);\n    }\n\n    return fetchShops;\n  }(),\n  fetchProviders: function () {\n    var _fetchProviders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref11, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              commit = _ref11.commit;\n              result = {\n                success: true\n              };\n              _context9.next = 4;\n              return api.fetchProviders(payload);\n\n            case 4:\n              response = _context9.sent;\n\n              if (response && response.errorMessage) {\n                response.product_types = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_PROVIDERS, response.providers);\n              return _context9.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    function fetchProviders(_x15, _x16) {\n      return _fetchProviders.apply(this, arguments);\n    }\n\n    return fetchProviders;\n  }(),\n  countNotifications: function () {\n    var _countNotifications = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_ref12, playload) {\n      var commit, result, res;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              commit = _ref12.commit;\n              result = {\n                success: true\n              };\n              _context10.next = 4;\n              return api.countNotifications(playload);\n\n            case 4:\n              res = _context10.sent;\n\n              if (res && res.errorMessage) {\n                res.count = 0;\n                result = {\n                  success: false,\n                  message: res.errorMessage\n                };\n              }\n\n              commit(COUNT_NOTIFICATIONS, res.count);\n              return _context10.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    function countNotifications(_x17, _x18) {\n      return _countNotifications.apply(this, arguments);\n    }\n\n    return countNotifications;\n  }(),\n  countNotificationsUnread: function () {\n    var _countNotificationsUnread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(_ref13, playload) {\n      var commit, result, res;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              commit = _ref13.commit;\n              result = {\n                success: true\n              };\n              _context11.next = 4;\n              return api.countNotifications(playload);\n\n            case 4:\n              res = _context11.sent;\n\n              if (res && res.errorMessage) {\n                res.count = 0;\n                result = {\n                  success: false,\n                  message: res.errorMessage\n                };\n              }\n\n              commit(COUNT_NOTIFICATIONS_UNREAD, res.count);\n              return _context11.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    function countNotificationsUnread(_x19, _x20) {\n      return _countNotificationsUnread.apply(this, arguments);\n    }\n\n    return countNotificationsUnread;\n  }(),\n  fetchNotifications: function () {\n    var _fetchNotifications = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_ref14, playload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              commit = _ref14.commit;\n              result = {\n                success: true\n              };\n              _context12.next = 4;\n              return api.fetchNotifications(playload);\n\n            case 4:\n              response = _context12.sent;\n\n              if (response && response.errorMessage) {\n                response.notifications = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_NOTIFICATIONS, response.notifications || []);\n              return _context12.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    function fetchNotifications(_x21, _x22) {\n      return _fetchNotifications.apply(this, arguments);\n    }\n\n    return fetchNotifications;\n  }(),\n  readNotifications: function () {\n    var _readNotifications = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(_ref15) {\n      var commit,\n          getters,\n          ids,\n          result,\n          notiIds,\n          response,\n          _args13 = arguments;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              commit = _ref15.commit, getters = _ref15.getters;\n              ids = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : [];\n              result = {\n                success: true\n              };\n              notiIds = union(getters.getListIDNotificationUnread, ids);\n\n              if (!(notiIds.length === 0)) {\n                _context13.next = 6;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", result);\n\n            case 6:\n              _context13.next = 8;\n              return api.readNotifications(notiIds);\n\n            case 8:\n              response = _context13.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              } else {\n                commit(READ_NOTIFICATIONS, notiIds);\n              }\n\n              return _context13.abrupt(\"return\", result);\n\n            case 11:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    function readNotifications(_x23) {\n      return _readNotifications.apply(this, arguments);\n    }\n\n    return readNotifications;\n  }(),\n  showNotificationMessage: function showNotificationMessage(_ref16, payload) {\n    var commit = _ref16.commit;\n    commit(SHOW_NOTIFICATION_MESSAGE, payload);\n  }\n};",{"version":3,"sources":["/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/shared/store/index.js"],"names":["api","countries","shippings","union","FETCH_STATISTIC_TOTAL_SALES","FETCH_STATISTIC_TOTAL_USERS","FETCH_USERS_BY_ROLE","COUNT_USERS_BY_ROLE","FETCH_USERS_BY_REF","FETCH_PRODUCT_TYPES","FETCH_ALL_PRODUCT_BASES","FETCH_COUNTRIES","FETCH_SHOPS","FETCH_COUNT_SHOP","FETCH_PROVIDERS","FETCH_SHIPPING_METHOS","FETCH_NOTIFICATIONS","PUSH_NOTIFICATION","COUNT_NOTIFICATIONS","COUNT_NOTIFICATIONS_UNREAD","READ_NOTIFICATIONS","SHOW_NOTIFICATION_MESSAGE","state","statisticTotalSales","statisticTotalUsers","users","countUsers","usersRef","productTypes","productBases","shops","countShop","providers","notifications","countNoti","countNotiUnread","notificationMessage","notificationLabel","getters","getShippingMethodTitle","code","getListIDNotificationUnread","reduce","ids","item","status","push","id","mutations","payload","unshift","concat","parseInt","length","map","indexOf","message","label","actions","fetchStatisticTotalSales","commit","result","success","response","errorMessage","user_active","fetchStatisticTotalUsers","total","fetchUsersByRole","countUsersByRole","count","fetchUsersByRef","fetchProductTypes","product_types","fetchAllProductBases","product_bases","fetchCountries","fetchShippingMethos","fetchShops","Promise","all","fetchShopCount","list","fetchProviders","countNotifications","playload","res","countNotificationsUnread","fetchNotifications","readNotifications","notiIds","showNotificationMessage"],"mappings":"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","sourcesContent":["import api from '../api'\nimport countries from '../data/countries'\nimport shippings from '../data/shippings'\nimport union from 'lodash/union'\n\nexport const FETCH_STATISTIC_TOTAL_SALES = 'fetchStatisticTotalSales'\nexport const FETCH_STATISTIC_TOTAL_USERS = 'fetchStatisticTotalUsers'\nexport const FETCH_USERS_BY_ROLE = 'fetchUsersByRole'\nexport const COUNT_USERS_BY_ROLE = 'countUsersByRole'\nexport const FETCH_USERS_BY_REF = 'fetchUsersByRef'\nexport const FETCH_PRODUCT_TYPES = 'fetchProductTypes'\nexport const FETCH_ALL_PRODUCT_BASES = 'fetchAllProductBases'\nexport const FETCH_COUNTRIES = 'fetchCountries'\nexport const FETCH_SHOPS = 'fetchShops'\nexport const FETCH_COUNT_SHOP = 'fetchCountShop'\nexport const FETCH_PROVIDERS = 'fetchProviders'\nexport const FETCH_SHIPPING_METHOS = 'fetchShippingMethos'\nexport const FETCH_NOTIFICATIONS = 'fetchNotifications'\nexport const PUSH_NOTIFICATION = 'pushNotification'\nexport const COUNT_NOTIFICATIONS = 'countNotifications'\nexport const COUNT_NOTIFICATIONS_UNREAD = 'countNotificationsUnread'\nexport const READ_NOTIFICATIONS = 'readNotifications'\nexport const SHOW_NOTIFICATION_MESSAGE = 'showNotificationMessage'\n\nexport const state = {\n  shippings: {},\n  statisticTotalSales: 0,\n  statisticTotalUsers: 0,\n  users: [],\n  countUsers: 0,\n  usersRef: [],\n  productTypes: [],\n  productBases: [],\n  countries: [],\n  shops: [],\n  countShop: 0,\n  providers: [],\n  notifications: [],\n  countNoti: 0,\n  countNotiUnread: 0,\n  notificationMessage: '',\n  notificationLabel: '',\n}\n\nexport const getters = {\n  getShippingMethodTitle: (state) => (code) => {\n    return state.shippings[code] | ''\n  },\n  getListIDNotificationUnread: (state) => {\n    return state.notifications.reduce((ids, item) => {\n      if (item.status === 'unread') {\n        ids.push(item.id)\n      }\n      return ids\n    }, [])\n  },\n}\n\nexport const mutations = {\n  [FETCH_STATISTIC_TOTAL_SALES]: (state, payload) => {\n    state.statisticTotalSales = payload\n  },\n  [FETCH_STATISTIC_TOTAL_USERS]: (state, payload) => {\n    state.statisticTotalUsers = payload\n  },\n  [FETCH_USERS_BY_ROLE]: (state, payload) => {\n    state.users = payload\n  },\n  [COUNT_USERS_BY_ROLE]: (state, payload) => {\n    state.countUsers = payload\n  },\n  [FETCH_USERS_BY_REF]: (state, payload) => {\n    state.usersRef = payload\n  },\n  [FETCH_PRODUCT_TYPES]: (state, payload) => {\n    state.productTypes = payload\n  },\n  [FETCH_ALL_PRODUCT_BASES]: (state, payload) => {\n    state.productBases = payload\n  },\n  [FETCH_COUNTRIES]: (state, payload) => {\n    state.countries = payload\n  },\n  [FETCH_SHOPS]: (state, payload) => {\n    state.shops = payload\n  },\n  [FETCH_COUNT_SHOP]: (state, payload) => {\n    state.countShop = payload\n  },\n  [FETCH_PROVIDERS]: (state, payload) => {\n    state.providers = payload\n  },\n  [FETCH_SHIPPING_METHOS]: (state, payload) => {\n    state.shippings = payload\n  },\n  [PUSH_NOTIFICATION]: (state, payload) => {\n    state.countNotiUnread++\n    state.notifications.unshift(payload)\n  },\n  [FETCH_NOTIFICATIONS]: (state, payload) => {\n    state.notifications = state.notifications.concat(payload)\n  },\n  [COUNT_NOTIFICATIONS]: (state, payload) => {\n    state.countNoti = payload\n  },\n  [COUNT_NOTIFICATIONS_UNREAD]: (state, payload) => {\n    state.countNotiUnread = parseInt(payload)\n  },\n  [READ_NOTIFICATIONS]: (state, ids) => {\n    state.countNotiUnread = state.countNotiUnread - parseInt(ids.length)\n    state.notifications = state.notifications.map((item) => {\n      if (ids.indexOf(item.id) !== -1) {\n        item.status = 'read'\n      }\n\n      return item\n    })\n  },\n  [SHOW_NOTIFICATION_MESSAGE]: (state, payload) => {\n    state.notificationMessage = payload.message || ''\n    state.notificationLabel = payload.label || ''\n  },\n}\n\nexport const actions = {\n  /**\n   *\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  async fetchStatisticTotalSales({ commit }, payload) {\n    let result = { success: true }\n    let response = await api.fetchStatisticTotalSales(payload)\n\n    if (response && response.errorMessage) {\n      result = { success: false, message: response.errorMessage }\n      response = {\n        user_active: 0,\n      }\n    }\n\n    commit(FETCH_STATISTIC_TOTAL_SALES, response.user_active)\n    return result\n  },\n\n  /**\n   *\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  async fetchStatisticTotalUsers({ commit }, payload) {\n    let result = { success: true }\n    let response = await api.fetchStatisticTotalUsers(payload)\n\n    if (response && response.errorMessage) {\n      result = { success: false, message: response.errorMessage }\n      response = {\n        total: 0,\n      }\n    }\n\n    commit(FETCH_STATISTIC_TOTAL_USERS, response.total)\n    return result\n  },\n\n  /**\n   * Fetch users by role\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  async fetchUsersByRole({ commit }, payload) {\n    let result = { success: true }\n    let response = await api.fetchUsersByRole(payload)\n\n    if (response && response.errorMessage) {\n      response.users = []\n      result = { success: false, message: response.errorMessage }\n    }\n\n    commit(FETCH_USERS_BY_ROLE, response.users)\n\n    return result\n  },\n  async countUsersByRole({ commit }, payload) {\n    let result = { success: true }\n    let response = await api.countUsersByRole(payload)\n\n    if (response && response.errorMessage) {\n      response.count = 0\n      result = { success: false, message: response.errorMessage }\n    }\n\n    commit(COUNT_USERS_BY_ROLE, response.count)\n\n    return result\n  },\n  /**\n   * Fetch users by ref\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  async fetchUsersByRef({ commit }, payload) {\n    let result = { success: true }\n    let response = await api.fetchUsersByRef(payload)\n    if (response && response.errorMessage) {\n      response.users = []\n      result = { success: false, message: response.errorMessage }\n    }\n\n    commit(FETCH_USERS_BY_REF, response.users)\n\n    return result\n  },\n\n  /**\n   * Fetch product types\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  async fetchProductTypes({ commit }, payload = {}) {\n    let result = { success: true }\n    let response = await api.fetchProductTypes(payload)\n\n    if (response && response.errorMessage) {\n      response.product_types = []\n      result = { success: false, message: response.errorMessage }\n    }\n\n    commit(FETCH_PRODUCT_TYPES, response.product_types)\n\n    return result\n  },\n\n  /**\n   * Fetch all product bases\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  async fetchAllProductBases({ commit }, payload = {}) {\n    let result = { success: true }\n    let response = await api.fetchAllProductBases(payload)\n\n    if (response && response.errorMessage) {\n      response.product_bases = []\n      result = { success: false, message: response.errorMessage }\n    }\n\n    commit(FETCH_ALL_PRODUCT_BASES, response.product_bases)\n\n    return result\n  },\n\n  /**\n   * Fetch countries\n   * @param commit\n   */\n  fetchCountries({ commit }) {\n    commit(FETCH_COUNTRIES, countries)\n  },\n\n  fetchShippingMethos({ commit }) {\n    commit(FETCH_SHIPPING_METHOS, shippings)\n  },\n\n  /**\n   * Fetch shops\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  async fetchShops({ commit }, payload) {\n    let result = { success: true }\n    let [list, count] = await Promise.all([\n      api.fetchShops(payload),\n      api.fetchShopCount(payload),\n    ])\n\n    if (!list || list.errorMessage || !count) {\n      result = {\n        success: false,\n        message: list.errorMessage,\n      }\n\n      list = {\n        shops: [],\n      }\n      count = { count: 0 }\n    }\n\n    commit(FETCH_SHOPS, list.shops)\n    commit(FETCH_COUNT_SHOP, count.count)\n\n    return result\n  },\n\n  async fetchProviders({ commit }, payload) {\n    let result = { success: true }\n    let response = await api.fetchProviders(payload)\n\n    if (response && response.errorMessage) {\n      response.product_types = []\n      result = { success: false, message: response.errorMessage }\n    }\n\n    commit(FETCH_PROVIDERS, response.providers)\n\n    return result\n  },\n\n  async countNotifications({ commit }, playload) {\n    let result = { success: true }\n    let res = await api.countNotifications(playload)\n\n    if (res && res.errorMessage) {\n      res.count = 0\n      result = { success: false, message: res.errorMessage }\n    }\n\n    commit(COUNT_NOTIFICATIONS, res.count)\n    return result\n  },\n\n  async countNotificationsUnread({ commit }, playload) {\n    let result = { success: true }\n    let res = await api.countNotifications(playload)\n\n    if (res && res.errorMessage) {\n      res.count = 0\n      result = { success: false, message: res.errorMessage }\n    }\n\n    commit(COUNT_NOTIFICATIONS_UNREAD, res.count)\n    return result\n  },\n\n  async fetchNotifications({ commit }, playload) {\n    let result = { success: true }\n    let response = await api.fetchNotifications(playload)\n\n    if (response && response.errorMessage) {\n      response.notifications = []\n      result = { success: false, message: response.errorMessage }\n    }\n\n    commit(FETCH_NOTIFICATIONS, response.notifications || [])\n    return result\n  },\n\n  async readNotifications({ commit, getters }, ids = []) {\n    let result = { success: true }\n\n    let notiIds = union(getters.getListIDNotificationUnread, ids)\n    if (notiIds.length === 0) {\n      return result\n    }\n\n    let response = await api.readNotifications(notiIds)\n    if (response && response.errorMessage) {\n      result = { success: false, message: response.errorMessage }\n    } else {\n      commit(READ_NOTIFICATIONS, notiIds)\n    }\n\n    return result\n  },\n\n  showNotificationMessage({ commit }, payload) {\n    commit(SHOW_NOTIFICATION_MESSAGE, payload)\n  },\n}\n"]}]}