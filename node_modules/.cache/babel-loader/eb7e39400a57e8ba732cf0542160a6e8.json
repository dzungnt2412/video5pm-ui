{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/multiselect/multiselectMixin.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/multiselect/multiselectMixin.js","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction isEmpty(opt) {\n  if (opt === 0) return false;\n  if (Array.isArray(opt) && opt.length === 0) return true;\n  return !opt;\n}\n\nfunction not(fun) {\n  return function () {\n    return !fun.apply(void 0, arguments);\n  };\n}\n\nfunction includes(str, query) {\n  /* istanbul ignore else */\n  if (str === undefined) str = 'undefined';\n  if (str === null) str = 'null';\n  if (str === false) str = 'false';\n  var text = str.toString().toLowerCase();\n  return text.indexOf(query.trim()) !== -1;\n}\n\nfunction filterOptions(options, search, label, customLabel) {\n  return options.filter(function (option) {\n    return includes(customLabel(option, label), search);\n  });\n}\n\nfunction stripGroups(options) {\n  return options.filter(function (option) {\n    return !option.$isLabel;\n  });\n}\n\nfunction flattenOptions(values, label) {\n  return function (options) {\n    return options.reduce(function (prev, curr) {\n      /* istanbul ignore else */\n      if (curr[values] && curr[values].length) {\n        prev.push({\n          $groupLabel: curr[label],\n          $isLabel: true\n        });\n        return prev.concat(curr[values]);\n      }\n\n      return prev;\n    }, []);\n  };\n}\n\nfunction filterGroups(search, label, values, groupLabel, customLabel) {\n  return function (groups) {\n    return groups.map(function (group) {\n      var _ref;\n\n      /* istanbul ignore else */\n      if (!group[values]) {\n        console.warn(\"Options passed to vue-multiselect do not contain groups, despite the config.\");\n        return [];\n      }\n\n      var groupOptions = filterOptions(group[values], search, label, customLabel);\n      return groupOptions.length ? (_ref = {}, _defineProperty(_ref, groupLabel, group[groupLabel]), _defineProperty(_ref, values, groupOptions), _ref) : [];\n    });\n  };\n}\n\nvar flow = function flow() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function (x) {\n    return fns.reduce(function (v, f) {\n      return f(v);\n    }, x);\n  };\n};\n\nexport default {\n  data: function data() {\n    return {\n      search: '',\n      isOpen: false,\n      preferredOpenDirection: 'below',\n      optimizedHeight: this.maxHeight\n    };\n  },\n  props: {\n    /**\n     * Decide whether to filter the results based on search query.\n     * Useful for async filtering, where we search through more complex data.\n     * @type {Boolean}\n     */\n    internalSearch: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Array of available options: Objects, Strings or Integers.\n     * If array of objects, visible label will default to option.label.\n     * If `labal` prop is passed, label will equal option['label']\n     * @type {Array}\n     */\n    options: {\n      type: Array,\n      required: true\n    },\n\n    /**\n     * Equivalent to the `multiple` attribute on a `<select>` input.\n     * @default false\n     * @type {Boolean}\n     */\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Presets the selected options value.\n     * @type {Object||Array||String||Integer}\n     */\n    value: {\n      type: null,\n      default: function _default() {\n        return [];\n      }\n    },\n\n    /**\n     * Key to compare objects\n     * @default 'id'\n     * @type {String}\n     */\n    trackBy: {\n      type: String\n    },\n\n    /**\n     * Label to look for in option Object\n     * @default 'label'\n     * @type {String}\n     */\n    label: {\n      type: String\n    },\n\n    /**\n     * Enable/disable search in options\n     * @default true\n     * @type {Boolean}\n     */\n    searchable: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Clear the search input after `)\n     * @default true\n     * @type {Boolean}\n     */\n    clearOnSelect: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Hide already selected options\n     * @default false\n     * @type {Boolean}\n     */\n    hideSelected: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Equivalent to the `placeholder` attribute on a `<select>` input.\n     * @default 'Select option'\n     * @type {String}\n     */\n    placeholder: {\n      type: String,\n      default: 'Select option'\n    },\n\n    /**\n     * Allow to remove all selected values\n     * @default true\n     * @type {Boolean}\n     */\n    allowEmpty: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Reset this.internalValue, this.search after this.internalValue changes.\n     * Useful if want to create a stateless dropdown.\n     * @default false\n     * @type {Boolean}\n     */\n    resetAfter: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Enable/disable closing after selecting an option\n     * @default true\n     * @type {Boolean}\n     */\n    closeOnSelect: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Function to interpolate the custom label\n     * @default false\n     * @type {Function}\n     */\n    customLabel: {\n      type: Function,\n      default: function _default(option, label) {\n        if (isEmpty(option)) return '';\n        return label ? option[label] : option;\n      }\n    },\n\n    /**\n     * Disable / Enable tagging\n     * @default false\n     * @type {Boolean}\n     */\n    taggable: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * String to show when highlighting a potential tag\n     * @default 'Press enter to create a tag'\n     * @type {String}\n     */\n    tagPlaceholder: {\n      type: String,\n      default: 'Press enter to create a tag'\n    },\n\n    /**\n     * By default _new tags will appear above the search results.\n     * Changing to 'bottom' will revert this behaviour\n     * and will proritize the search results\n     * @default 'top'\n     * @type {String}\n     */\n    tagPosition: {\n      type: String,\n      default: 'top'\n    },\n\n    /**\n     * Number of allowed selected options. No limit if 0.\n     * @default 0\n     * @type {Number}\n     */\n    max: {\n      type: [Number, Boolean],\n      default: false\n    },\n\n    /**\n     * Will be passed with all events as second param.\n     * Useful for identifying events origin.\n     * @default null\n     * @type {String|Integer}\n     */\n    id: {\n      default: null\n    },\n\n    /**\n     * Limits the options displayed in the dropdown\n     * to the first X options.\n     * @default 1000\n     * @type {Integer}\n     */\n    optionsLimit: {\n      type: Number,\n      default: 1000\n    },\n\n    /**\n     * Name of the property containing\n     * the group values\n     * @default 1000\n     * @type {String}\n     */\n    groupValues: {\n      type: String\n    },\n\n    /**\n     * Name of the property containing\n     * the group label\n     * @default 1000\n     * @type {String}\n     */\n    groupLabel: {\n      type: String\n    },\n\n    /**\n     * Allow to select all group values\n     * by selecting the group label\n     * @default false\n     * @type {Boolean}\n     */\n    groupSelect: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Array of keyboard keys to block\n     * when selecting\n     * @default 1000\n     * @type {String}\n     */\n    blockKeys: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n\n    /**\n     * Prevent from wiping up the search value\n     * @default false\n     * @type {Boolean}\n     */\n    preserveSearch: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Select 1st options if value is empty\n     * @default false\n     * @type {Boolean}\n     */\n    preselectFirst: {\n      type: Boolean,\n      default: false\n    }\n  },\n  mounted: function mounted() {\n    /* istanbul ignore else */\n    if (!this.multiple && this.max) {\n      console.warn('[Vue-Multiselect warn]: Max prop should not be used when prop Multiple equals false.');\n    }\n\n    if (this.preselectFirst && !this.internalValue.length && this.options.length) {\n      this.select(this.filteredOptions[0]);\n    }\n  },\n  computed: {\n    internalValue: function internalValue() {\n      return this.value || this.value === 0 ? Array.isArray(this.value) ? this.value : [this.value] : [];\n    },\n    filteredOptions: function filteredOptions() {\n      var search = this.search || '';\n      var normalizedSearch = search.toLowerCase().trim();\n      var options = this.options.concat();\n      /* istanbul ignore else */\n\n      if (this.internalSearch) {\n        options = this.groupValues ? this.filterAndFlat(options, normalizedSearch, this.label) : filterOptions(options, normalizedSearch, this.label, this.customLabel);\n      } else {\n        options = this.groupValues ? flattenOptions(this.groupValues, this.groupLabel)(options) : options;\n      }\n\n      options = this.hideSelected ? options.filter(not(this.isSelected)) : options;\n      /* istanbul ignore else */\n\n      if (this.taggable && normalizedSearch.length && !this.isExistingOption(normalizedSearch)) {\n        if (this.tagPosition === 'bottom') {\n          options.push({\n            isTag: true,\n            label: search\n          });\n        } else {\n          options.unshift({\n            isTag: true,\n            label: search\n          });\n        }\n      }\n\n      return options.slice(0, this.optionsLimit);\n    },\n    valueKeys: function valueKeys() {\n      var _this = this;\n\n      if (this.trackBy) {\n        return this.internalValue.map(function (element) {\n          return element[_this.trackBy];\n        });\n      } else {\n        return this.internalValue;\n      }\n    },\n    optionKeys: function optionKeys() {\n      var _this2 = this;\n\n      var options = this.groupValues ? this.flatAndStrip(this.options) : this.options;\n      return options.map(function (element) {\n        return _this2.customLabel(element, _this2.label).toString().toLowerCase();\n      });\n    },\n    currentOptionLabel: function currentOptionLabel() {\n      return this.multiple ? this.searchable ? '' : this.placeholder : this.internalValue.length ? this.getOptionLabel(this.internalValue[0]) : this.searchable ? '' : this.placeholder;\n    }\n  },\n  watch: {\n    internalValue: function internalValue() {\n      /* istanbul ignore else */\n      if (this.resetAfter && this.internalValue.length) {\n        this.search = '';\n        this.$emit('input', this.multiple ? [] : null);\n      }\n    },\n    search: function search() {\n      this.$emit('search-change', this.search, this.id);\n    }\n  },\n  methods: {\n    /**\n     * Returns the internalValue in a way it can be emited to the parent\n     * @returns {Object||Array||String||Integer}\n     */\n    getValue: function getValue() {\n      return this.multiple ? this.internalValue : this.internalValue.length === 0 ? null : this.internalValue[0];\n    },\n\n    /**\n     * Filters and then flattens the options list\n     * @param  {Array}\n     * @returns {Array} returns a filtered and flat options list\n     */\n    filterAndFlat: function filterAndFlat(options, search, label) {\n      return flow(filterGroups(search, label, this.groupValues, this.groupLabel, this.customLabel), flattenOptions(this.groupValues, this.groupLabel))(options);\n    },\n\n    /**\n     * Flattens and then strips the group labels from the options list\n     * @param  {Array}\n     * @returns {Array} returns a flat options list without group labels\n     */\n    flatAndStrip: function flatAndStrip(options) {\n      return flow(flattenOptions(this.groupValues, this.groupLabel), stripGroups)(options);\n    },\n\n    /**\n     * Updates the search value\n     * @param  {String}\n     */\n    updateSearch: function updateSearch(query) {\n      this.search = query;\n    },\n\n    /**\n     * Finds out if the given query is already present\n     * in the available options\n     * @param  {String}\n     * @returns {Boolean} returns true if element is available\n     */\n    isExistingOption: function isExistingOption(query) {\n      return !this.options ? false : this.optionKeys.indexOf(query) > -1;\n    },\n\n    /**\n     * Finds out if the given element is already present\n     * in the result value\n     * @param  {Object||String||Integer} option passed element to check\n     * @returns {Boolean} returns true if element is selected\n     */\n    isSelected: function isSelected(option) {\n      var opt = this.trackBy ? option[this.trackBy] : option;\n      return this.valueKeys.indexOf(opt) > -1;\n    },\n\n    /**\n     * Finds out if the given option is disabled\n     * @param  {Object||String||Integer} option passed element to check\n     * @returns {Boolean} returns true if element is disabled\n     */\n    isOptionDisabled: function isOptionDisabled(option) {\n      return !!option.$isDisabled;\n    },\n\n    /**\n     * Returns empty string when options is null/undefined\n     * Returns tag query if option is tag.\n     * Returns the customLabel() results and casts it to string.\n     *\n     * @param  {Object||String||Integer} Passed option\n     * @returns {Object||String}\n     */\n    getOptionLabel: function getOptionLabel(option) {\n      if (isEmpty(option)) return '';\n      /* istanbul ignore else */\n\n      if (option.isTag) return option.label;\n      /* istanbul ignore else */\n\n      if (option.$isLabel) return option.$groupLabel;\n      var label = this.customLabel(option, this.label);\n      /* istanbul ignore else */\n\n      if (isEmpty(label)) return '';\n      return label;\n    },\n\n    /**\n     * Add the given option to the list of selected options\n     * or sets the option as the selected option.\n     * If option is already selected -> remove it from the results.\n     *\n     * @param  {Object||String||Integer} option to select/deselect\n     * @param  {Boolean} block removing\n     */\n    select: function select(option, key) {\n      /* istanbul ignore else */\n      if (option.$isLabel && this.groupSelect) {\n        this.selectGroup(option);\n        return;\n      }\n\n      if (this.blockKeys.indexOf(key) !== -1 || this.disabled || option.$isDisabled || option.$isLabel) return;\n      /* istanbul ignore else */\n\n      if (this.max && this.multiple && this.internalValue.length === this.max) return;\n      /* istanbul ignore else */\n\n      if (key === 'Tab' && !this.pointerDirty) return;\n\n      if (option.isTag) {\n        this.$emit('tag', option.label, this.id);\n        this.search = '';\n        if (this.closeOnSelect && !this.multiple) this.deactivate();\n      } else {\n        var isSelected = this.isSelected(option);\n\n        if (isSelected) {\n          if (key !== 'Tab') this.removeElement(option);\n          return;\n        }\n\n        this.$emit('select', option, this.id);\n\n        if (this.multiple) {\n          this.$emit('input', this.internalValue.concat([option]), this.id);\n        } else {\n          this.$emit('input', option, this.id);\n        }\n        /* istanbul ignore else */\n\n\n        if (this.clearOnSelect) this.search = '';\n      }\n      /* istanbul ignore else */\n\n\n      if (this.closeOnSelect) this.deactivate();\n    },\n\n    /**\n     * Add the given group options to the list of selected options\n     * If all group optiona are already selected -> remove it from the results.\n     *\n     * @param  {Object||String||Integer} group to select/deselect\n     */\n    selectGroup: function selectGroup(selectedGroup) {\n      var _this3 = this;\n\n      var group = this.options.find(function (option) {\n        return option[_this3.groupLabel] === selectedGroup.$groupLabel;\n      });\n      if (!group) return;\n\n      if (this.wholeGroupSelected(group)) {\n        this.$emit('remove', group[this.groupValues], this.id);\n        var newValue = this.internalValue.filter(function (option) {\n          return group[_this3.groupValues].indexOf(option) === -1;\n        });\n        this.$emit('input', newValue, this.id);\n      } else {\n        var optionsToAdd = group[this.groupValues].filter(function (option) {\n          return !(_this3.isOptionDisabled(option) || _this3.isSelected(option));\n        });\n        this.$emit('select', optionsToAdd, this.id);\n        this.$emit('input', this.internalValue.concat(optionsToAdd), this.id);\n      }\n    },\n\n    /**\n     * Helper to identify if all values in a group are selected\n     *\n     * @param {Object} group to validated selected values against\n     */\n    wholeGroupSelected: function wholeGroupSelected(group) {\n      var _this4 = this;\n\n      return group[this.groupValues].every(function (option) {\n        return _this4.isSelected(option) || _this4.isOptionDisabled(option);\n      });\n    },\n\n    /**\n     * Helper to identify if all values in a group are disabled\n     *\n     * @param {Object} group to check for disabled values\n     */\n    wholeGroupDisabled: function wholeGroupDisabled(group) {\n      return group[this.groupValues].every(this.isOptionDisabled);\n    },\n\n    /**\n     * Removes the given option from the selected options.\n     * Additionally checks this.allowEmpty prop if option can be removed when\n     * it is the last selected option.\n     *\n     * @param  {type} option description\n     * @returns {type}        description\n     */\n    removeElement: function removeElement(option) {\n      var shouldClose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      /* istanbul ignore else */\n      if (this.disabled) return;\n      /* istanbul ignore else */\n\n      if (option.$isDisabled) return;\n      /* istanbul ignore else */\n\n      if (!this.allowEmpty && this.internalValue.length <= 1) {\n        this.deactivate();\n        return;\n      }\n\n      var index = _typeof(option) === 'object' ? this.valueKeys.indexOf(option[this.trackBy]) : this.valueKeys.indexOf(option);\n      this.$emit('remove', option, this.id);\n\n      if (this.multiple) {\n        var newValue = this.internalValue.slice(0, index).concat(this.internalValue.slice(index + 1));\n        this.$emit('input', newValue, this.id);\n      } else {\n        this.$emit('input', null, this.id);\n      }\n      /* istanbul ignore else */\n\n\n      if (this.closeOnSelect && shouldClose) this.deactivate();\n    },\n\n    /**\n     * Calls this.removeElement() with the last element\n     * from this.internalValue (selected element Array)\n     *\n     * @fires this#removeElement\n     */\n    removeLastElement: function removeLastElement() {\n      /* istanbul ignore else */\n      if (this.blockKeys.indexOf('Delete') !== -1) return;\n      /* istanbul ignore else */\n\n      if (this.search.length === 0 && Array.isArray(this.internalValue) && this.internalValue.length) {\n        this.removeElement(this.internalValue[this.internalValue.length - 1], false);\n      }\n    },\n\n    /**\n     * Opens the multiselect’s dropdown.\n     * Sets this.isOpen to TRUE\n     */\n    activate: function activate() {\n      var _this5 = this;\n\n      /* istanbul ignore else */\n      if (this.isOpen || this.disabled) return;\n      this.adjustPosition();\n      /* istanbul ignore else  */\n\n      if (this.groupValues && this.pointer === 0 && this.filteredOptions.length) {\n        this.pointer = 1;\n      }\n\n      this.isOpen = true;\n      /* istanbul ignore else  */\n\n      if (this.searchable) {\n        if (!this.preserveSearch) this.search = '';\n        this.$nextTick(function () {\n          return _this5.$refs.search && _this5.$refs.search.focus();\n        });\n      } else {\n        this.$el.focus();\n      }\n\n      this.$emit('open', this.id);\n    },\n\n    /**\n     * Closes the multiselect’s dropdown.\n     * Sets this.isOpen to FALSE\n     */\n    deactivate: function deactivate() {\n      /* istanbul ignore else */\n      if (!this.isOpen) return;\n      this.isOpen = false;\n      /* istanbul ignore else  */\n\n      if (this.searchable) {\n        this.$refs.search && this.$refs.search.blur();\n      } else {\n        this.$el.blur();\n      }\n\n      if (!this.preserveSearch) this.search = '';\n      this.$emit('close', this.getValue(), this.id);\n    },\n\n    /**\n     * Call this.activate() or this.deactivate()\n     * depending on this.isOpen value.\n     *\n     * @fires this#activate || this#deactivate\n     * @property {Boolean} isOpen indicates if dropdown is open\n     */\n    toggle: function toggle() {\n      this.isOpen ? this.deactivate() : this.activate();\n    },\n\n    /**\n     * Updates the hasEnoughSpace variable used for\n     * detecting where to expand the dropdown\n     */\n    adjustPosition: function adjustPosition() {\n      if (typeof window === 'undefined') return;\n      var spaceAbove = this.$el.getBoundingClientRect().top;\n      var spaceBelow = window.innerHeight - this.$el.getBoundingClientRect().bottom;\n      var hasEnoughSpaceBelow = spaceBelow > this.maxHeight;\n\n      if (hasEnoughSpaceBelow || spaceBelow > spaceAbove || this.openDirection === 'below' || this.openDirection === 'bottom') {\n        this.preferredOpenDirection = 'below';\n        this.optimizedHeight = Math.min(spaceBelow - 40, this.maxHeight);\n      } else {\n        this.preferredOpenDirection = 'above';\n        this.optimizedHeight = Math.min(spaceAbove - 40, this.maxHeight);\n      }\n    }\n  }\n};",null]}