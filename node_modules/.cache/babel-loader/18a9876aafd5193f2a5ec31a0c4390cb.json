{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/core/services/auth.js","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/core/services/auth.js","mtime":1603898990376},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1597736267502}],"contextDependencies":[],"result":["import Storage from '@core/helpers/storage';\nimport { isEmpty } from '@core/utils/object';\nvar key = 'auth';\nvar AuthService = {\n  user: {},\n  store: {},\n\n  /**\n   * Init\n   */\n  init: function init() {\n    var user = this.getStorage();\n\n    if (user && !isEmpty(user)) {\n      this.set(user, false);\n    }\n  },\n\n  /**\n   * Set\n   * @param user\n   * @param storage\n   */\n  set: function set(user) {\n    var storage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.user = user || {};\n\n    if (storage) {\n      this.storage(user);\n    }\n  },\n\n  /**\n   * Get id\n   * @returns {number}\n   */\n  getId: function getId() {\n    return parseInt(this.user.id, 10) || 0;\n  },\n\n  /**\n   * Get email\n   * @returns {string}\n   */\n  getEmail: function getEmail() {\n    return this.user.email;\n  },\n\n  /**\n   * Get access token\n   * @returns {string}\n   */\n  getAccessToken: function getAccessToken() {\n    return this.user.accessToken;\n  },\n\n  /**\n   * Is authenticated\n   * @returns {boolean}\n   */\n  isAuthenticated: function isAuthenticated() {\n    return this.user.id > 0;\n  },\n\n  /**\n   * Get data from storage\n   * @returns {*|{}}\n   */\n  getStorage: function getStorage() {\n    return Storage.get(key, {});\n  },\n\n  /**\n   * Storage data\n   * @param data\n   */\n  storage: function storage(data) {\n    Storage.set(key, data);\n  },\n\n  /**\n   * Storage access token\n   * @param accessToken\n   */\n  storageAccessToken: function storageAccessToken(accessToken) {\n    var user = Object.assign({}, AuthService.user, {\n      accessToken: accessToken\n    });\n    AuthService.user = user;\n    AuthService.storage(user);\n  },\n\n  /**\n   * Clear storage\n   */\n  clear: function clear() {\n    Storage.remove(key);\n  }\n};\nexport var getUserId = function getUserId() {\n  return AuthService.getId();\n};\nexport default AuthService;",{"version":3,"sources":["/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/core/services/auth.js"],"names":["Storage","isEmpty","key","AuthService","user","store","init","getStorage","set","storage","getId","parseInt","id","getEmail","email","getAccessToken","accessToken","isAuthenticated","get","data","storageAccessToken","Object","assign","clear","remove","getUserId"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,IAAMC,GAAG,GAAG,MAAZ;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,KAAK,EAAE,EAFW;;AAIlB;;;AAGAC,EAAAA,IAPkB,kBAOX;AACL,QAAMF,IAAI,GAAG,KAAKG,UAAL,EAAb;;AAEA,QAAIH,IAAI,IAAI,CAACH,OAAO,CAACG,IAAD,CAApB,EAA4B;AAC1B,WAAKI,GAAL,CAASJ,IAAT,EAAe,KAAf;AACD;AACF,GAbiB;;AAelB;;;;;AAKAI,EAAAA,GApBkB,eAoBdJ,IApBc,EAoBQ;AAAA,QAAhBK,OAAgB,uEAAN,IAAM;AACxB,SAAKL,IAAL,GAAYA,IAAI,IAAI,EAApB;;AAEA,QAAIK,OAAJ,EAAa;AACX,WAAKA,OAAL,CAAaL,IAAb;AACD;AACF,GA1BiB;;AA4BlB;;;;AAIAM,EAAAA,KAhCkB,mBAgCV;AACN,WAAOC,QAAQ,CAAC,KAAKP,IAAL,CAAUQ,EAAX,EAAe,EAAf,CAAR,IAA8B,CAArC;AACD,GAlCiB;;AAoClB;;;;AAIAC,EAAAA,QAxCkB,sBAwCP;AACT,WAAO,KAAKT,IAAL,CAAUU,KAAjB;AACD,GA1CiB;;AA4ClB;;;;AAIAC,EAAAA,cAhDkB,4BAgDD;AACf,WAAO,KAAKX,IAAL,CAAUY,WAAjB;AACD,GAlDiB;;AAoDlB;;;;AAIAC,EAAAA,eAxDkB,6BAwDA;AAChB,WAAO,KAAKb,IAAL,CAAUQ,EAAV,GAAe,CAAtB;AACD,GA1DiB;;AA4DlB;;;;AAIAL,EAAAA,UAhEkB,wBAgEL;AACX,WAAOP,OAAO,CAACkB,GAAR,CAAYhB,GAAZ,EAAiB,EAAjB,CAAP;AACD,GAlEiB;;AAoElB;;;;AAIAO,EAAAA,OAxEkB,mBAwEVU,IAxEU,EAwEJ;AACZnB,IAAAA,OAAO,CAACQ,GAAR,CAAYN,GAAZ,EAAiBiB,IAAjB;AACD,GA1EiB;;AA4ElB;;;;AAIAC,EAAAA,kBAhFkB,8BAgFCJ,WAhFD,EAgFc;AAC9B,QAAMZ,IAAI,GAAGiB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,WAAW,CAACC,IAA9B,EAAoC;AAAEY,MAAAA,WAAW,EAAXA;AAAF,KAApC,CAAb;AACAb,IAAAA,WAAW,CAACC,IAAZ,GAAmBA,IAAnB;AACAD,IAAAA,WAAW,CAACM,OAAZ,CAAoBL,IAApB;AACD,GApFiB;;AAsFlB;;;AAGAmB,EAAAA,KAzFkB,mBAyFV;AACNvB,IAAAA,OAAO,CAACwB,MAAR,CAAetB,GAAf;AACD;AA3FiB,CAApB;AA8FA,OAAO,IAAMuB,SAAS,GAAG,SAAZA,SAAY;AAAA,SAAMtB,WAAW,CAACO,KAAZ,EAAN;AAAA,CAAlB;AAEP,eAAeP,WAAf","sourcesContent":["import Storage from '@core/helpers/storage'\nimport { isEmpty } from '@core/utils/object'\n\nconst key = 'auth'\n\nconst AuthService = {\n  user: {},\n  store: {},\n\n  /**\n   * Init\n   */\n  init() {\n    const user = this.getStorage()\n\n    if (user && !isEmpty(user)) {\n      this.set(user, false)\n    }\n  },\n\n  /**\n   * Set\n   * @param user\n   * @param storage\n   */\n  set(user, storage = true) {\n    this.user = user || {}\n\n    if (storage) {\n      this.storage(user)\n    }\n  },\n\n  /**\n   * Get id\n   * @returns {number}\n   */\n  getId() {\n    return parseInt(this.user.id, 10) || 0\n  },\n\n  /**\n   * Get email\n   * @returns {string}\n   */\n  getEmail() {\n    return this.user.email\n  },\n\n  /**\n   * Get access token\n   * @returns {string}\n   */\n  getAccessToken() {\n    return this.user.accessToken\n  },\n\n  /**\n   * Is authenticated\n   * @returns {boolean}\n   */\n  isAuthenticated() {\n    return this.user.id > 0\n  },\n\n  /**\n   * Get data from storage\n   * @returns {*|{}}\n   */\n  getStorage() {\n    return Storage.get(key, {})\n  },\n\n  /**\n   * Storage data\n   * @param data\n   */\n  storage(data) {\n    Storage.set(key, data)\n  },\n\n  /**\n   * Storage access token\n   * @param accessToken\n   */\n  storageAccessToken(accessToken) {\n    const user = Object.assign({}, AuthService.user, { accessToken })\n    AuthService.user = user\n    AuthService.storage(user)\n  },\n\n  /**\n   * Clear storage\n   */\n  clear() {\n    Storage.remove(key)\n  },\n}\n\nexport const getUserId = () => AuthService.getId()\n\nexport default AuthService\n"]}]}