{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/store/index.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/order-mapping/store/index.js","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nvar _mutations;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport api from '../api';\nimport ShopService from '@core/services/shop';\nimport AuthService from '@core/services/auth';\nexport var FETCH_PRODUCT_TYPES = 'fetchProductTypes';\nexport var FETCH_PRODUCT_TYPE = 'fetchProductType';\nexport var UPDATE_PRODUCT_TYPE = 'updateProductType';\nexport var CREATE_PRODUCT_TYPE = 'createProductType';\nexport var UPDATE_PRODUCT_TYPES_STATUS = 'updateProductTypesStatus';\nexport var FETCH_PACKAGES = 'fetchPackages';\nexport var FETCH_PACKAGE = 'fetchPackage';\nexport var UPDATE_PACKAGE = 'updatePackage';\nexport var CREATE_PACKAGE = 'createPackage';\nexport var FETCH_ORDER_MAPPINGS = 'fetchOrderMappings';\nexport var FETCH_ORDER_MAPPINGS_COUNT = 'fetchOrderMappingsCount';\nexport var FETCH_ORDER_MAPPING = 'fetchOrderMapping';\nexport var FETCH_PRODUCT_OPTIONS = 'fetchProductOptions';\nexport var FETCH_ORDER_MAPPING_FAILS = 'fetchOrderMappingFails';\nexport var FETCH_ORDER_MAPPING_FAILS_COUNT = 'fetchOrderMappingFailsCount';\n/**\n * State\n */\n\nexport var state = {\n  productType: {},\n  productTypes: [],\n  packages: [],\n  package: {},\n  orderMappingsList: [],\n  orderMappingsCount: 0,\n  orderMapping: {},\n  options: [],\n  optionSets: [],\n  orderMappingFails: [],\n  orderMappingFailsCount: 0\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, FETCH_PRODUCT_TYPE, function (state, payload) {\n  state.productType = payload;\n}), _defineProperty(_mutations, FETCH_PRODUCT_TYPES, function (state, payload) {\n  state.productTypes = payload;\n}), _defineProperty(_mutations, CREATE_PRODUCT_TYPE, function (state, payload) {\n  state.productTypes.unshift(payload);\n}), _defineProperty(_mutations, FETCH_PACKAGES, function (state, payload) {\n  state.packages = payload;\n}), _defineProperty(_mutations, FETCH_PACKAGE, function (state, payload) {\n  state.package = payload;\n}), _defineProperty(_mutations, CREATE_PACKAGE, function (state, payload) {\n  state.packages.push(payload);\n}), _defineProperty(_mutations, FETCH_ORDER_MAPPINGS, function (state, payload) {\n  state.orderMappingsList = payload;\n}), _defineProperty(_mutations, FETCH_ORDER_MAPPINGS_COUNT, function (state, payload) {\n  state.orderMappingsCount = payload;\n}), _defineProperty(_mutations, FETCH_ORDER_MAPPING, function (state, payload) {\n  state.orderMapping = payload;\n}), _defineProperty(_mutations, FETCH_PRODUCT_OPTIONS, function (state, payload) {\n  state.options = payload.options;\n  state.optionSets = payload.option_sets;\n}), _defineProperty(_mutations, FETCH_ORDER_MAPPING_FAILS, function (state, payload) {\n  state.orderMappingFails = payload;\n}), _defineProperty(_mutations, FETCH_ORDER_MAPPING_FAILS_COUNT, function (state, payload) {\n  state.orderMappingFailsCount = payload;\n}), _mutations);\n/**\n * Actions\n */\n\nexport var actions = {\n  /**\n   * Init\n   * @param commit\n   */\n  init: function init(_ref) {\n    var commit = _ref.commit;\n    ShopService.init();\n\n    if (ShopService.getId()) {\n      handleSelected(commit, {\n        shop: ShopService.shop\n      });\n    }\n  },\n\n  /**\n   * Fetch product types\n   * @param commit\n   * @return {Promise<{success: boolean, message: (*|string)}|{success: boolean}>}\n   */\n  fetchProductTypes: function () {\n    var _fetchProductTypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref2.commit;\n              result = {\n                success: true\n              };\n              _context.next = 4;\n              return api.fetchProductTypes(payload);\n\n            case 4:\n              response = _context.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  product_types: []\n                };\n              }\n\n              commit(FETCH_PRODUCT_TYPES, response.product_types);\n              return _context.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function fetchProductTypes(_x, _x2) {\n      return _fetchProductTypes.apply(this, arguments);\n    }\n\n    return fetchProductTypes;\n  }(),\n  fetchProductType: function () {\n    var _fetchProductType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref3.commit;\n              result = {\n                success: true\n              };\n              _context2.next = 4;\n              return api.fetchProductType(payload);\n\n            case 4:\n              response = _context2.sent;\n\n              if (response && !response.product_type) {\n                result = {\n                  success: true,\n                  message: response.errorMessage\n                };\n                response = {\n                  product_type: {}\n                };\n              }\n\n              commit(FETCH_PRODUCT_TYPE, response.product_type);\n              return _context2.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function fetchProductType(_x3, _x4) {\n      return _fetchProductType.apply(this, arguments);\n    }\n\n    return fetchProductType;\n  }(),\n\n  /**\n   * Add product type\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean, message: *}|{success: boolean}>}\n   */\n  createProductType: function () {\n    var _createProductType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4, payload) {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref4.commit;\n              _context3.next = 3;\n              return api.addProductType(payload);\n\n            case 3:\n              response = _context3.sent;\n\n              if (!(response && response.product_type && response.product_type.id)) {\n                _context3.next = 7;\n                break;\n              }\n\n              commit(CREATE_PRODUCT_TYPE, response.product_type);\n              return _context3.abrupt(\"return\", {\n                success: true,\n                id: response.product_type.id\n              });\n\n            case 7:\n              return _context3.abrupt(\"return\", {\n                success: false,\n                message: response.message || response.error\n              });\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function createProductType(_x5, _x6) {\n      return _createProductType.apply(this, arguments);\n    }\n\n    return createProductType;\n  }(),\n\n  /**\n   * Update product type\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  // eslint-disable-next-line\n  updateProductType: function () {\n    var _updateProductType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref5, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref5.commit;\n              result = {\n                success: true\n              };\n              _context4.next = 4;\n              return api.updateProductType(payload);\n\n            case 4:\n              response = _context4.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  product_type: {}\n                };\n              }\n\n              commit(FETCH_PRODUCT_TYPE, response.product_type);\n              return _context4.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function updateProductType(_x7, _x8) {\n      return _updateProductType.apply(this, arguments);\n    }\n\n    return updateProductType;\n  }(),\n  //eslint-disable-next-line\n  updateProductTypesStatus: function () {\n    var _updateProductTypesStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref6, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref6.commit;\n              result = {\n                success: true\n              };\n              _context5.next = 4;\n              return api.updateProductTypesStatus(payload);\n\n            case 4:\n              response = _context5.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              return _context5.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function updateProductTypesStatus(_x9, _x10) {\n      return _updateProductTypesStatus.apply(this, arguments);\n    }\n\n    return updateProductTypesStatus;\n  }(),\n  fetchPackages: function () {\n    var _fetchPackages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref7, params) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref7.commit;\n              result = {\n                success: true\n              };\n              _context6.next = 4;\n              return api.fetchPackages(params);\n\n            case 4:\n              response = _context6.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  packages: {}\n                };\n              }\n\n              commit(FETCH_PACKAGES, response.packages);\n              return _context6.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function fetchPackages(_x11, _x12) {\n      return _fetchPackages.apply(this, arguments);\n    }\n\n    return fetchPackages;\n  }(),\n  fetchPackage: function () {\n    var _fetchPackage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref8, params) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              commit = _ref8.commit;\n              result = {\n                success: true\n              };\n              _context7.next = 4;\n              return api.fetchPackages(params);\n\n            case 4:\n              response = _context7.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  package: {}\n                };\n              }\n\n              commit(FETCH_PACKAGE, response.package);\n              return _context7.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    function fetchPackage(_x13, _x14) {\n      return _fetchPackage.apply(this, arguments);\n    }\n\n    return fetchPackage;\n  }(),\n\n  /**\n   * Fetch order mapping list\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  fetchOrderMappingList: function () {\n    var _fetchOrderMappingList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_ref9, _ref10) {\n      var commit, type, payload, result, list;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              commit = _ref9.commit;\n              type = _ref10.type, payload = _ref10.payload;\n              result = {\n                success: true\n              };\n              _context8.next = 5;\n              return api.fetchOrderMappings(type, payload);\n\n            case 5:\n              list = _context8.sent;\n\n              if (!list.order_mappings) {\n                list.order_mappings = [];\n                list.count = 0;\n                result = {\n                  success: false,\n                  message: list.errorMessage || ''\n                };\n              }\n\n              commit(FETCH_ORDER_MAPPINGS, list.order_mappings);\n              commit(FETCH_ORDER_MAPPINGS_COUNT, list.count);\n              return _context8.abrupt(\"return\", result);\n\n            case 10:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function fetchOrderMappingList(_x15, _x16) {\n      return _fetchOrderMappingList.apply(this, arguments);\n    }\n\n    return fetchOrderMappingList;\n  }(),\n\n  /**\n   * Fetch order mapping\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  fetchOrderMapping: function () {\n    var _fetchOrderMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref11, _ref12) {\n      var commit, type, id, result, response;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              commit = _ref11.commit;\n              type = _ref12.type, id = _ref12.id;\n              result = {\n                success: true\n              };\n              _context9.next = 5;\n              return api.fetchOrderMapping(type, id);\n\n            case 5:\n              response = _context9.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  order_mapping: {}\n                };\n              }\n\n              commit(FETCH_ORDER_MAPPING, response.order_mapping);\n              return _context9.abrupt(\"return\", result);\n\n            case 9:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    function fetchOrderMapping(_x17, _x18) {\n      return _fetchOrderMapping.apply(this, arguments);\n    }\n\n    return fetchOrderMapping;\n  }(),\n\n  /**\n   * Create or update order mapping\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  createOrUpdateOrderMapping: function () {\n    var _createOrUpdateOrderMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_, _ref13) {\n      var type, payload, response;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              type = _ref13.type, payload = _ref13.payload;\n              _context10.next = 3;\n              return api.createOrUpdateOrderMapping(type, payload);\n\n            case 3:\n              response = _context10.sent;\n\n              if (!(response && response.errorMessage)) {\n                _context10.next = 6;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage\n              });\n\n            case 6:\n              return _context10.abrupt(\"return\", {\n                success: true,\n                id: response.id\n              });\n\n            case 7:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    function createOrUpdateOrderMapping(_x19, _x20) {\n      return _createOrUpdateOrderMapping.apply(this, arguments);\n    }\n\n    return createOrUpdateOrderMapping;\n  }(),\n\n  /**\n   * Delete order mapping\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  deleteOrderMapping: function () {\n    var _deleteOrderMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(_, _ref14) {\n      var type, id, response;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              type = _ref14.type, id = _ref14.id;\n              _context11.next = 3;\n              return api.deleteOrderMapping(type, id);\n\n            case 3:\n              response = _context11.sent;\n\n              if (!(response && response.errorMessage)) {\n                _context11.next = 6;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage\n              });\n\n            case 6:\n              return _context11.abrupt(\"return\", {\n                success: true\n              });\n\n            case 7:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    function deleteOrderMapping(_x21, _x22) {\n      return _deleteOrderMapping.apply(this, arguments);\n    }\n\n    return deleteOrderMapping;\n  }(),\n  fetchOptionsByProductId: function () {\n    var _fetchOptionsByProductId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_ref15, id) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              commit = _ref15.commit;\n              result = {\n                success: true\n              };\n              _context12.next = 4;\n              return api.getOptionsByProductId(id);\n\n            case 4:\n              response = _context12.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  options: [],\n                  option_sets: []\n                };\n              }\n\n              commit(FETCH_PRODUCT_OPTIONS, response);\n              return _context12.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    function fetchOptionsByProductId(_x23, _x24) {\n      return _fetchOptionsByProductId.apply(this, arguments);\n    }\n\n    return fetchOptionsByProductId;\n  }(),\n\n  /**\n   * Fetch order mapping fails\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  fetchOrderMappingFails: function () {\n    var _fetchOrderMappingFails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(_ref16, payload) {\n      var commit, result, list;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              commit = _ref16.commit;\n              result = {\n                success: true\n              };\n              _context13.next = 4;\n              return api.fetchOrderMappingFails(payload);\n\n            case 4:\n              list = _context13.sent;\n\n              if (!list.order_map_fails) {\n                list.order_map_fails = [];\n                list.count = 0;\n                result = {\n                  success: false,\n                  message: list.errorMessage || ''\n                };\n              }\n\n              commit(FETCH_ORDER_MAPPING_FAILS, list.order_map_fails);\n              commit(FETCH_ORDER_MAPPING_FAILS_COUNT, list.count);\n              return _context13.abrupt(\"return\", result);\n\n            case 9:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    function fetchOrderMappingFails(_x25, _x26) {\n      return _fetchOrderMappingFails.apply(this, arguments);\n    }\n\n    return fetchOrderMappingFails;\n  }(),\n\n  /**\n   * Retry order mapping fails\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  retryOrderMappingFails: function () {\n    var _retryOrderMappingFails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(_, payload) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return api.retryOrderMappingFails(payload);\n\n            case 2:\n              response = _context14.sent;\n\n              if (!(response && response.errorMessage)) {\n                _context14.next = 5;\n                break;\n              }\n\n              return _context14.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage\n              });\n\n            case 5:\n              return _context14.abrupt(\"return\", {\n                success: true\n              });\n\n            case 6:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    function retryOrderMappingFails(_x27, _x28) {\n      return _retryOrderMappingFails.apply(this, arguments);\n    }\n\n    return retryOrderMappingFails;\n  }()\n};\n/**\n * Handle selected shop\n * @param commit\n * @param shop\n * @param accessToken\n */\n\nvar handleSelected = function handleSelected(commit, _ref17) {\n  var shop = _ref17.shop,\n      accessToken = _ref17.accessToken;\n  commit(FETCH_PRODUCT_TYPE, shop);\n  ShopService.set(shop);\n  var storage = {\n    id: shop.id,\n    domain: shop.domain,\n    name: shop.name,\n    logo: shop.logo,\n    platform: shop.platform\n  };\n  ShopService.storage(storage);\n\n  if (accessToken) {\n    AuthService.storageAccessToken(accessToken);\n  }\n};",null]}