{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/helpers/log.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/helpers/log.js","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar isEnableLog = false;\n/**\n * Set enable log\n * @param enable\n */\n\nexport function setEnableLog(enable) {\n  isEnableLog = enable;\n}\n/**\n * Handle console log\n * @param type\n * @param args\n */\n\nfunction consoleLog(type, args) {\n  var _console, _console2, _console3, _console4;\n\n  if (!isEnableLog) {\n    return;\n  }\n  /* eslint-disable */\n\n\n  switch (type) {\n    case 'info':\n      (_console = console).info.apply(_console, _toConsumableArray(args));\n\n      break;\n\n    case 'warn':\n      (_console2 = console).warn.apply(_console2, _toConsumableArray(args));\n\n      break;\n\n    case 'error':\n      (_console3 = console).error.apply(_console3, _toConsumableArray(args));\n\n      break;\n\n    default:\n      (_console4 = console).log.apply(_console4, _toConsumableArray(args));\n\n      break;\n  }\n  /* eslint-enable */\n\n}\n/**\n * Console log\n *\n * @param messages\n */\n\n\nexport function log() {\n  for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {\n    messages[_key] = arguments[_key];\n  }\n\n  consoleLog('', messages);\n}\n/**\n * Console info\n *\n * @param messages\n */\n\nexport function info() {\n  for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    messages[_key2] = arguments[_key2];\n  }\n\n  consoleLog('info', messages);\n}\n/**\n * Console warn\n *\n * @param messages\n */\n\nexport function warn() {\n  for (var _len3 = arguments.length, messages = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    messages[_key3] = arguments[_key3];\n  }\n\n  consoleLog('warn', messages);\n}\n/**\n * Console error\n *\n * @param messages\n */\n\nexport function error() {\n  for (var _len4 = arguments.length, messages = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    messages[_key4] = arguments[_key4];\n  }\n\n  consoleLog('error', messages);\n}\n/**\n * Init global log\n */\n\nexport function initGlobalLog() {\n  window.log = log;\n  window.error = error;\n  window.info = info;\n  window.warn = warn;\n}\nexport default log;",{"version":3,"sources":["/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/helpers/log.js"],"names":["isEnableLog","setEnableLog","enable","consoleLog","type","args","console","info","warn","error","log","messages","initGlobalLog","window"],"mappings":";;;;;;;;;;;;AAAA,IAAIA,WAAW,GAAG,KAAlB;AAEA;;;;;AAIA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AACnCF,EAAAA,WAAW,GAAGE,MAAd;AACD;AAED;;;;;;AAKA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;AAAA;;AAC9B,MAAI,CAACL,WAAL,EAAkB;AAChB;AACD;AAED;;;AACA,UAAQI,IAAR;AACE,SAAK,MAAL;AACE,kBAAAE,OAAO,EAACC,IAAR,oCAAgBF,IAAhB;;AACA;;AACF,SAAK,MAAL;AACE,mBAAAC,OAAO,EAACE,IAAR,qCAAgBH,IAAhB;;AACA;;AACF,SAAK,OAAL;AACE,mBAAAC,OAAO,EAACG,KAAR,qCAAiBJ,IAAjB;;AACA;;AACF;AACE,mBAAAC,OAAO,EAACI,GAAR,qCAAeL,IAAf;;AACA;AAZJ;AAcA;;AACD;AAED;;;;;;;AAKA,OAAO,SAASK,GAAT,GAA0B;AAAA,oCAAVC,QAAU;AAAVA,IAAAA,QAAU;AAAA;;AAC/BR,EAAAA,UAAU,CAAC,EAAD,EAAKQ,QAAL,CAAV;AACD;AAED;;;;;;AAKA,OAAO,SAASJ,IAAT,GAA2B;AAAA,qCAAVI,QAAU;AAAVA,IAAAA,QAAU;AAAA;;AAChCR,EAAAA,UAAU,CAAC,MAAD,EAASQ,QAAT,CAAV;AACD;AAED;;;;;;AAKA,OAAO,SAASH,IAAT,GAA2B;AAAA,qCAAVG,QAAU;AAAVA,IAAAA,QAAU;AAAA;;AAChCR,EAAAA,UAAU,CAAC,MAAD,EAASQ,QAAT,CAAV;AACD;AAED;;;;;;AAKA,OAAO,SAASF,KAAT,GAA4B;AAAA,qCAAVE,QAAU;AAAVA,IAAAA,QAAU;AAAA;;AACjCR,EAAAA,UAAU,CAAC,OAAD,EAAUQ,QAAV,CAAV;AACD;AAED;;;;AAGA,OAAO,SAASC,aAAT,GAAyB;AAC9BC,EAAAA,MAAM,CAACH,GAAP,GAAaA,GAAb;AACAG,EAAAA,MAAM,CAACJ,KAAP,GAAeA,KAAf;AACAI,EAAAA,MAAM,CAACN,IAAP,GAAcA,IAAd;AACAM,EAAAA,MAAM,CAACL,IAAP,GAAcA,IAAd;AACD;AAED,eAAeE,GAAf","sourcesContent":["let isEnableLog = false\n\n/**\n * Set enable log\n * @param enable\n */\nexport function setEnableLog(enable) {\n  isEnableLog = enable\n}\n\n/**\n * Handle console log\n * @param type\n * @param args\n */\nfunction consoleLog(type, args) {\n  if (!isEnableLog) {\n    return\n  }\n\n  /* eslint-disable */\n  switch (type) {\n    case 'info':\n      console.info(...args)\n      break\n    case 'warn':\n      console.warn(...args)\n      break\n    case 'error':\n      console.error(...args)\n      break\n    default:\n      console.log(...args)\n      break\n  }\n  /* eslint-enable */\n}\n\n/**\n * Console log\n *\n * @param messages\n */\nexport function log(...messages) {\n  consoleLog('', messages)\n}\n\n/**\n * Console info\n *\n * @param messages\n */\nexport function info(...messages) {\n  consoleLog('info', messages)\n}\n\n/**\n * Console warn\n *\n * @param messages\n */\nexport function warn(...messages) {\n  consoleLog('warn', messages)\n}\n\n/**\n * Console error\n *\n * @param messages\n */\nexport function error(...messages) {\n  consoleLog('error', messages)\n}\n\n/**\n * Init global log\n */\nexport function initGlobalLog() {\n  window.log = log\n  window.error = error\n  window.info = info\n  window.warn = warn\n}\n\nexport default log\n"]}]}