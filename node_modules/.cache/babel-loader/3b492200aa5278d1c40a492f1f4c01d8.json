{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/vue/directives.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/vue/directives.js","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport { domOn } from '../utils/dom';\nimport { capitalize } from '@core/utils/string';\nvar nodeList = [];\nvar ctx = '@@clickoutsideContext';\nvar startClick;\nvar seed = 0;\n!Vue.prototype.$isServer && domOn(document, 'mousedown', function (e) {\n  return startClick = e;\n});\n!Vue.prototype.$isServer && domOn(document, 'mouseup', function (e) {\n  nodeList.forEach(function (node) {\n    return node[ctx].documentHandler(e, startClick);\n  });\n});\n\nfunction createDocumentHandler(el, binding, vnode) {\n  return function () {\n    var mouseup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var mousedown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!vnode || !vnode.context || !mouseup.target || !mousedown.target || el.contains(mouseup.target) || el.contains(mousedown.target) || el === mouseup.target || vnode.context.popperElm && (vnode.context.popperElm.contains(mouseup.target) || vnode.context.popperElm.contains(mousedown.target))) return;\n\n    if (binding.expression && el[ctx].methodName && vnode.context[el[ctx].methodName]) {\n      vnode.context[el[ctx].methodName]();\n    } else {\n      el[ctx].bindingFn && el[ctx].bindingFn();\n    }\n  };\n}\n/**\n * v-clickoutside\n */\n\n\nexport var clickoutside = {\n  bind: function bind(el, binding, vnode) {\n    nodeList.push(el);\n    var id = seed++;\n    el[ctx] = {\n      id: id,\n      documentHandler: createDocumentHandler(el, binding, vnode),\n      methodName: binding.expression,\n      bindingFn: binding.value\n    };\n  },\n  update: function update(el, binding, vnode) {\n    el[ctx].documentHandler = createDocumentHandler(el, binding, vnode);\n    el[ctx].methodName = binding.expression;\n    el[ctx].bindingFn = binding.value;\n  },\n  unbind: function unbind(el) {\n    var len = nodeList.length;\n\n    for (var i = 0; i < len; i++) {\n      if (nodeList[i][ctx].id === el[ctx].id) {\n        nodeList.splice(i, 1);\n        break;\n      }\n    }\n\n    delete el[ctx];\n  }\n};\n\nvar getFormatStatus = function getFormatStatus(status) {\n  var statusClass = '';\n\n  switch (status) {\n    case 'draft':\n    case 'pending':\n    case 'unpaid':\n    case 'awaiting':\n      statusClass = 'default';\n      break;\n\n    case 'process':\n    case 'active':\n      statusClass = 'success';\n      break;\n\n    case 'feedback':\n    case 'fulfilled':\n      statusClass = 'primary';\n      break;\n\n    case 'paid':\n    case 'open':\n      statusClass = 'info';\n      break;\n\n    case 'rejected':\n      statusClass = 'warning';\n      break;\n\n    case 'inactive':\n    case 'canceled':\n      statusClass = 'danger';\n      break;\n\n    case 'closed':\n      statusClass = 'dark';\n      break;\n  }\n\n  return {\n    text: capitalize(status),\n    classList: \"badge badge-round badge-\".concat(statusClass)\n  };\n};\n\nexport var labelStatus = {\n  update: function update(el, binding) {\n    var _getFormatStatus = getFormatStatus(binding.value),\n        text = _getFormatStatus.text,\n        classList = _getFormatStatus.classList;\n\n    el.classList = classList;\n    el.innerText = text;\n  },\n  inserted: function inserted(el, binding) {\n    var _getFormatStatus2 = getFormatStatus(binding.value),\n        text = _getFormatStatus2.text,\n        classList = _getFormatStatus2.classList;\n\n    el.classList = classList;\n    el.innerText = text;\n  }\n};\n\nvar initGlobalDirectives = function initGlobalDirectives() {\n  Vue.directive('status', labelStatus);\n};\n\nexport default initGlobalDirectives;",null]}