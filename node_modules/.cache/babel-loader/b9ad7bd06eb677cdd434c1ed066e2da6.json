{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/modal/Modal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/uikit/components/modal/Modal.vue","mtime":1604479001997},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1604479001773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { removeElement } from '../../utils/dom';\nimport config from '../../config';\nexport default {\n  name: 'PModal',\n  props: {\n    active: Boolean,\n    component: [Object, Function],\n    content: String,\n    programmatic: Boolean,\n    props: Object,\n    events: Object,\n    size: {\n      type: String,\n      default: 'lg'\n    },\n    width: {\n      type: [String, Number],\n      default: 960\n    },\n    hasModalCard: Boolean,\n    animation: {\n      type: String,\n      default: 'zoom-out'\n    },\n    canCancel: {\n      type: [Array, Boolean],\n      default: function _default() {\n        return config.defaultModalCanCancel;\n      }\n    },\n    onCancel: {\n      type: Function,\n      default: function _default() {}\n    },\n    scroll: {\n      type: String,\n      default: function _default() {\n        return config.defaultModalScroll ? config.defaultModalScroll : 'clip';\n      },\n      validator: function validator(value) {\n        return ['clip', 'keep'].indexOf(value) >= 0;\n      }\n    },\n    fullScreen: Boolean,\n    customClass: String,\n    title: {\n      type: String,\n      default: ''\n    },\n    typeClass: String\n  },\n  data: function data() {\n    return {\n      isActive: this.active || false,\n      savedScrollTop: null,\n      newWidth: typeof this.width === 'number' ? this.width + 'px' : this.width\n    };\n  },\n  computed: {\n    classSize: function classSize() {\n      return this.size ? 'modal-' + this.size : '';\n    },\n    cancelOptions: function cancelOptions() {\n      return typeof this.canCancel === 'boolean' ? this.canCancel ? config.defaultModalCanCancel : [] : this.canCancel;\n    },\n    showX: function showX() {\n      return this.cancelOptions.indexOf('x') >= 0;\n    },\n    customStyle: function customStyle() {\n      if (!this.fullScreen) {\n        return {\n          maxWidth: this.newWidth\n        };\n      }\n\n      return null;\n    }\n  },\n  watch: {\n    active: function active(value) {\n      this.isActive = value;\n    },\n    isActive: function isActive() {\n      this.handleScroll();\n    }\n  },\n  methods: {\n    hasHeaderSlot: function hasHeaderSlot() {\n      return this.$slots.header || this.title;\n    },\n    handleScroll: function handleScroll() {\n      if (typeof window === 'undefined') {\n        return;\n      }\n\n      if (this.scroll === 'clip') {\n        if (this.isActive) {\n          document.documentElement.classList.add('is-clipped');\n        } else {\n          document.documentElement.classList.remove('is-clipped');\n        }\n\n        return;\n      }\n\n      this.savedScrollTop = !this.savedScrollTop ? document.documentElement.scrollTop : this.savedScrollTop;\n\n      if (this.isActive) {\n        document.body.classList.add('is-noscroll');\n      } else {\n        document.body.classList.remove('is-noscroll');\n      }\n\n      if (this.isActive) {\n        document.body.style.top = \"-\".concat(this.savedScrollTop, \"px\");\n        return;\n      }\n\n      document.documentElement.scrollTop = this.savedScrollTop;\n      document.body.style.top = null;\n      this.savedScrollTop = null;\n    },\n\n    /**\n     * Close the Modal if canCancel and call the onCancel prop (function).\n     */\n    cancel: function cancel(method) {\n      if (this.cancelOptions.indexOf(method) < 0) {\n        return;\n      }\n\n      this.onCancel.apply(null, arguments);\n      this.close();\n    },\n\n    /**\n     * Call the onCancel prop (function).\n     * Emit events, and destroy modal if it's programmatic.\n     */\n    close: function close() {\n      var _this = this;\n\n      this.$emit('close');\n      this.$emit('update:active', false); // Timeout for the animation complete before destroying\n\n      if (this.programmatic) {\n        this.isActive = false;\n        setTimeout(function () {\n          _this.$destroy();\n\n          removeElement(_this.$el);\n        }, 150);\n      }\n    },\n\n    /**\n     * Keypress event that is bound to the document.\n     */\n    keyPress: function keyPress(event) {\n      // Esc key\n      if (this.isActive && event.keyCode === 27) {\n        this.cancel('escape');\n      }\n    }\n  },\n  created: function created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('keyup', this.keyPress);\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Insert the Modal component in body tag\n    // only if it's programmatic\n    this.programmatic && document.body.appendChild(this.$el);\n  },\n  mounted: function mounted() {\n    if (this.programmatic) this.isActive = true;else if (this.isActive) this.handleScroll();\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('keyup', this.keyPress); // reset scroll\n\n      document.documentElement.classList.remove('is-clipped');\n      var savedScrollTop = !this.savedScrollTop ? document.documentElement.scrollTop : this.savedScrollTop;\n      document.body.classList.remove('is-noscroll');\n      document.documentElement.scrollTop = savedScrollTop;\n      document.body.style.top = null;\n    }\n  }\n};",null]}