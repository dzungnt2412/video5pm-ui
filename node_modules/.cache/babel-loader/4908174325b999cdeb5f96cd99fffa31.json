{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/order-mapping/views/components/ModalUpdateAndRetryMapping.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/order-mapping/views/components/ModalUpdateAndRetryMapping.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapActions } from 'vuex';\nimport { cloneDeep } from '@core/utils';\nimport { FETCH_ORDER, UPDATE_ORDER } from '@/packages/container/store/types';\nimport OrderItems from '@/packages/container/views/components/OrderItems';\nexport default {\n  name: 'ModalUpdateAndRetryMapping',\n  components: {\n    OrderItems: OrderItems\n  },\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    orderId: {\n      type: Number,\n      default: 0\n    }\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapState('container', {\n    order: function order(state) {\n      return state.order;\n    }\n  })), mapState('shared', {\n    productTypes: function productTypes(state) {\n      return state.productTypes;\n    }\n  })), mapState('design', {\n    designs: function designs(state) {\n      return state.designs;\n    }\n  })),\n  data: function data() {\n    return {\n      isFetching: false,\n      isSaving: false,\n      isShow: this.visible,\n      orderItems: []\n    };\n  },\n  created: function created() {\n    this.init();\n  },\n  methods: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapActions('container', [FETCH_ORDER, UPDATE_ORDER])), mapActions('design', ['fetchDesigns'])), mapActions('orderMapping', {\n    retryOrderMappingFails: 'retryOrderMappingFails'\n  })), {}, {\n    init: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.isFetching = true;\n                _context.next = 3;\n                return this.fetchOrder(this.orderId);\n\n              case 3:\n                this.isFetching = false;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }(),\n    handleSelectedDesign: function handleSelectedDesign(_ref) {\n      var url = _ref.url,\n          item = _ref.item,\n          design = _ref.design;\n      this.handleUpdateOrderItem(item, {\n        design: design,\n        design_id: design.id,\n        image: url\n      });\n    },\n    handleSelectedProductType: function handleSelectedProductType(_ref2) {\n      var item = _ref2.item,\n          product = _ref2.product;\n      this.handleUpdateOrderItem(item, {\n        product_type_id: product.id,\n        product_type: product\n      });\n    },\n    handleUpdateOrderItem: function handleUpdateOrderItem(item, newVal) {\n      var index = this.orderItems.findIndex(function (_ref3) {\n        var id = _ref3.id;\n        return id === item.id;\n      });\n\n      if (index !== -1) {\n        this.editing = true;\n        this.$set(this.orderItems, index, Object.assign({}, item, newVal));\n      }\n    },\n    close: function close() {\n      this.$emit('update:visible', false);\n    },\n    save: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var response, responseRetry;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.isSaving = true;\n                _context2.next = 3;\n                return this.updateOrder(Object.assign({}, this.order, {\n                  order_items: this.orderItems\n                }));\n\n              case 3:\n                response = _context2.sent;\n\n                if (!(!response || !response.success)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                this.$toast.open({\n                  type: 'error',\n                  message: response.message\n                });\n                this.isSaving = false;\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                this.$set(this, 'orderItems', cloneDeep(this.order.order_items));\n                _context2.next = 11;\n                return this.retryOrderMappingFails({\n                  ids: [this.orderId]\n                });\n\n              case 11:\n                responseRetry = _context2.sent;\n\n                if (!(!responseRetry || !responseRetry.success)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                this.$toast.open({\n                  type: 'error',\n                  message: responseRetry.message\n                });\n                this.isSaving = false;\n                return _context2.abrupt(\"return\");\n\n              case 16:\n                this.$toast.open({\n                  type: 'success',\n                  message: 'Updated successfully'\n                });\n                this.$emit('save');\n                this.close();\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }),\n  watch: {\n    visible: function visible(value) {\n      this.isShow = value;\n    },\n    'order.order_items': function orderOrder_items(val) {\n      this.$set(this, 'orderItems', cloneDeep(val));\n    }\n  }\n};",{"version":3,"sources":["ModalUpdateAndRetryMapping.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <p-modal\n    :size=\"'xl'\"\n    :active.sync=\"isShow\"\n    :title=\"`Retry map order ${order.ref_id}`\"\n    @close=\"close\"\n  >\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <section class=\"section-order-items\">\n          <div>\n            <h4>Order items</h4>\n            <order-items\n              :order=\"order\"\n              :items=\"orderItems\"\n              :editing=\"true\"\n              :designs=\"designs\"\n              :fetch-designs=\"fetchDesigns\"\n              :product-types=\"productTypes\"\n              :shop-id=\"order.shop_id\"\n              @selectedProduct=\"handleSelectedProductType\"\n              @selectedDesign=\"handleSelectedDesign\"\n              :is-allow-update=\"true\"\n            />\n          </div>\n        </section>\n      </div>\n    </div>\n    <template slot=\"footer\">\n      <p-button type=\"default\" @click=\"close\">\n        <span>Cancel</span>\n      </p-button>\n      <p-button type=\"primary\" @click=\"save\" :disabled=\"isSaving || isFetching\">\n        <span>Update and Retry</span>\n      </p-button>\n    </template>\n  </p-modal>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport { cloneDeep } from '@core/utils'\nimport { FETCH_ORDER, UPDATE_ORDER } from '@/packages/container/store/types'\nimport OrderItems from '@/packages/container/views/components/OrderItems'\nexport default {\n  name: 'ModalUpdateAndRetryMapping',\n  components: {\n    OrderItems,\n  },\n  props: {\n    visible: {\n      type: Boolean,\n      default: false,\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n    },\n    orderId: {\n      type: Number,\n      default: 0,\n    },\n  },\n  computed: {\n    ...mapState('container', {\n      order: (state) => state.order,\n    }),\n    ...mapState('shared', {\n      productTypes: (state) => state.productTypes,\n    }),\n    ...mapState('design', {\n      designs: (state) => state.designs,\n    }),\n  },\n  data() {\n    return {\n      isFetching: false,\n      isSaving: false,\n      isShow: this.visible,\n      orderItems: [],\n    }\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    ...mapActions('container', [FETCH_ORDER, UPDATE_ORDER]),\n    ...mapActions('design', ['fetchDesigns']),\n    ...mapActions('orderMapping', {\n      retryOrderMappingFails: 'retryOrderMappingFails',\n    }),\n    async init() {\n      this.isFetching = true\n      await this.fetchOrder(this.orderId)\n      this.isFetching = false\n    },\n    handleSelectedDesign({ url, item, design }) {\n      this.handleUpdateOrderItem(item, {\n        design,\n        design_id: design.id,\n        image: url,\n      })\n    },\n\n    handleSelectedProductType({ item, product }) {\n      this.handleUpdateOrderItem(item, {\n        product_type_id: product.id,\n        product_type: product,\n      })\n    },\n    handleUpdateOrderItem(item, newVal) {\n      const index = this.orderItems.findIndex(({ id }) => id === item.id)\n\n      if (index !== -1) {\n        this.editing = true\n        this.$set(this.orderItems, index, Object.assign({}, item, newVal))\n      }\n    },\n    close() {\n      this.$emit('update:visible', false)\n    },\n    async save() {\n      this.isSaving = true\n      const response = await this.updateOrder(\n        Object.assign({}, this.order, { order_items: this.orderItems })\n      )\n\n      if (!response || !response.success) {\n        this.$toast.open({ type: 'error', message: response.message })\n        this.isSaving = false\n        return\n      }\n      this.$set(this, 'orderItems', cloneDeep(this.order.order_items))\n      const responseRetry = await this.retryOrderMappingFails({\n        ids: [this.orderId],\n      })\n\n      if (!responseRetry || !responseRetry.success) {\n        this.$toast.open({ type: 'error', message: responseRetry.message })\n        this.isSaving = false\n        return\n      }\n      this.$toast.open({\n        type: 'success',\n        message: 'Updated successfully',\n      })\n      this.$emit('save')\n      this.close()\n    },\n  },\n  watch: {\n    visible(value) {\n      this.isShow = value\n    },\n    'order.order_items': function(val) {\n      this.$set(this, 'orderItems', cloneDeep(val))\n    },\n  },\n}\n</script>\n"],"sourceRoot":"src/packages/order-mapping/views/components"}]}