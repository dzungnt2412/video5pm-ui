{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/Upload/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/kit/Upload/Index.vue","mtime":1603898990380},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["import _mergeJSXProps from \"@vue/babel-helper-vue-jsx-merge-props\";\nimport Migrating from '../mixins/migrating';\nimport Upload from './Upload';\n\nfunction noop() {}\n\nexport default {\n  name: 'ElUpload',\n  mixins: [Migrating],\n  components: {\n    Upload: Upload\n  },\n  provide: function provide() {\n    return {\n      uploader: this\n    };\n  },\n  props: {\n    action: {\n      type: String,\n      required: true\n    },\n    headers: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    data: Object,\n    multiple: Boolean,\n    name: {\n      type: String,\n      default: 'file'\n    },\n    drag: Boolean,\n    dragger: Boolean,\n    withCredentials: Boolean,\n    showFileList: {\n      type: Boolean,\n      default: true\n    },\n    accept: String,\n    type: {\n      type: String,\n      default: 'select'\n    },\n    beforeUpload: Function,\n    beforeRemove: Function,\n    onRemove: {\n      type: Function,\n      default: noop\n    },\n    onChange: {\n      type: Function,\n      default: noop\n    },\n    onPreview: {\n      type: Function\n    },\n    onSuccess: {\n      type: Function,\n      default: noop\n    },\n    onProgress: {\n      type: Function,\n      default: noop\n    },\n    onError: {\n      type: Function,\n      default: noop\n    },\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n    listType: {\n      type: String,\n      default: 'text'\n    },\n    httpRequest: Function,\n    disabled: Boolean,\n    limit: Number,\n    onExceed: {\n      type: Function,\n      default: noop\n    },\n    limitPreviewSize: {\n      type: Number,\n      default: 5242880\n    },\n    maxFileSize: {\n      type: Number,\n      default: 500000\n    }\n  },\n  data: function data() {\n    return {\n      uploadFiles: [],\n      dragOver: false,\n      draging: false,\n      tempIndex: 1\n    };\n  },\n  computed: {\n    uploadDisabled: function uploadDisabled() {\n      return this.disabled;\n    }\n  },\n  watch: {\n    listType: function listType(type) {\n      if (type === 'picture-card' || type === 'picture') {\n        this.uploadFiles.forEach(function (file) {\n          if (!file.url && file.raw) {\n            try {\n              file.url = URL.createObjectURL(file.raw);\n            } catch (err) {\n              console.error('[Element Error][Upload]', err);\n            }\n          }\n        });\n      }\n    }\n  },\n  methods: {\n    handleStart: function handleStart(rawFile) {\n      rawFile.uid = Date.now() + this.tempIndex++;\n      var file = {\n        status: 'ready',\n        name: rawFile.name,\n        size: rawFile.size,\n        percentage: 0,\n        uid: rawFile.uid,\n        raw: rawFile\n      };\n\n      if (this.listType === 'picture-card' || this.listType === 'picture') {\n        try {\n          if (this.limitPreviewSize > rawFile.size) {\n            file.url = URL.createObjectURL(rawFile);\n          }\n        } catch (err) {\n          console.error('[Element Error][Upload]', err);\n          return;\n        }\n      }\n\n      this.uploadFiles.push(file);\n      this.onChange(file, this.uploadFiles);\n    },\n    handleProgress: function handleProgress(ev, rawFile) {\n      var file = this.getFile(rawFile);\n      this.onProgress(ev, file, this.uploadFiles);\n      file.status = 'uploading';\n      file.percentage = ev.percent || 0;\n    },\n    handleSuccess: function handleSuccess(res, rawFile) {\n      var file = this.getFile(rawFile);\n\n      if (file) {\n        file.status = 'success';\n        file.response = res;\n        this.onSuccess(res, file, this.uploadFiles);\n        this.onChange(file, this.uploadFiles);\n      }\n    },\n    handleError: function handleError(err, rawFile) {\n      var file = this.getFile(rawFile);\n      var fileList = this.uploadFiles;\n      file.status = 'fail';\n      fileList.splice(fileList.indexOf(file), 1);\n      this.onError(err, file, this.uploadFiles);\n      this.onChange(file, this.uploadFiles);\n    },\n    handleRemove: function handleRemove(file, raw) {\n      var _this = this;\n\n      if (raw) {\n        file = this.getFile(raw);\n      }\n\n      var doRemove = function doRemove() {\n        _this.abort(file);\n\n        var fileList = _this.uploadFiles;\n        fileList.splice(fileList.indexOf(file), 1);\n\n        _this.onRemove(file, fileList);\n      };\n\n      if (!this.beforeRemove) {\n        doRemove();\n      } else if (typeof this.beforeRemove === 'function') {\n        var before = this.beforeRemove(file, this.uploadFiles);\n\n        if (before && before.then) {\n          before.then(function () {\n            doRemove();\n          }, noop);\n        } else if (before !== false) {\n          doRemove();\n        }\n      }\n    },\n    getFile: function getFile(rawFile) {\n      var fileList = this.uploadFiles;\n      var target;\n      fileList.every(function (item) {\n        target = rawFile.uid === item.uid ? item : null;\n        return !target;\n      });\n      return target;\n    },\n    abort: function abort(file) {\n      this.$refs['upload-inner'].abort(file);\n    },\n    clearFiles: function clearFiles() {\n      this.uploadFiles = [];\n    },\n    submit: function submit() {\n      var _this2 = this;\n\n      this.uploadFiles.filter(function (file) {\n        return file.status === 'ready';\n      }).forEach(function (file) {\n        _this2.$refs['upload-inner'].upload(file.raw);\n      });\n    },\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'default-file-list': 'default-file-list is renamed to file-list.',\n          'show-upload-list': 'show-upload-list is renamed to show-file-list.'\n        }\n      };\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.uploadFiles.forEach(function (file) {\n      if (file.url && file.url.indexOf('blob:') === 0) {\n        URL.revokeObjectURL(file.url);\n      }\n    });\n  },\n  render: function render() {\n    var h = arguments[0];\n    var uploadList;\n    var uploadData = {\n      props: {\n        type: this.type,\n        drag: this.drag,\n        action: this.action,\n        multiple: this.multiple,\n        'before-upload': this.beforeUpload,\n        'with-credentials': this.withCredentials,\n        headers: this.headers,\n        name: this.name,\n        data: this.data,\n        accept: this.accept,\n        fileList: this.uploadFiles,\n        autoUpload: this.autoUpload,\n        listType: this.listType,\n        disabled: this.uploadDisabled,\n        limit: this.limit,\n        maxFileSize: this.maxFileSize,\n        'on-exceed': this.onExceed,\n        'on-start': this.handleStart,\n        'on-progress': this.handleProgress,\n        'on-success': this.handleSuccess,\n        'on-error': this.handleError,\n        'on-preview': this.onPreview,\n        'on-remove': this.handleRemove,\n        'http-request': this.httpRequest\n      },\n      ref: 'upload-inner'\n    };\n    var trigger = this.$slots.trigger || this.$slots.default;\n    var uploadComponent = h(\"upload\", _mergeJSXProps([{}, uploadData]), [trigger]);\n    return h(\"div\", [this.listType === 'picture-card' ? uploadList : '', this.$slots.trigger ? [uploadComponent, this.$slots.default] : uploadComponent, this.$slots.tip, this.listType !== 'picture-card' ? uploadList : '']);\n  }\n};",{"version":3,"sources":["Index.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\nimport Migrating from '../mixins/migrating'\nimport Upload from './Upload'\n\nfunction noop() {}\n\nexport default {\n  name: 'ElUpload',\n\n  mixins: [Migrating],\n\n  components: {\n    Upload,\n  },\n\n  provide() {\n    return {\n      uploader: this,\n    }\n  },\n\n  props: {\n    action: {\n      type: String,\n      required: true,\n    },\n    headers: {\n      type: Object,\n      default() {\n        return {}\n      },\n    },\n    data: Object,\n    multiple: Boolean,\n    name: {\n      type: String,\n      default: 'file',\n    },\n    drag: Boolean,\n    dragger: Boolean,\n    withCredentials: Boolean,\n    showFileList: {\n      type: Boolean,\n      default: true,\n    },\n    accept: String,\n    type: {\n      type: String,\n      default: 'select',\n    },\n    beforeUpload: Function,\n    beforeRemove: Function,\n    onRemove: {\n      type: Function,\n      default: noop,\n    },\n    onChange: {\n      type: Function,\n      default: noop,\n    },\n    onPreview: {\n      type: Function,\n    },\n    onSuccess: {\n      type: Function,\n      default: noop,\n    },\n    onProgress: {\n      type: Function,\n      default: noop,\n    },\n    onError: {\n      type: Function,\n      default: noop,\n    },\n    autoUpload: {\n      type: Boolean,\n      default: true,\n    },\n    listType: {\n      type: String,\n      default: 'text',\n    },\n    httpRequest: Function,\n    disabled: Boolean,\n    limit: Number,\n    onExceed: {\n      type: Function,\n      default: noop,\n    },\n    limitPreviewSize: {\n      type: Number,\n      default: 5242880,\n    },\n    maxFileSize: {\n      type: Number,\n      default: 500000,\n    },\n  },\n\n  data() {\n    return {\n      uploadFiles: [],\n      dragOver: false,\n      draging: false,\n      tempIndex: 1,\n    }\n  },\n\n  computed: {\n    uploadDisabled() {\n      return this.disabled\n    },\n  },\n\n  watch: {\n    listType(type) {\n      if (type === 'picture-card' || type === 'picture') {\n        this.uploadFiles.forEach((file) => {\n          if (!file.url && file.raw) {\n            try {\n              file.url = URL.createObjectURL(file.raw)\n            } catch (err) {\n              console.error('[Element Error][Upload]', err)\n            }\n          }\n        })\n      }\n    },\n  },\n\n  methods: {\n    handleStart(rawFile) {\n      rawFile.uid = Date.now() + this.tempIndex++\n      let file = {\n        status: 'ready',\n        name: rawFile.name,\n        size: rawFile.size,\n        percentage: 0,\n        uid: rawFile.uid,\n        raw: rawFile,\n      }\n\n      if (this.listType === 'picture-card' || this.listType === 'picture') {\n        try {\n          if (this.limitPreviewSize > rawFile.size) {\n            file.url = URL.createObjectURL(rawFile)\n          }\n        } catch (err) {\n          console.error('[Element Error][Upload]', err)\n          return\n        }\n      }\n\n      this.uploadFiles.push(file)\n      this.onChange(file, this.uploadFiles)\n    },\n    handleProgress(ev, rawFile) {\n      const file = this.getFile(rawFile)\n      this.onProgress(ev, file, this.uploadFiles)\n      file.status = 'uploading'\n      file.percentage = ev.percent || 0\n    },\n    handleSuccess(res, rawFile) {\n      const file = this.getFile(rawFile)\n\n      if (file) {\n        file.status = 'success'\n        file.response = res\n\n        this.onSuccess(res, file, this.uploadFiles)\n        this.onChange(file, this.uploadFiles)\n      }\n    },\n    handleError(err, rawFile) {\n      const file = this.getFile(rawFile)\n      const fileList = this.uploadFiles\n\n      file.status = 'fail'\n\n      fileList.splice(fileList.indexOf(file), 1)\n\n      this.onError(err, file, this.uploadFiles)\n      this.onChange(file, this.uploadFiles)\n    },\n    handleRemove(file, raw) {\n      if (raw) {\n        file = this.getFile(raw)\n      }\n      let doRemove = () => {\n        this.abort(file)\n        let fileList = this.uploadFiles\n        fileList.splice(fileList.indexOf(file), 1)\n        this.onRemove(file, fileList)\n      }\n\n      if (!this.beforeRemove) {\n        doRemove()\n      } else if (typeof this.beforeRemove === 'function') {\n        const before = this.beforeRemove(file, this.uploadFiles)\n        if (before && before.then) {\n          before.then(() => {\n            doRemove()\n          }, noop)\n        } else if (before !== false) {\n          doRemove()\n        }\n      }\n    },\n    getFile(rawFile) {\n      let fileList = this.uploadFiles\n      let target\n      fileList.every((item) => {\n        target = rawFile.uid === item.uid ? item : null\n        return !target\n      })\n      return target\n    },\n    abort(file) {\n      this.$refs['upload-inner'].abort(file)\n    },\n    clearFiles() {\n      this.uploadFiles = []\n    },\n    submit() {\n      this.uploadFiles\n        .filter((file) => file.status === 'ready')\n        .forEach((file) => {\n          this.$refs['upload-inner'].upload(file.raw)\n        })\n    },\n    getMigratingConfig() {\n      return {\n        props: {\n          'default-file-list': 'default-file-list is renamed to file-list.',\n          'show-upload-list': 'show-upload-list is renamed to show-file-list.',\n        },\n      }\n    },\n  },\n\n  beforeDestroy() {\n    this.uploadFiles.forEach((file) => {\n      if (file.url && file.url.indexOf('blob:') === 0) {\n        URL.revokeObjectURL(file.url)\n      }\n    })\n  },\n\n  render() {\n    let uploadList\n    const uploadData = {\n      props: {\n        type: this.type,\n        drag: this.drag,\n        action: this.action,\n        multiple: this.multiple,\n        'before-upload': this.beforeUpload,\n        'with-credentials': this.withCredentials,\n        headers: this.headers,\n        name: this.name,\n        data: this.data,\n        accept: this.accept,\n        fileList: this.uploadFiles,\n        autoUpload: this.autoUpload,\n        listType: this.listType,\n        disabled: this.uploadDisabled,\n        limit: this.limit,\n        maxFileSize: this.maxFileSize,\n        'on-exceed': this.onExceed,\n        'on-start': this.handleStart,\n        'on-progress': this.handleProgress,\n        'on-success': this.handleSuccess,\n        'on-error': this.handleError,\n        'on-preview': this.onPreview,\n        'on-remove': this.handleRemove,\n        'http-request': this.httpRequest,\n      },\n      ref: 'upload-inner',\n    }\n\n    const trigger = this.$slots.trigger || this.$slots.default\n    const uploadComponent = <upload {...uploadData}>{trigger}</upload>\n\n    return (\n      <div>\n        {this.listType === 'picture-card' ? uploadList : ''}\n        {this.$slots.trigger\n          ? [uploadComponent, this.$slots.default]\n          : uploadComponent}\n        {this.$slots.tip}\n        {this.listType !== 'picture-card' ? uploadList : ''}\n      </div>\n    )\n  },\n}\n</script>\n"],"sourceRoot":"src/kit/Upload"}]}