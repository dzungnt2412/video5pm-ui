{"remainingRequest":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/order-mapping/views/OrderMappingFails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/src/packages/order-mapping/views/OrderMappingFails.vue","mtime":1603898990384},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/vue-loader/lib/index.js","mtime":1597736282333}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/lionnix/lionnix-seller-v2/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { VclTable } from 'vue-content-loading';\nimport { mapActions, mapState } from 'vuex';\nimport mixinRoute from '@core/mixins/route';\nimport mixinTable from '@core/mixins/table';\nimport EmptySearchResult from '@components/shared/EmptySearchResult';\nimport MOdalUpdateAndRetryMapping from './components/ModalUpdateAndRetryMapping';\nexport default {\n  name: 'ProductMappingList',\n  mixins: [mixinRoute, mixinTable],\n  components: {\n    VclTable: VclTable,\n    EmptySearchResult: EmptySearchResult,\n    MOdalUpdateAndRetryMapping: MOdalUpdateAndRetryMapping\n  },\n  computed: _objectSpread(_objectSpread({}, mapState('orderMapping', {\n    orderMappingsFails: function orderMappingsFails(state) {\n      return state.orderMappingFails;\n    },\n    count: function count(state) {\n      return state.orderMappingFailsCount;\n    },\n    products: function products(state) {\n      return state.productTypes;\n    }\n  })), {}, {\n    items: function items() {\n      return this.orderMappingsFails;\n    }\n  }),\n  data: function data() {\n    return {\n      isFetching: false,\n      isVisibleRetryMapping: false,\n      selectedOrderId: 0,\n      actions: {\n        retry: {\n          title: 'Retry',\n          isNeedConfirm: true\n        }\n      }\n    };\n  },\n  created: function created() {\n    this.filter = this.getRouteQuery();\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions('orderMapping', {\n    fetchOrderMappingFails: 'fetchOrderMappingFails',\n    fetchProductTypes: 'fetchProductTypes',\n    retryOrderMappingFails: 'retryOrderMappingFails'\n  })), {}, {\n    init: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.isFetching = true;\n                this.handleUpdateRouteQuery();\n                _context.next = 4;\n                return Promise.all([this.fetchOrderMappingFails(this.filter), this.fetchProductTypes()]);\n\n              case 4:\n                this.isFetching = false;\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }(),\n    updateAndRetryItem: function updateAndRetryItem(item) {\n      this.selectedOrderId = item.id;\n      this.isVisibleRetryMapping = true;\n    },\n    retryAllItems: function () {\n      var _retryAllItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var responseRetry;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.retryOrderMappingFails({\n                  ids: this.orderMappingsFails.map(function (order) {\n                    return order.id;\n                  })\n                });\n\n              case 2:\n                responseRetry = _context2.sent;\n\n                if (!(!responseRetry || !responseRetry.success)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                this.$toast.open({\n                  type: 'error',\n                  message: responseRetry.message\n                });\n                this.isSaving = false;\n                return _context2.abrupt(\"return\");\n\n              case 7:\n                _context2.next = 9;\n                return this.init();\n\n              case 9:\n                this.$set(this.action, 'selected', []);\n                this.$toast.open({\n                  type: 'success',\n                  message: 'Retry successfully'\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function retryAllItems() {\n        return _retryAllItems.apply(this, arguments);\n      }\n\n      return retryAllItems;\n    }(),\n    handleActionItem: function () {\n      var _handleActionItem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.action.current === 'retry')) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 3;\n                return this.retryAllItems();\n\n              case 3:\n                return _context3.abrupt(\"return\");\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleActionItem() {\n        return _handleActionItem.apply(this, arguments);\n      }\n\n      return handleActionItem;\n    }()\n  }),\n  watch: {\n    filter: {\n      handler: function handler() {\n        this.init();\n      },\n      deep: true\n    }\n  }\n};",{"version":3,"sources":["OrderMappingFails.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"order-list-page page\">\n    <div class=\"page-header\">\n      <h1 class=\"page-title\">Order Mapping Fails</h1>\n    </div>\n    <div class=\"page-content container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-xl-12\">\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <VclTable class=\"my-20\" v-if=\"isFetching\"> </VclTable>\n              <template v-else-if=\"orderMappingsFails.length\">\n                <div class=\"table-responsive\">\n                  <table class=\"table table-hover\">\n                    <thead>\n                      <tr>\n                        <th\n                          width=\"40\"\n                          class=\"order-select\"\n                          :colspan=\"totalSelected > 0 ? 4 : 1\"\n                        >\n                          <p-checkbox\n                            class=\"order-select-checkbox\"\n                            :style=\"totalSelected > 0 && { width: 0 }\"\n                            :value=\"isAllChecked\"\n                            @change.native=\"toggleSelectAll\"\n                            :indeterminate=\"isIndeterminate\"\n                          >\n                          </p-checkbox>\n                          <div\n                            class=\"bulk-actions d-flex align-items-center\"\n                            v-if=\"totalSelected > 0\"\n                          >\n                            <div class=\"bulk-actions__main-bar\">\n                              <span class=\"bulk-actions__selection-count\">\n                                {{ selectionCountText }}\n                              </span>\n                              <p-button\n                                class=\"bulk-actions__actions\"\n                                type=\"primary\"\n                                @click=\"handleAction('retry')\"\n                              >\n                                Retry\n                              </p-button>\n                            </div>\n                            <span class=\"bulk-select-all\" v-if=\"isAllChecked\">\n                              Tất cả các đơn trên trang này được chọn.\n                            </span>\n                          </div>\n                        </th>\n                        <template v-if=\"totalSelected === 0\">\n                          <th>Order</th>\n                          <th>Reason</th>\n                          <th class=\"text-right\">\n                            <span class=\"mr-10\">Action</span>\n                          </th>\n                        </template>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr v-for=\"(item, i) in orderMappingsFails\" :key=\"i\">\n                        <td width=\"30\" class=\"ml-0 text-center\">\n                          <p-checkbox\n                            v-model=\"action.selected\"\n                            :native-value=\"item\"\n                          >\n                          </p-checkbox>\n                        </td>\n                        <td>{{ item.order_number }}</td>\n                        <td>\n                          {{ item.reason }}\n                        </td>\n                        <td class=\"text-right\">\n                          <div class=\"d-flex justify-content-end\">\n                            <p-button\n                              class=\"ml-15\"\n                              type=\"default\"\n                              size=\"sm\"\n                              icon=\"refresh\"\n                              iconPack=\"md\"\n                              @click=\"updateAndRetryItem(item)\"\n                              >Update and Retry</p-button\n                            >\n                          </div>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div class=\"d-flex justify-content-between align-items-center\">\n                  <span>\n                    {{ paginationLabel }}\n                  </span>\n                  <p-pagination\n                    :total=\"count\"\n                    :perPage=\"filter.limit\"\n                    :current.sync=\"filter.page\"\n                    size=\"sm\"\n                  >\n                  </p-pagination>\n                </div>\n              </template>\n              <EmptySearchResult\n                v-else\n                title=\"No order mapping failed\"\n              ></EmptySearchResult>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <MOdalUpdateAndRetryMapping\n      v-if=\"isVisibleRetryMapping\"\n      :visible.sync=\"isVisibleRetryMapping\"\n      :orderId=\"selectedOrderId\"\n      @save=\"init\"\n    />\n  </div>\n</template>\n\n<script>\nimport { VclTable } from 'vue-content-loading'\nimport { mapActions, mapState } from 'vuex'\nimport mixinRoute from '@core/mixins/route'\nimport mixinTable from '@core/mixins/table'\nimport EmptySearchResult from '@components/shared/EmptySearchResult'\nimport MOdalUpdateAndRetryMapping from './components/ModalUpdateAndRetryMapping'\nexport default {\n  name: 'ProductMappingList',\n  mixins: [mixinRoute, mixinTable],\n  components: {\n    VclTable,\n    EmptySearchResult,\n    MOdalUpdateAndRetryMapping,\n  },\n  computed: {\n    ...mapState('orderMapping', {\n      orderMappingsFails: (state) => state.orderMappingFails,\n      count: (state) => state.orderMappingFailsCount,\n      products: (state) => state.productTypes,\n    }),\n    items() {\n      return this.orderMappingsFails\n    },\n  },\n  data() {\n    return {\n      isFetching: false,\n      isVisibleRetryMapping: false,\n      selectedOrderId: 0,\n      actions: {\n        retry: {\n          title: 'Retry',\n          isNeedConfirm: true,\n        },\n      },\n    }\n  },\n  created() {\n    this.filter = this.getRouteQuery()\n  },\n  methods: {\n    ...mapActions('orderMapping', {\n      fetchOrderMappingFails: 'fetchOrderMappingFails',\n      fetchProductTypes: 'fetchProductTypes',\n      retryOrderMappingFails: 'retryOrderMappingFails',\n    }),\n\n    async init() {\n      this.isFetching = true\n      this.handleUpdateRouteQuery()\n      await Promise.all([\n        this.fetchOrderMappingFails(this.filter),\n        this.fetchProductTypes(),\n      ])\n      this.isFetching = false\n    },\n    updateAndRetryItem(item) {\n      this.selectedOrderId = item.id\n      this.isVisibleRetryMapping = true\n    },\n    async retryAllItems() {\n      const responseRetry = await this.retryOrderMappingFails({\n        ids: this.orderMappingsFails.map((order) => order.id),\n      })\n      if (!responseRetry || !responseRetry.success) {\n        this.$toast.open({ type: 'error', message: responseRetry.message })\n        this.isSaving = false\n        return\n      }\n      await this.init()\n      this.$set(this.action, 'selected', [])\n      this.$toast.open({\n        type: 'success',\n        message: 'Retry successfully',\n      })\n    },\n    async handleActionItem() {\n      if (this.action.current === 'retry') {\n        await this.retryAllItems()\n        return\n      }\n    },\n  },\n  watch: {\n    filter: {\n      handler: function() {\n        this.init()\n      },\n      deep: true,\n    },\n  },\n}\n</script>\n"],"sourceRoot":"src/packages/order-mapping/views"}]}