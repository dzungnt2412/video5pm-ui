{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/utils/datetime.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/utils/datetime.js","mtime":1603898990376},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1601450297498},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1597736171393},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1597736267502}],"contextDependencies":[],"result":["import format from 'date-fns/format';\nimport parseISO from 'date-fns/parseISO';\nimport distanceInWords from 'date-fns/formatDistance';\nimport getTime from 'date-fns/getTime';\nimport { isNumber } from '@core/utils/type';\nimport { vi } from 'date-fns/esm/locale';\n/**\n * Date\n * @param val\n * @param format\n * @returns {string}\n */\n\nexport function date(val) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MM-dd-yyyy';\n  return datetime(val, format);\n}\nexport function dateFormat(val) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MM/dd/yyyy';\n  return datetime(val, format);\n}\n/**\n * Datetime\n * @param val\n * @param convertFormat\n * @returns {string}\n */\n\nexport function datetime(val) {\n  var convertFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'dd-MM-yyyy HH:mm:ss';\n\n  if (!val) {\n    return '';\n  }\n\n  var date = isNumber(val) ? new Date(val * 1000) : new Date(val);\n  return format(date, convertFormat, {\n    awareOfUnicodeTokens: true\n  });\n}\nexport function datetimeFormatToTimeZone(val) {\n  var convertFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DDTHH:mm:ss';\n  var timezone = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!val) {\n    return '';\n  }\n\n  var date = isNumber(val) ? new Date(val * 1000) : val;\n  var dateInTimeZone = new Date(date.toLocaleString('en-US', {\n    timeZone: timezone\n  }));\n  return format(dateInTimeZone, convertFormat);\n}\n/**\n * Time ago\n * @param val\n * @returns {*}\n */\n\nexport var timeAgo = function timeAgo(val) {\n  if (!val) {\n    return '';\n  }\n\n  var date;\n\n  if (isNumber(val)) {\n    date = new Date(val * 1000);\n  } else {\n    date = new Date(val);\n  }\n\n  return distanceInWords(date, new Date(), {\n    locale: vi\n  });\n};\n/**\n * Parse time to hours and minutes\n * @param time\n * @returns {*}\n */\n\nexport var parseTime = function parseTime(time) {\n  var values = (time || '').split(':');\n\n  if (values.length >= 2) {\n    var hours = parseInt(values[0], 10);\n    var minutes = parseInt(values[1], 10);\n    return {\n      hours: hours,\n      minutes: minutes\n    };\n  }\n\n  return null;\n};\n/**\n * Compare time\n * @param time1\n * @param time2\n * @returns {number}\n */\n\nexport var compareTime = function compareTime(time1, time2) {\n  var value1 = parseTime(time1);\n  var value2 = parseTime(time2);\n  var minutes1 = value1.minutes + value1.hours * 60;\n  var minutes2 = value2.minutes + value2.hours * 60;\n\n  if (minutes1 === minutes2) {\n    return 0;\n  }\n\n  return minutes1 > minutes2 ? 1 : -1;\n};\n/**\n * Format time\n * @param time\n * @returns {string}\n */\n\nexport function formatTime(time) {\n  return (time.hours < 10 ? '0' + time.hours : time.hours) + ':' + (time.minutes < 10 ? '0' + time.minutes : time.minutes);\n}\n/**\n * Next time\n * @param time\n * @param step\n * @returns {string}\n */\n\nexport var nextTime = function nextTime(time, step) {\n  var timeValue = parseTime(time);\n  var stepValue = parseTime(step);\n  var next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes\n  };\n  next.minutes += stepValue.minutes;\n  next.hours += stepValue.hours;\n  next.hours += Math.floor(next.minutes / 60);\n  next.minutes = next.minutes % 60;\n  return formatTime(next);\n};\n/**\n * Get current unix time\n * @return {number}\n */\n\nexport var unixTime = function unixTime(date) {\n  return getTime(date ? parseISO(date) : new Date());\n};\n/**\n * Get time second\n * @returns {number}\n */\n\nexport function getTimeSecondNow() {\n  return Math.round(new Date().getTime() / 1000);\n}",{"version":3,"sources":["/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/utils/datetime.js"],"names":["format","parseISO","distanceInWords","getTime","isNumber","vi","date","val","datetime","dateFormat","convertFormat","Date","awareOfUnicodeTokens","datetimeFormatToTimeZone","timezone","dateInTimeZone","toLocaleString","timeZone","timeAgo","locale","parseTime","time","values","split","length","hours","parseInt","minutes","compareTime","time1","time2","value1","value2","minutes1","minutes2","formatTime","nextTime","step","timeValue","stepValue","next","Math","floor","unixTime","getTimeSecondNow","round"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,EAAT,QAAmB,qBAAnB;AAEA;;;;;;;AAMA,OAAO,SAASC,IAAT,CAAcC,GAAd,EAA0C;AAAA,MAAvBP,MAAuB,uEAAd,YAAc;AAC/C,SAAOQ,QAAQ,CAACD,GAAD,EAAMP,MAAN,CAAf;AACD;AAED,OAAO,SAASS,UAAT,CAAoBF,GAApB,EAAgD;AAAA,MAAvBP,MAAuB,uEAAd,YAAc;AACrD,SAAOQ,QAAQ,CAACD,GAAD,EAAMP,MAAN,CAAf;AACD;AAED;;;;;;;AAMA,OAAO,SAASQ,QAAT,CAAkBD,GAAlB,EAA8D;AAAA,MAAvCG,aAAuC,uEAAvB,qBAAuB;;AACnE,MAAI,CAACH,GAAL,EAAU;AACR,WAAO,EAAP;AACD;;AACD,MAAMD,IAAI,GAAGF,QAAQ,CAACG,GAAD,CAAR,GAAgB,IAAII,IAAJ,CAASJ,GAAG,GAAG,IAAf,CAAhB,GAAuC,IAAII,IAAJ,CAASJ,GAAT,CAApD;AACA,SAAOP,MAAM,CAACM,IAAD,EAAOI,aAAP,EAAsB;AAAEE,IAAAA,oBAAoB,EAAE;AAAxB,GAAtB,CAAb;AACD;AAED,OAAO,SAASC,wBAAT,CACLN,GADK,EAIL;AAAA,MAFAG,aAEA,uEAFgB,qBAEhB;AAAA,MADAI,QACA;;AACA,MAAI,CAACP,GAAL,EAAU;AACR,WAAO,EAAP;AACD;;AACD,MAAMD,IAAI,GAAGF,QAAQ,CAACG,GAAD,CAAR,GAAgB,IAAII,IAAJ,CAASJ,GAAG,GAAG,IAAf,CAAhB,GAAuCA,GAApD;AACA,MAAIQ,cAAc,GAAG,IAAIJ,IAAJ,CACnBL,IAAI,CAACU,cAAL,CAAoB,OAApB,EAA6B;AAC3BC,IAAAA,QAAQ,EAAEH;AADiB,GAA7B,CADmB,CAArB;AAKA,SAAOd,MAAM,CAACe,cAAD,EAAiBL,aAAjB,CAAb;AACD;AAED;;;;;;AAKA,OAAO,IAAMQ,OAAO,GAAG,SAAVA,OAAU,CAACX,GAAD,EAAS;AAC9B,MAAI,CAACA,GAAL,EAAU;AACR,WAAO,EAAP;AACD;;AAED,MAAID,IAAJ;;AAEA,MAAIF,QAAQ,CAACG,GAAD,CAAZ,EAAmB;AACjBD,IAAAA,IAAI,GAAG,IAAIK,IAAJ,CAASJ,GAAG,GAAG,IAAf,CAAP;AACD,GAFD,MAEO;AACLD,IAAAA,IAAI,GAAG,IAAIK,IAAJ,CAASJ,GAAT,CAAP;AACD;;AAED,SAAOL,eAAe,CAACI,IAAD,EAAO,IAAIK,IAAJ,EAAP,EAAmB;AAAEQ,IAAAA,MAAM,EAAEd;AAAV,GAAnB,CAAtB;AACD,CAdM;AAgBP;;;;;;AAKA,OAAO,IAAMe,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAU;AACjC,MAAMC,MAAM,GAAG,CAACD,IAAI,IAAI,EAAT,EAAaE,KAAb,CAAmB,GAAnB,CAAf;;AACA,MAAID,MAAM,CAACE,MAAP,IAAiB,CAArB,EAAwB;AACtB,QAAMC,KAAK,GAAGC,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAtB;AACA,QAAMK,OAAO,GAAGD,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAxB;AAEA,WAAO;AACLG,MAAAA,KAAK,EAALA,KADK;AAELE,MAAAA,OAAO,EAAPA;AAFK,KAAP;AAID;;AAED,SAAO,IAAP;AACD,CAbM;AAeP;;;;;;;AAMA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAC3C,MAAMC,MAAM,GAAGX,SAAS,CAACS,KAAD,CAAxB;AACA,MAAMG,MAAM,GAAGZ,SAAS,CAACU,KAAD,CAAxB;AAEA,MAAMG,QAAQ,GAAGF,MAAM,CAACJ,OAAP,GAAiBI,MAAM,CAACN,KAAP,GAAe,EAAjD;AACA,MAAMS,QAAQ,GAAGF,MAAM,CAACL,OAAP,GAAiBK,MAAM,CAACP,KAAP,GAAe,EAAjD;;AAEA,MAAIQ,QAAQ,KAAKC,QAAjB,EAA2B;AACzB,WAAO,CAAP;AACD;;AAED,SAAOD,QAAQ,GAAGC,QAAX,GAAsB,CAAtB,GAA0B,CAAC,CAAlC;AACD,CAZM;AAcP;;;;;;AAKA,OAAO,SAASC,UAAT,CAAoBd,IAApB,EAA0B;AAC/B,SACE,CAACA,IAAI,CAACI,KAAL,GAAa,EAAb,GAAkB,MAAMJ,IAAI,CAACI,KAA7B,GAAqCJ,IAAI,CAACI,KAA3C,IACA,GADA,IAECJ,IAAI,CAACM,OAAL,GAAe,EAAf,GAAoB,MAAMN,IAAI,CAACM,OAA/B,GAAyCN,IAAI,CAACM,OAF/C,CADF;AAKD;AAED;;;;;;;AAMA,OAAO,IAAMS,QAAQ,GAAG,SAAXA,QAAW,CAACf,IAAD,EAAOgB,IAAP,EAAgB;AACtC,MAAMC,SAAS,GAAGlB,SAAS,CAACC,IAAD,CAA3B;AACA,MAAMkB,SAAS,GAAGnB,SAAS,CAACiB,IAAD,CAA3B;AAEA,MAAMG,IAAI,GAAG;AACXf,IAAAA,KAAK,EAAEa,SAAS,CAACb,KADN;AAEXE,IAAAA,OAAO,EAAEW,SAAS,CAACX;AAFR,GAAb;AAKAa,EAAAA,IAAI,CAACb,OAAL,IAAgBY,SAAS,CAACZ,OAA1B;AACAa,EAAAA,IAAI,CAACf,KAAL,IAAcc,SAAS,CAACd,KAAxB;AAEAe,EAAAA,IAAI,CAACf,KAAL,IAAcgB,IAAI,CAACC,KAAL,CAAWF,IAAI,CAACb,OAAL,GAAe,EAA1B,CAAd;AACAa,EAAAA,IAAI,CAACb,OAAL,GAAea,IAAI,CAACb,OAAL,GAAe,EAA9B;AAEA,SAAOQ,UAAU,CAACK,IAAD,CAAjB;AACD,CAhBM;AAkBP;;;;;AAIA,OAAO,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACrC,IAAD;AAAA,SAAUH,OAAO,CAACG,IAAI,GAAGL,QAAQ,CAACK,IAAD,CAAX,GAAoB,IAAIK,IAAJ,EAAzB,CAAjB;AAAA,CAAjB;AAEP;;;;;AAIA,OAAO,SAASiC,gBAAT,GAA4B;AACjC,SAAOH,IAAI,CAACI,KAAL,CAAW,IAAIlC,IAAJ,GAAWR,OAAX,KAAuB,IAAlC,CAAP;AACD","sourcesContent":["import format from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport distanceInWords from 'date-fns/formatDistance'\nimport getTime from 'date-fns/getTime'\nimport { isNumber } from '@core/utils/type'\nimport { vi } from 'date-fns/esm/locale'\n\n/**\n * Date\n * @param val\n * @param format\n * @returns {string}\n */\nexport function date(val, format = 'MM-dd-yyyy') {\n  return datetime(val, format)\n}\n\nexport function dateFormat(val, format = 'MM/dd/yyyy') {\n  return datetime(val, format)\n}\n\n/**\n * Datetime\n * @param val\n * @param convertFormat\n * @returns {string}\n */\nexport function datetime(val, convertFormat = 'dd-MM-yyyy HH:mm:ss') {\n  if (!val) {\n    return ''\n  }\n  const date = isNumber(val) ? new Date(val * 1000) : new Date(val)\n  return format(date, convertFormat, { awareOfUnicodeTokens: true })\n}\n\nexport function datetimeFormatToTimeZone(\n  val,\n  convertFormat = 'YYYY-MM-DDTHH:mm:ss',\n  timezone\n) {\n  if (!val) {\n    return ''\n  }\n  const date = isNumber(val) ? new Date(val * 1000) : val\n  let dateInTimeZone = new Date(\n    date.toLocaleString('en-US', {\n      timeZone: timezone,\n    })\n  )\n  return format(dateInTimeZone, convertFormat)\n}\n\n/**\n * Time ago\n * @param val\n * @returns {*}\n */\nexport const timeAgo = (val) => {\n  if (!val) {\n    return ''\n  }\n\n  let date\n\n  if (isNumber(val)) {\n    date = new Date(val * 1000)\n  } else {\n    date = new Date(val)\n  }\n\n  return distanceInWords(date, new Date(), { locale: vi })\n}\n\n/**\n * Parse time to hours and minutes\n * @param time\n * @returns {*}\n */\nexport const parseTime = (time) => {\n  const values = (time || '').split(':')\n  if (values.length >= 2) {\n    const hours = parseInt(values[0], 10)\n    const minutes = parseInt(values[1], 10)\n\n    return {\n      hours,\n      minutes,\n    }\n  }\n\n  return null\n}\n\n/**\n * Compare time\n * @param time1\n * @param time2\n * @returns {number}\n */\nexport const compareTime = (time1, time2) => {\n  const value1 = parseTime(time1)\n  const value2 = parseTime(time2)\n\n  const minutes1 = value1.minutes + value1.hours * 60\n  const minutes2 = value2.minutes + value2.hours * 60\n\n  if (minutes1 === minutes2) {\n    return 0\n  }\n\n  return minutes1 > minutes2 ? 1 : -1\n}\n\n/**\n * Format time\n * @param time\n * @returns {string}\n */\nexport function formatTime(time) {\n  return (\n    (time.hours < 10 ? '0' + time.hours : time.hours) +\n    ':' +\n    (time.minutes < 10 ? '0' + time.minutes : time.minutes)\n  )\n}\n\n/**\n * Next time\n * @param time\n * @param step\n * @returns {string}\n */\nexport const nextTime = (time, step) => {\n  const timeValue = parseTime(time)\n  const stepValue = parseTime(step)\n\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes,\n  }\n\n  next.minutes += stepValue.minutes\n  next.hours += stepValue.hours\n\n  next.hours += Math.floor(next.minutes / 60)\n  next.minutes = next.minutes % 60\n\n  return formatTime(next)\n}\n\n/**\n * Get current unix time\n * @return {number}\n */\nexport const unixTime = (date) => getTime(date ? parseISO(date) : new Date())\n\n/**\n * Get time second\n * @returns {number}\n */\nexport function getTimeSecondNow() {\n  return Math.round(new Date().getTime() / 1000)\n}\n"]}]}