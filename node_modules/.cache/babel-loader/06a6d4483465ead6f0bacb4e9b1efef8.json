{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/utils/datetime.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/utils/datetime.js","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["import format from 'date-fns/format';\nimport parseISO from 'date-fns/parseISO';\nimport distanceInWords from 'date-fns/formatDistance';\nimport getTime from 'date-fns/getTime';\nimport { isNumber } from '@core/utils/type';\nimport { vi } from 'date-fns/esm/locale';\n/**\n * Date\n * @param val\n * @param format\n * @returns {string}\n */\n\nexport function date(val) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MM-dd-yyyy';\n  return datetime(val, format);\n}\nexport function dateFormat(val) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MM/dd/yyyy';\n  return datetime(val, format);\n}\n/**\n * Datetime\n * @param val\n * @param convertFormat\n * @returns {string}\n */\n\nexport function datetime(val) {\n  var convertFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'dd-MM-yyyy HH:mm:ss';\n\n  if (!val) {\n    return '';\n  }\n\n  var date = isNumber(val) ? new Date(val * 1000) : new Date(val);\n  return format(date, convertFormat, {\n    awareOfUnicodeTokens: true\n  });\n}\nexport function datetimeFormatToTimeZone(val) {\n  var convertFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DDTHH:mm:ss';\n  var timezone = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!val) {\n    return '';\n  }\n\n  var date = isNumber(val) ? new Date(val * 1000) : val;\n  var dateInTimeZone = new Date(date.toLocaleString('en-US', {\n    timeZone: timezone\n  }));\n  return format(dateInTimeZone, convertFormat);\n}\n/**\n * Time ago\n * @param val\n * @returns {*}\n */\n\nexport var timeAgo = function timeAgo(val) {\n  if (!val) {\n    return '';\n  }\n\n  var date;\n\n  if (isNumber(val)) {\n    date = new Date(val * 1000);\n  } else {\n    date = new Date(val);\n  }\n\n  return distanceInWords(date, new Date(), {\n    locale: vi\n  });\n};\n/**\n * Parse time to hours and minutes\n * @param time\n * @returns {*}\n */\n\nexport var parseTime = function parseTime(time) {\n  var values = (time || '').split(':');\n\n  if (values.length >= 2) {\n    var hours = parseInt(values[0], 10);\n    var minutes = parseInt(values[1], 10);\n    return {\n      hours: hours,\n      minutes: minutes\n    };\n  }\n\n  return null;\n};\n/**\n * Compare time\n * @param time1\n * @param time2\n * @returns {number}\n */\n\nexport var compareTime = function compareTime(time1, time2) {\n  var value1 = parseTime(time1);\n  var value2 = parseTime(time2);\n  var minutes1 = value1.minutes + value1.hours * 60;\n  var minutes2 = value2.minutes + value2.hours * 60;\n\n  if (minutes1 === minutes2) {\n    return 0;\n  }\n\n  return minutes1 > minutes2 ? 1 : -1;\n};\n/**\n * Format time\n * @param time\n * @returns {string}\n */\n\nexport function formatTime(time) {\n  return (time.hours < 10 ? '0' + time.hours : time.hours) + ':' + (time.minutes < 10 ? '0' + time.minutes : time.minutes);\n}\n/**\n * Next time\n * @param time\n * @param step\n * @returns {string}\n */\n\nexport var nextTime = function nextTime(time, step) {\n  var timeValue = parseTime(time);\n  var stepValue = parseTime(step);\n  var next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes\n  };\n  next.minutes += stepValue.minutes;\n  next.hours += stepValue.hours;\n  next.hours += Math.floor(next.minutes / 60);\n  next.minutes = next.minutes % 60;\n  return formatTime(next);\n};\n/**\n * Get current unix time\n * @return {number}\n */\n\nexport var unixTime = function unixTime(date) {\n  return getTime(date ? parseISO(date) : new Date());\n};\n/**\n * Get time second\n * @returns {number}\n */\n\nexport function getTimeSecondNow() {\n  return Math.round(new Date().getTime() / 1000);\n}",null]}