{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/utils/url.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/utils/url.js","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * Get parameter from URL by name\n * Don't use URLSearchParams because it doesn't support IE\n * @param name string\n * @param url string\n */\nexport var getParameterByName = function getParameterByName(name, url) {\n  if (!url) url = window.location.href;\n  name = name.replace(/[[\\]]/g, '\\\\$&');\n  var regex = new RegExp(\"[?&]\".concat(name, \"(=([^&#]*)|&|#|$)\"));\n  var results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n/**\n * Build query string by params\n * @param params\n * @returns {string}\n */\n\nexport var buildQueryString = function buildQueryString(params) {\n  if (!params) {\n    return '';\n  }\n\n  var query = [];\n  Object.entries(params).map(function (param) {\n    var _param = _slicedToArray(param, 2),\n        key = _param[0],\n        value = _param[1]; // Replace all % with %25 so when browser decode url we will get correct query string param\n\n\n    if (_typeof(value) === _typeof('')) {\n      value = value.split('%').join('%25');\n      value = value.split('#').join('%23');\n    }\n\n    query.push(\"\".concat(key, \"=\").concat(value));\n  });\n  return query.join('&');\n};\n/**\n * Convert string to query\n * @param str\n */\n\nexport var stringToQuery = function stringToQuery(str) {\n  var query = {};\n  str.split('&').forEach(function (item) {\n    var _item$split = item.split('='),\n        _item$split2 = _slicedToArray(_item$split, 2),\n        key = _item$split2[0],\n        val = _item$split2[1];\n\n    query[key] = decodeURI(val);\n  });\n  return query;\n};",{"version":3,"sources":["/home/tiendzung/workspace/video5pm/video5pm-ui/src/core/utils/url.js"],"names":["getParameterByName","name","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","buildQueryString","params","query","Object","entries","map","param","key","value","split","join","push","stringToQuery","str","forEach","item","val","decodeURI"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAMA,OAAO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAOC,GAAP,EAAe;AAC/C,MAAI,CAACA,GAAL,EAAUA,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAtB;AACVJ,EAAAA,IAAI,GAAGA,IAAI,CAACK,OAAL,CAAa,QAAb,EAAuB,MAAvB,CAAP;AACA,MAAMC,KAAK,GAAG,IAAIC,MAAJ,eAAkBP,IAAlB,uBAAd;AACA,MAAMQ,OAAO,GAAGF,KAAK,CAACG,IAAN,CAAWR,GAAX,CAAhB;AACA,MAAI,CAACO,OAAL,EAAc,OAAO,IAAP;AACd,MAAI,CAACA,OAAO,CAAC,CAAD,CAAZ,EAAiB,OAAO,EAAP;AACjB,SAAOE,kBAAkB,CAACF,OAAO,CAAC,CAAD,CAAP,CAAWH,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAD,CAAzB;AACD,CARM;AAUP;;;;;;AAKA,OAAO,IAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,MAAD,EAAY;AAC1C,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,EAAP;AACD;;AAED,MAAMC,KAAK,GAAG,EAAd;AAEAC,EAAAA,MAAM,CAACC,OAAP,CAAeH,MAAf,EAAuBI,GAAvB,CAA2B,UAACC,KAAD,EAAW;AAAA,gCACjBA,KADiB;AAAA,QAC/BC,GAD+B;AAAA,QAC1BC,KAD0B,cAEpC;;;AACA,QAAI,QAAOA,KAAP,cAAwB,EAAxB,CAAJ,EAAgC;AAC9BA,MAAAA,KAAK,GAAGA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,IAAjB,CAAsB,KAAtB,CAAR;AACAF,MAAAA,KAAK,GAAGA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,IAAjB,CAAsB,KAAtB,CAAR;AACD;;AACDR,IAAAA,KAAK,CAACS,IAAN,WAAcJ,GAAd,cAAqBC,KAArB;AACD,GARD;AAUA,SAAON,KAAK,CAACQ,IAAN,CAAW,GAAX,CAAP;AACD,CAlBM;AAoBP;;;;;AAIA,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAS;AACpC,MAAMX,KAAK,GAAG,EAAd;AAEAW,EAAAA,GAAG,CAACJ,KAAJ,CAAU,GAAV,EAAeK,OAAf,CAAuB,UAACC,IAAD,EAAU;AAAA,sBACZA,IAAI,CAACN,KAAL,CAAW,GAAX,CADY;AAAA;AAAA,QACxBF,GADwB;AAAA,QACnBS,GADmB;;AAE/Bd,IAAAA,KAAK,CAACK,GAAD,CAAL,GAAaU,SAAS,CAACD,GAAD,CAAtB;AACD,GAHD;AAKA,SAAOd,KAAP;AACD,CATM","sourcesContent":["/**\n * Get parameter from URL by name\n * Don't use URLSearchParams because it doesn't support IE\n * @param name string\n * @param url string\n */\nexport const getParameterByName = (name, url) => {\n  if (!url) url = window.location.href\n  name = name.replace(/[[\\]]/g, '\\\\$&')\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`)\n  const results = regex.exec(url)\n  if (!results) return null\n  if (!results[2]) return ''\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '))\n}\n\n/**\n * Build query string by params\n * @param params\n * @returns {string}\n */\nexport const buildQueryString = (params) => {\n  if (!params) {\n    return ''\n  }\n\n  const query = []\n\n  Object.entries(params).map((param) => {\n    let [key, value] = param\n    // Replace all % with %25 so when browser decode url we will get correct query string param\n    if (typeof value === typeof '') {\n      value = value.split('%').join('%25')\n      value = value.split('#').join('%23')\n    }\n    query.push(`${key}=${value}`)\n  })\n\n  return query.join('&')\n}\n\n/**\n * Convert string to query\n * @param str\n */\nexport const stringToQuery = (str) => {\n  const query = {}\n\n  str.split('&').forEach((item) => {\n    const [key, val] = item.split('=')\n    query[key] = decodeURI(val)\n  })\n\n  return query\n}\n"]}]}