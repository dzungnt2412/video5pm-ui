{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/shop/store/index.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/shop/store/index.js","mtime":1604479001989},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nvar _mutations;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport api from '../api';\nimport ShopService from '@core/services/shop';\nimport AuthService from '@core/services/auth';\nexport var FETCH_SHOPS = 'fetchShops';\nexport var FETCH_SHOP = 'fetchShop';\nexport var FETCH_SHOP_UPDATE = 'fetchShopUpdate';\nexport var SELECT_SHOP = 'selectShop';\nexport var UPDATE_SHOP = 'updateShop';\nexport var ADD_SHOP = 'addShop';\nexport var REMOVE_CONNECT_SHOP = 'removeConnectShop';\n/**\n * State\n */\n\nexport var state = {\n  shop: {},\n  shopUpdate: {},\n  shops: []\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, FETCH_SHOP, function (state, payload) {\n  state.shop = payload;\n}), _defineProperty(_mutations, FETCH_SHOPS, function (state, payload) {\n  state.shops = payload;\n}), _defineProperty(_mutations, ADD_SHOP, function (state, payload) {\n  state.shops.push(payload);\n}), _defineProperty(_mutations, FETCH_SHOP_UPDATE, function (state, payload) {\n  state.shopUpdate = payload;\n}), _mutations);\n/**\n * Actions\n */\n\nexport var actions = {\n  /**\n   * Init\n   * @param commit\n   */\n  init: function init(_ref) {\n    var commit = _ref.commit;\n    ShopService.init();\n\n    if (ShopService.getId()) {\n      handleSelected(commit, {\n        shop: ShopService.shop\n      });\n    }\n  },\n\n  /**\n   * Fetch shops\n   * @param commit\n   * @return {Promise<{success: boolean, message: (*|string)}|{success: boolean}>}\n   */\n  fetchShops: function () {\n    var _fetchShops = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref2.commit;\n              result = {\n                success: true\n              };\n              _context.next = 4;\n              return api.fetchShops(payload);\n\n            case 4:\n              response = _context.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  shops: []\n                };\n              }\n\n              commit(FETCH_SHOPS, response.shops);\n              return _context.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function fetchShops(_x, _x2) {\n      return _fetchShops.apply(this, arguments);\n    }\n\n    return fetchShops;\n  }(),\n  fetchShop: function () {\n    var _fetchShop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref3.commit;\n              result = {\n                success: true\n              };\n              _context2.next = 4;\n              return api.fetchShop(payload);\n\n            case 4:\n              response = _context2.sent;\n\n              if (response && !response.shop) {\n                result = {\n                  success: true,\n                  message: response.errorMessage\n                };\n                response = {\n                  shop: {}\n                };\n              }\n\n              commit(FETCH_SHOP_UPDATE, response.shop);\n              return _context2.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function fetchShop(_x3, _x4) {\n      return _fetchShop.apply(this, arguments);\n    }\n\n    return fetchShop;\n  }(),\n\n  /**\n   * Select shop\n   * @param commit\n   * @param state\n   * @param commit\n   * @param dispatch\n   * @param payload\n   * @return {Promise<object>}\n   */\n  selectShop: function () {\n    var _selectShop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4) {\n      var commit,\n          state,\n          dispatch,\n          payload,\n          result,\n          shopId,\n          response,\n          shop,\n          _args3 = arguments;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref4.commit, state = _ref4.state, dispatch = _ref4.dispatch;\n              payload = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n\n              if (!payload.fetch) {\n                _context3.next = 8;\n                break;\n              }\n\n              _context3.next = 5;\n              return dispatch('fetchShops');\n\n            case 5:\n              result = _context3.sent;\n\n              if (!(result && !result.success)) {\n                _context3.next = 8;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", {\n                success: false,\n                fetchError: false\n              });\n\n            case 8:\n              if (state.shops.length) {\n                _context3.next = 10;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", {\n                success: false,\n                noData: true\n              });\n\n            case 10:\n              shopId = payload.id || state.shops[0].id;\n              _context3.next = 13;\n              return api.selectShop({\n                shop_id: shopId\n              });\n\n            case 13:\n              response = _context3.sent;\n\n              if (!(response && response.access_token)) {\n                _context3.next = 18;\n                break;\n              }\n\n              shop = state.shops.find(function (_ref5) {\n                var id = _ref5.id;\n                return id === shopId;\n              });\n              handleSelected(commit, {\n                shop: shop,\n                accessToken: response.access_token\n              });\n              return _context3.abrupt(\"return\", {\n                success: true\n              });\n\n            case 18:\n              return _context3.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage || ''\n              });\n\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function selectShop(_x5) {\n      return _selectShop.apply(this, arguments);\n    }\n\n    return selectShop;\n  }(),\n\n  /**\n   * Add shop\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean, message: *}|{success: boolean}>}\n   */\n  addShop: function () {\n    var _addShop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref6, payload) {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref6.commit;\n              _context4.next = 3;\n              return api.addShop(payload);\n\n            case 3:\n              response = _context4.sent;\n\n              if (!(response && response.access_token)) {\n                _context4.next = 8;\n                break;\n              }\n\n              commit(ADD_SHOP, response.shop);\n              handleSelected(commit, {\n                shop: response.shop,\n                accessToken: response.access_token\n              });\n              return _context4.abrupt(\"return\", {\n                success: true\n              });\n\n            case 8:\n              return _context4.abrupt(\"return\", {\n                success: false,\n                message: response.message || response.error\n              });\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function addShop(_x6, _x7) {\n      return _addShop.apply(this, arguments);\n    }\n\n    return addShop;\n  }(),\n\n  /**\n   * Update shop\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  // eslint-disable-next-line\n  updateShop: function () {\n    var _updateShop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref7, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref7.commit;\n              result = {\n                success: true\n              };\n              _context5.next = 4;\n              return api.updateShop(payload);\n\n            case 4:\n              response = _context5.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n                response = {\n                  shop: {}\n                };\n              }\n\n              commit(FETCH_SHOP_UPDATE, response.shop);\n              return _context5.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function updateShop(_x8, _x9) {\n      return _updateShop.apply(this, arguments);\n    }\n\n    return updateShop;\n  }(),\n  removeConnectShop: function () {\n    var _removeConnectShop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref8, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref8.commit;\n              result = {\n                success: true\n              };\n              _context6.next = 4;\n              return api.removeConnectShop(payload);\n\n            case 4:\n              response = _context6.sent;\n\n              if (!response || response.error) {\n                result = {\n                  success: false,\n                  message: response.errorMessage || response.error || ''\n                };\n                response = {\n                  shop: {}\n                };\n              }\n\n              handleSelected(commit, response);\n              return _context6.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function removeConnectShop(_x10, _x11) {\n      return _removeConnectShop.apply(this, arguments);\n    }\n\n    return removeConnectShop;\n  }()\n};\n/**\n * Handle selected shop\n * @param commit\n * @param shop\n * @param accessToken\n */\n\nexport var handleSelected = function handleSelected(commit, _ref9) {\n  var shop = _ref9.shop,\n      accessToken = _ref9.accessToken;\n  commit(FETCH_SHOP, shop);\n  ShopService.set(shop);\n  var storage = {\n    id: shop.id,\n    domain: shop.domain,\n    name: shop.name,\n    logo: shop.logo,\n    platform: shop.platform\n  };\n  ShopService.storage(storage);\n\n  if (accessToken) {\n    AuthService.storageAccessToken(accessToken);\n  }\n};",null]}