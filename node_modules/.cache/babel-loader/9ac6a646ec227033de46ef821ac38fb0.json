{"remainingRequest":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js!/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/store/actions.js","dependencies":[{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/src/packages/container/store/actions.js","mtime":1604479001985},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/cache-loader/dist/cjs.js","mtime":1604479000133},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/thread-loader/dist/cjs.js","mtime":1604479001701},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/babel-loader/lib/index.js","mtime":1604479000077},{"path":"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1604478999957}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/tiendzung/workspace/video5pm/video5pm-ui/node_modules/@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport api from '../api';\nimport { FETCH_ORDERS, FETCH_ORDER_COUNT, FETCH_ORDER, FETCH_CONTAINERS, FETCH_CONTAINER_COUNT, FETCH_CONTAINER, CREATE_CONTAINER, UPDATE_ORDER, FETCH_LOGS, CANCEL_TRACKING_NUMBER } from './types';\nexport default {\n  /**\n   * Fetch orders\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  fetchOrders: function () {\n    var _fetchOrders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, payload) {\n      var commit, result, _yield$Promise$all, _yield$Promise$all2, list, count;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              result = {\n                success: true\n              };\n              _context.next = 4;\n              return Promise.all([api.fetchOrders(payload), api.fetchOrderCount(payload)]);\n\n            case 4:\n              _yield$Promise$all = _context.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              list = _yield$Promise$all2[0];\n              count = _yield$Promise$all2[1];\n\n              if (!list.orders || !count) {\n                list.orders = [];\n                count = {\n                  count: 0\n                };\n                result = {\n                  success: false,\n                  message: list.errorMessage || ''\n                };\n              }\n\n              commit(FETCH_ORDERS, list.orders);\n              commit(FETCH_ORDER_COUNT, count.count);\n              return _context.abrupt(\"return\", result);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function fetchOrders(_x, _x2) {\n      return _fetchOrders.apply(this, arguments);\n    }\n\n    return fetchOrders;\n  }(),\n\n  /**\n   * Fetch order\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  fetchOrder: function () {\n    var _fetchOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              result = {\n                success: true\n              };\n              _context2.next = 4;\n              return api.fetchOrder(payload);\n\n            case 4:\n              response = _context2.sent;\n\n              if (!response || !response.order) {\n                response.order = {};\n                result = {\n                  success: false,\n                  message: response.errorMessage || ''\n                };\n              }\n\n              commit(FETCH_ORDER, response.order);\n              return _context2.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function fetchOrder(_x3, _x4) {\n      return _fetchOrder.apply(this, arguments);\n    }\n\n    return fetchOrder;\n  }(),\n\n  /**\n   * Fetch containers\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  fetchContainers: function () {\n    var _fetchContainers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref3, payload) {\n      var commit, result, _yield$Promise$all3, _yield$Promise$all4, list, count;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              result = {\n                success: true\n              };\n              _context3.next = 4;\n              return Promise.all([api.fetchContainers(payload), api.fetchContainerCount(payload)]);\n\n            case 4:\n              _yield$Promise$all3 = _context3.sent;\n              _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);\n              list = _yield$Promise$all4[0];\n              count = _yield$Promise$all4[1];\n\n              if (!list || !list.containers || !count) {\n                list.containers = [];\n                count = {\n                  count: 0\n                };\n                result = {\n                  success: false,\n                  message: list.errorMessage\n                };\n              }\n\n              commit(FETCH_CONTAINERS, list.containers);\n              commit(FETCH_CONTAINER_COUNT, count.count);\n              return _context3.abrupt(\"return\", result);\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function fetchContainers(_x5, _x6) {\n      return _fetchContainers.apply(this, arguments);\n    }\n\n    return fetchContainers;\n  }(),\n\n  /**\n   * Fetch order\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  fetchContainer: function () {\n    var _fetchContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref4, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref4.commit;\n              result = {\n                success: true\n              };\n              _context4.next = 4;\n              return api.fetchContainer(payload);\n\n            case 4:\n              response = _context4.sent;\n\n              if (!response.container) {\n                response.container = {};\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_CONTAINER, response.container);\n              return _context4.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function fetchContainer(_x7, _x8) {\n      return _fetchContainer.apply(this, arguments);\n    }\n\n    return fetchContainer;\n  }(),\n\n  /**\n   * Create or append container\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean, message: (*|string)}|{success: boolean}>}\n   */\n  createContainer: function () {\n    var _createContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref5, payload) {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref5.commit;\n\n              if (!payload.container_id) {\n                _context5.next = 7;\n                break;\n              }\n\n              _context5.next = 4;\n              return api.appendContainer(payload);\n\n            case 4:\n              _context5.t0 = _context5.sent;\n              _context5.next = 10;\n              break;\n\n            case 7:\n              _context5.next = 9;\n              return api.createContainer(payload);\n\n            case 9:\n              _context5.t0 = _context5.sent;\n\n            case 10:\n              response = _context5.t0;\n\n              if (!(response && response.container)) {\n                _context5.next = 14;\n                break;\n              }\n\n              commit(CREATE_CONTAINER, payload.order_ids);\n              return _context5.abrupt(\"return\", {\n                success: true,\n                id: response.container.id\n              });\n\n            case 14:\n              return _context5.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage || ''\n              });\n\n            case 15:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function createContainer(_x9, _x10) {\n      return _createContainer.apply(this, arguments);\n    }\n\n    return createContainer;\n  }(),\n\n  /**\n   * Update container\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  updateContainer: function () {\n    var _updateContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref6, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref6.commit;\n              result = {\n                success: true\n              };\n              _context6.next = 4;\n              return api.updateContainer(payload);\n\n            case 4:\n              response = _context6.sent;\n\n              if (response && response.error) {\n                result = {\n                  success: false,\n                  message: response.errorMessage || ''\n                };\n              } else {\n                commit(FETCH_CONTAINER, response.container);\n              }\n\n              return _context6.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function updateContainer(_x11, _x12) {\n      return _updateContainer.apply(this, arguments);\n    }\n\n    return updateContainer;\n  }(),\n\n  /**\n   * Import orders\n   * @param commit\n   * @param payload\n   * @return {Promise<*>}\n   */\n  // eslint-disable-next-line\n  previewImportOrders: function () {\n    var _previewImportOrders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref7, payload) {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              commit = _ref7.commit;\n              _context7.next = 3;\n              return api.previewImportOrders(payload);\n\n            case 3:\n              response = _context7.sent;\n\n              if (!(response && typeof response.import_errors !== 'undefined' && typeof response.total_order !== 'undefined' && (response.import_errors.length || response.total_order > 0))) {\n                _context7.next = 6;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", _objectSpread({\n                success: true\n              }, response));\n\n            case 6:\n              return _context7.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage || ''\n              });\n\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    function previewImportOrders(_x13, _x14) {\n      return _previewImportOrders.apply(this, arguments);\n    }\n\n    return previewImportOrders;\n  }(),\n\n  /**\n   * Import orders\n   * @param commit\n   * @param payload\n   * @return {Promise<Object>}\n   */\n  // eslint-disable-next-line\n  importOrders: function () {\n    var _importOrders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_ref8, payload) {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              commit = _ref8.commit;\n              _context8.next = 3;\n              return api.importOrders(payload);\n\n            case 3:\n              response = _context8.sent;\n\n              if (!(response && typeof response.import_errors !== 'undefined' && typeof response.total_order !== 'undefined' && (response.import_errors.length || response.total_order > 0))) {\n                _context8.next = 6;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", _objectSpread({\n                success: true\n              }, response));\n\n            case 6:\n              return _context8.abrupt(\"return\", {\n                success: false,\n                message: response.errorMessage || ''\n              });\n\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function importOrders(_x15, _x16) {\n      return _importOrders.apply(this, arguments);\n    }\n\n    return importOrders;\n  }(),\n\n  /**\n   * Update order\n   * @param commit\n   * @param payload\n   * @return {Promise<object>}\n   */\n  updateOrder: function () {\n    var _updateOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref9, payload) {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              commit = _ref9.commit;\n              _context9.next = 3;\n              return api.updateOrder(payload);\n\n            case 3:\n              response = _context9.sent;\n\n              if (!(response && response.order)) {\n                _context9.next = 7;\n                break;\n              }\n\n              commit(UPDATE_ORDER, response.order);\n              return _context9.abrupt(\"return\", {\n                success: true\n              });\n\n            case 7:\n              return _context9.abrupt(\"return\", {\n                id: payload.id,\n                success: false,\n                message: response.errorMessage || ''\n              });\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    function updateOrder(_x17, _x18) {\n      return _updateOrder.apply(this, arguments);\n    }\n\n    return updateOrder;\n  }(),\n\n  /**\n   * Export container\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  // eslint-disable-next-line\n  exportContainer: function () {\n    var _exportContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_ref10, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              commit = _ref10.commit;\n              result = {\n                success: true\n              };\n              _context10.next = 4;\n              return api.exportContainer(payload);\n\n            case 4:\n              response = _context10.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              } else {\n                result = Object.assign(result, {\n                  queue: response.queue,\n                  url: response.download\n                });\n              }\n\n              return _context10.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    function exportContainer(_x19, _x20) {\n      return _exportContainer.apply(this, arguments);\n    }\n\n    return exportContainer;\n  }(),\n\n  /**\n   * Export orders\n   * @param commit\n   * @param payload\n   * @return {Promise<{success: boolean}>}\n   */\n  //eslint-disable-next-line\n  exportOrders: function () {\n    var _exportOrders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(_ref11, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              commit = _ref11.commit;\n              result = {\n                success: true\n              };\n              _context11.next = 4;\n              return api.exportOrders(payload);\n\n            case 4:\n              response = _context11.sent;\n\n              if (response.error || response.message) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              } else {\n                result.queue = response.queue;\n                result.url = response.download;\n              }\n\n              return _context11.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    function exportOrders(_x21, _x22) {\n      return _exportOrders.apply(this, arguments);\n    }\n\n    return exportOrders;\n  }(),\n  getLogs: function () {\n    var _getLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_ref12, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              commit = _ref12.commit;\n              result = {\n                success: true\n              };\n              _context12.next = 4;\n              return api.getLogs(payload);\n\n            case 4:\n              response = _context12.sent;\n\n              if (response && !response.logs) {\n                response.logs = [];\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(FETCH_LOGS, response.logs);\n              return _context12.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    function getLogs(_x23, _x24) {\n      return _getLogs.apply(this, arguments);\n    }\n\n    return getLogs;\n  }(),\n  //eslint-disable-next-line\n  createTracking: function () {\n    var _createTracking = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(_ref13, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              commit = _ref13.commit;\n              result = {\n                success: true\n              };\n              _context13.next = 4;\n              return api.createTracking(payload);\n\n            case 4:\n              response = _context13.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              return _context13.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    function createTracking(_x25, _x26) {\n      return _createTracking.apply(this, arguments);\n    }\n\n    return createTracking;\n  }(),\n\n  /* eslint-disable no-alert, no-console */\n  cancelTracking: function () {\n    var _cancelTracking = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(_ref14, payload) {\n      var commit, result, response;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              commit = _ref14.commit;\n              result = {\n                success: true\n              };\n              _context14.next = 4;\n              return api.cancelTracking(payload);\n\n            case 4:\n              response = _context14.sent;\n\n              if (response && response.errorMessage) {\n                result = {\n                  success: false,\n                  message: response.errorMessage\n                };\n              }\n\n              commit(CANCEL_TRACKING_NUMBER, payload);\n              return _context14.abrupt(\"return\", result);\n\n            case 8:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    function cancelTracking(_x27, _x28) {\n      return _cancelTracking.apply(this, arguments);\n    }\n\n    return cancelTracking;\n  }()\n};",null]}